<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>js命名规范</title>
    <url>/2019/10/22/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/js%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>从事前端开发也有一段时间了，一直在遵循着规范化开发，从 js 也逐渐转向了 ts ，在这个过程中也有了很多收获，在此把自己的开发心得写下来。</p><p>本文参考了<a href="http://www.cnblogs.com/polk6/p/4660195.html#Menu3-FrameDev" target="_blank" rel="noopener">JavaScript 开发规范</a>，并做了补充和修改，同时删去了框架开发相关的内容(侵删)。</p><h2 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1. 命名规范"></a>1. 命名规范</h2><p>ECMAScript 规范中标识符采用驼峰大小写格式，驼峰命名法由小(大)写字母开始，后续每个单词首字母都大写。根据首字母是否大写，分为两种方式：</p><a id="more"></a>


<ol>
<li>Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo</li>
<li>Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo</li>
</ol>
<p>标识符，则包括变量、函数名、类名、属性名和函数或类的参数，每个命名方法又略有不同，下面详细解释一下：</p>
<h3 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量"></a>1.1 变量</h3><p><strong>命名方法</strong>：小驼峰式命名法。</p>
<p><strong>命名规范</strong>：前缀应当是名词。(函数的名字前缀为动词，以此区分变量和函数)</p>
<p><strong>命名建议</strong>：尽量在变量名字中体现所属类型，如:length、count等表示数字类型；而包含name、title表示为字符串类型。</p>
<p><strong>eg</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 好的命名方式</span><br><span class="line">let maxCount = 10;</span><br><span class="line">let tableTitle = &apos;LoginTable&apos;;</span><br><span class="line">// 不好的命名方式</span><br><span class="line">let setCount = 10;</span><br><span class="line">let getTitle = &apos;LoginTable&apos;;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-常量"><a href="#1-2-常量" class="headerlink" title="1.2 常量"></a>1.2 常量</h3><p><strong>命名方法</strong>：名称全部大写。</p>
<p><strong>命名规范</strong>：使用大写字母和下划线来组合命名，下划线用以分割单词。</p>
<p><strong>eg</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const MAX_COUNT = 10;</span><br><span class="line">const URL = &apos;http://www.foreverz.com&apos;;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-函数"><a href="#1-3-函数" class="headerlink" title="1.3 函数"></a>1.3 函数</h3><p><strong>命名方法</strong>：小驼峰式命名法。</p>
<p><strong>命名规范</strong>：前缀应当为动词。</p>
<p><strong>命名建议</strong>：可使用常见动词约定</p>
<table>
<thead>
<tr>
<th>动词</th>
<th>含义</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>can</td>
<td>判断是否可执行某个动作(权限)</td>
<td>函数返回一个布尔值。true：可执行；false：不可执行</td>
</tr>
<tr>
<td>has</td>
<td>判断是否含有某个值</td>
<td>函数返回一个布尔值。true：含有此值；false：不含有此值</td>
</tr>
<tr>
<td>is</td>
<td>判断是否为某个值</td>
<td>函数返回一个布尔值。true：为某个值；false：不为某个值</td>
</tr>
<tr>
<td>get</td>
<td>获取某个值</td>
<td>函数返回一个非布尔值</td>
</tr>
<tr>
<td>set</td>
<td>设置某个值</td>
<td>无返回值、返回是否设置成功或者返回链式对象</td>
</tr>
<tr>
<td>load</td>
<td>加载某些数据</td>
<td>无返回值或者返回是否加载完成的结果</td>
</tr>
</tbody>
</table>
<p><strong>eg</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 是否可阅读</span><br><span class="line">function canRead(): boolean &#123;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line">// 获取名称</span><br><span class="line">function getName(): string &#123;</span><br><span class="line">  return this.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4-类-amp-构造函数"><a href="#1-4-类-amp-构造函数" class="headerlink" title="1.4 类 &amp; 构造函数"></a>1.4 类 &amp; 构造函数</h3><p><strong>命名方法</strong>：大驼峰式命名法，首字母大写。</p>
<p><strong>命名规范</strong>：前缀为名称。</p>
<p><strong>eg</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  public name: string;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const person = new Person(&apos;mevyn&apos;);</span><br></pre></td></tr></table></figure>
<h3 id="1-5-类的成员"><a href="#1-5-类的成员" class="headerlink" title="1.5 类的成员"></a>1.5 类的成员</h3><p>类的成员包含：</p>
<ol>
<li>公共属性和方法：跟变量和函数的命名一样。</li>
<li>私有属性和方法：前缀为_(下划线)，后面跟公共属性和方法一样的命名方式。</li>
</ol>
<p><strong>eg</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  private _name: string;</span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line">  // 公共方法</span><br><span class="line">  getName() &#123;</span><br><span class="line">    return this._name;</span><br><span class="line">  &#125;</span><br><span class="line">  // 公共方法</span><br><span class="line">  setName(name) &#123;</span><br><span class="line">    this._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const person = new Person();</span><br><span class="line">person.setName(&apos;mervyn&apos;);</span><br><span class="line">person.getName(); // -&gt;mervyn</span><br></pre></td></tr></table></figure>
<h2 id="2-注释规范"><a href="#2-注释规范" class="headerlink" title="2. 注释规范"></a>2. 注释规范</h2><p>js 支持三种不同类型的注释：行内注释、单行注释和多行注释：</p>
<h3 id="2-1-行内注释"><a href="#2-1-行内注释" class="headerlink" title="2.1 行内注释"></a>2.1 行内注释</h3><p><strong>说明</strong>：行内注释以两个斜线开始，以行尾结束。</p>
<p><strong>语法</strong>：code // 这是行内注释</p>
<p><strong>使用方式</strong>：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。</p>
<p><strong>命名建议</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 用来显示一个解释的评论</span><br><span class="line">// -&gt; 用来显示表达式的结果，</span><br><span class="line">// &gt;用来显示 console 的输出结果，</span><br></pre></td></tr></table></figure>
<p><strong>eg</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test() &#123; // 测试函数</span><br><span class="line">  console.log(&apos;Hello World!&apos;); // &gt;Hello World!</span><br><span class="line">  return 3 + 2; // -&gt;5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-单行注释"><a href="#2-2-单行注释" class="headerlink" title="2.2 单行注释"></a>2.2 单行注释</h3><p><strong>说明</strong>：单行注释以两个斜线开始，以行尾结束。</p>
<p><strong>语法</strong>：// 这是单行注释</p>
<p><strong>使用方式</strong>：单独一行：//(双斜线)与注释文字之间保留一个空格。</p>
<p><strong>eg</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 调用了一个函数；1)单独在一行</span><br><span class="line">setTitle();</span><br></pre></td></tr></table></figure>
<h3 id="2-3-多行注释"><a href="#2-3-多行注释" class="headerlink" title="2.3 多行注释"></a>2.3 多行注释</h3><p><strong>说明</strong>：以 <code>/*</code> 开头， <code>*/</code> 结尾</p>
<p><strong>语法</strong>：<code>/* 注释说明 */</code></p>
<p><strong>使用方法</strong>：若开始<code>/*</code>和结束<code>*/</code>都在一行，推荐采用单行注释。若至少三行注释时，第一行为<code>/*</code>，最后行为<code>*/</code>，其他行以<code>*</code>开始，并且注释文字与<code>*</code>保留一个空格。</p>
<p><strong>eg</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 代码执行到这里后会调用setTitle()函数</span><br><span class="line">* setTitle()：设置title的值</span><br><span class="line">*/</span><br><span class="line">setTitle();</span><br></pre></td></tr></table></figure>
<h3 id="2-4-函数-方法-注释"><a href="#2-4-函数-方法-注释" class="headerlink" title="2.4 函数(方法)注释"></a>2.4 函数(方法)注释</h3><p><strong>说明</strong>：函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照<a href="http://www.css88.com/doc/jsdoc/" target="_blank" rel="noopener">JSDoc</a></p>
<p><strong>语法</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/** </span><br><span class="line">* 函数说明 </span><br><span class="line">* @关键字 </span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p><strong>常用注释关键字</strong>：(只列出一部分，并不是全部)</p>
<table>
<thead>
<tr>
<th>注释名</th>
<th>语法</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>@param</td>
<td>@param 参数名 {参数类型} 描述信息</td>
<td>描述参数的信息</td>
<td>@param name {String} 传入名称</td>
</tr>
<tr>
<td>@return</td>
<td>@return {返回类型} 描述信息</td>
<td>描述返回值的信息</td>
<td>@return {Boolean} true:可执行;false:不可执行</td>
</tr>
<tr>
<td>@author</td>
<td>@author 作者信息 [附属信息：如邮箱、日期]</td>
<td>描述此函数作者的信息</td>
<td>@author 张三 2015/07/21</td>
</tr>
<tr>
<td>@version</td>
<td>@version XX.XX.XX</td>
<td>描述此函数的版本号</td>
<td>@version 1.0.3</td>
</tr>
<tr>
<td>@example</td>
<td>@example 示例代码</td>
<td>演示函数的使用</td>
<td>@example setTitle(‘测试’)</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 合并Grid的行</span><br><span class="line">* @param grid &#123;Ext.Grid.Panel&#125; 需要合并的Grid</span><br><span class="line">* @param cols &#123;Array&#125; 需要合并列的Index(序号)数组；从0开始计数，序号也包含。</span><br><span class="line">* @param isAllSome &#123;Boolean&#125; ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样</span><br><span class="line">* @return void</span><br><span class="line">* @author polk6 2015/07/21 </span><br><span class="line">* @example</span><br><span class="line">* _________________ _________________</span><br><span class="line">* | 年龄 | 姓名 | | 年龄 | 姓名 |</span><br><span class="line">* ----------------- mergeCells(grid,[0]) -----------------</span><br><span class="line">* | 18 | 张三 | =&gt; | | 张三 |</span><br><span class="line">* ----------------- - 18 ---------</span><br><span class="line">* | 18 | 王五 | | | 王五 |</span><br><span class="line">* ----------------- -----------------</span><br><span class="line">*/</span><br><span class="line">function mergeCells(grid: Ext.Grid.Panel, cols: Number[], isAllSome: boolean = false) &#123;</span><br><span class="line">  // Do Something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里只是详细讲解了 标识符命名规范 和 代码注释规范，还有很多其它的规范没来得及填充，可以参考一下<a href="https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md" target="_blank" rel="noopener">Airbnb JavaScript Style Guide</a></p>
<p>参考书籍和文章：</p>
<p><a href="https://book.douban.com/subject/10546125/" target="_blank" rel="noopener">JavaScript高级程序设计（第3版）</a></p>
<p><a href="http://www.cnblogs.com/polk6/p/4660195.html#Menu3-FrameDev" target="_blank" rel="noopener">JavaScript 开发规范</a></p>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
  </entry>
  <entry>
    <title>Vue路由跳转时传参</title>
    <url>/2019/10/22/Vue/Vue%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E6%97%B6%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍了vue中使用路由进行页面的跳转时,vue的路由如何传递参数,第二个页面如何获取参数.</p>
</blockquote>
<a id="more"></a>
<h1 id="一-通过router-link进行跳转"><a href="#一-通过router-link进行跳转" class="headerlink" title="一. 通过router-link进行跳转"></a>一. 通过router-link进行跳转</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link</span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path: &apos;yourPath&apos;,</span><br><span class="line">    params: &#123;</span><br><span class="line">    name: &apos;name&apos;,</span><br><span class="line">        dataObj: data</span><br><span class="line">&#125;,</span><br><span class="line">query: &#123;</span><br><span class="line">    name: &apos;name&apos;,</span><br><span class="line">        dataObj: data</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>path -&gt; 是要跳转的路由路径,也可以是路由文件里面配置的 name 值,两者都可以进行路由导航</li>
<li>params -&gt; 是要传送的参数,参数可以直接key:value形式传递</li>
<li>query -&gt; 是通过 url 来传递参数的同样是key:value形式传递</li>
</ol>
<h1 id="二-通过编程导航-router进行路由跳转"><a href="#二-通过编程导航-router进行路由跳转" class="headerlink" title="二. 通过编程导航 $router进行路由跳转"></a>二. 通过编程导航 $router进行路由跳转</h1><h2 id="1-路径后拼接参数"><a href="#1-路径后拼接参数" class="headerlink" title="1.路径后拼接参数"></a>1.路径后拼接参数</h2><p><strong>通过路径后直接拼接来传递参数</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getDescribe(id) &#123;</span><br><span class="line">// 直接调用$router.push 实现携带参数的跳转</span><br><span class="line">        this.$router.push(&#123;</span><br><span class="line">          path: `/describe/$&#123;id&#125;`,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong>对应路由配置</strong><br><strong>注意:</strong>此方法需要修改对应路由配置,需要在path中添加/:id来对应 $router.push 中path携带的参数。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &apos;/describe/:id&apos;,</span><br><span class="line">    name: &apos;Describe&apos;,</span><br><span class="line">    component: Describe</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>获取传递的参数值</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure></p>
<p><strong>注意:</strong>此处不是<code>$router</code>,而是<code>$route</code>,没有”r”.</p>
<h2 id="2-通过params来传递参数"><a href="#2-通过params来传递参数" class="headerlink" title="2. 通过params来传递参数"></a>2. 通过params来传递参数</h2><p><strong>传递参数</strong><br>通过路由属性中的name来确定匹配的路由，通过params来传递参数。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">         name: &apos;Describe&apos;,</span><br><span class="line">         params: &#123;</span><br><span class="line">           id: id</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong>对应路由配置</strong><br>注意这里不能使用:/id来传递参数了，因为已经使用params来携带参数了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     path: &apos;/describe&apos;,</span><br><span class="line">     name: &apos;Describe&apos;,</span><br><span class="line">     component: Describe</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>获取参数</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure></p>
<p><strong>注意:</strong>此处不是<code>$router</code>,而是<code>$route</code>,没有”r”.</p>
<h2 id="3-通过query来传递参数"><a href="#3-通过query来传递参数" class="headerlink" title="3. 通过query来传递参数"></a>3. 通过query来传递参数</h2><p><strong>传递参数</strong><br>使用path来匹配路由，然后通过query来传递参数<br>这种情况下 query传递的参数会显示在url后面?id=？<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">          path: &apos;/describe&apos;,</span><br><span class="line">          query: &#123;</span><br><span class="line">            id: id</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong>对应路由配置</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &apos;/describe&apos;,</span><br><span class="line">    name: &apos;Describe&apos;,</span><br><span class="line">    component: Describe</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>获取参数</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$route.query.id</span><br></pre></td></tr></table></figure></p>
<p><strong>注意:</strong>此处不是<code>$router</code>,而是<code>$route</code>,没有”r”.</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue $emit $refs子父组件间方法的调用</title>
    <url>/2019/10/22/Vue/Vue-emit-refs%E5%AD%90%E7%88%B6%E7%BB%84%E4%BB%B6%E9%97%B4%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue组件之间传参</title>
    <url>/2019/10/22/Vue/Vue%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>vue常用指令</title>
    <url>/2019/10/19/Vue/vue%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>指令 (Directives) 是带有<code>v-</code> 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p><h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>用于动态改变内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello Vue!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind:"></a><code>v-bind</code>:</h2><p>用于动态改变标签内的属性</p>
<p>将这个元素节点的 title 特性和 Vue 实例的 message 属性保持一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app-2&quot;&gt;</span><br><span class="line">  &lt;span v-bind:title=&quot;message&quot;&gt;</span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var app2 = new Vue(&#123;</span><br><span class="line">  el: &apos;#app-2&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;页面加载于 &apos; + new Date().toLocaleString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a><code>v-model</code></h2><p>主要用于实现表单输入和应用状态之间的双向绑定 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app-6&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;input v-model=&quot;message&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var app6 = new Vue(&#123;</span><br><span class="line">  el: &apos;#app-6&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello Vue!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h2><p>于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h2><p>于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。 不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code>只是简单地切换元素的 CSS 属性 display。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般来说，<code>v-if</code>有更高的切换开销，而<code>v-show</code>有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用<code>v-show</code>较好；如果在运行时条件很少改变，则使用 <code>v-if</code>较好。</p>
<h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><p>以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code>指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-1&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &apos;Foo&apos; &#125;,</span><br><span class="line">      &#123; message: &apos;Bar&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<ul>
<li>Foo</li>
<li>Bar</li>
</ul>
<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a><code>v-on</code></h2><p>用<code>v-on</code>指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;counter += 1&quot;&gt;Add 1&lt;/button&gt;</span><br><span class="line">  &lt;p&gt;The button above has been clicked &#123;&#123; counter &#125;&#125; times.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-1&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    counter: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue.js官方文档</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>hexo使用next主题更新文章报错页面空白</title>
    <url>/2019/10/18/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/hexo%E4%BD%BF%E7%94%A8next%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0%E6%8A%A5%E9%94%99%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD/</url>
    <content><![CDATA[<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><p>hexo更新主题next报错应用程序未找到<br>hexo版本：3.7.1<br>next版本：7.4.1</p><h2 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h2><p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g82iw8p8y3j30gc07674i.jpg" alt="91d3f82d-8c77-4450-b9aa-02b197d13b18.png"></p><p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g82iwjplqjj31he0h1abd.jpg" alt="a9290383-eb46-46e4-8f83-3e0397b3523b.png"></p><h1 id="解决过程："><a href="#解决过程：" class="headerlink" title="解决过程："></a>解决过程：</h1><h2 id="定位报错文章"><a href="#定位报错文章" class="headerlink" title="定位报错文章"></a>定位报错文章</h2><p>一步步重现我更新的操作，发现时移入文章后开始报这个错，然后定位报错的文章（一个个试看哪个移动后报错），定位到了如下文章：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 目前流行的组件库有哪些？css，js各有哪些流行的库？</span><br><span class="line">categories:</span><br><span class="line">  - 层叠样式表CSS</span><br><span class="line">  - 深度思考</span><br><span class="line">date: 2019-10-11 22:17:53</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line"># CSS流行组件库</span><br><span class="line"></span><br><span class="line">## Bootstrap </span><br><span class="line"></span><br><span class="line">Bootstrap，让你的页面更简洁、直观、强悍、移动设备优先的前端开发框架,让web开发更迅速、更简单。它还提供了更优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。有着丰富的网格布局系统以及丰富的可重用组件，还有强大的支持十几的JavaScript、jQuery插件以及组件定制等。</span><br><span class="line"></span><br><span class="line">Bootstrap中文网地址：http://www.bootcss.com/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JS流行组件库</span><br><span class="line"></span><br><span class="line">## jQuery </span><br><span class="line"></span><br><span class="line">jQuery是最常用的JavaScript库，它革命性的在客户端开发，将CSS选择器引入到DOM节点检索加链接来应用事件处理程序，动画和Ajax调用.jQuery近年来备受青睐，对于一个很需要的的JavaScript的功能的项目来说，jQuery的的的绝对是一个可行的选择。</span><br><span class="line"></span><br><span class="line">官网地址： https://jquery.com/ </span><br><span class="line"></span><br><span class="line">## ElementUI</span><br><span class="line"></span><br><span class="line">Element-Ul是饿了么前端团队推出的一款基于Vue.js 2.0 的桌面端UI框架，手机端有对应框架是Mint UI 。适合于Vue的UI框架；</span><br><span class="line"></span><br><span class="line">官网地址：http://element-cn.eleme.io/#/zh-CN</span><br><span class="line"></span><br><span class="line">## Ant Design</span><br><span class="line"></span><br><span class="line">服务于企业级产品的设计体系，基于确定和自然的设计价值观上的模块化解决方案，让设计者和开发者专注于更好的用户体验。 </span><br><span class="line"></span><br><span class="line">官网地址：&lt;https://ant.design/index-cn&gt; </span><br><span class="line"></span><br><span class="line">## UI Bootstrap</span><br><span class="line"></span><br><span class="line">基于Angular2的一款组件库，有手风琴，日期选择器，弹出窗口等组件。</span><br><span class="line"></span><br><span class="line">官网地址：&lt;https://angular-ui.github.io/bootstrap/&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a>



<h2 id="定位报错代码"><a href="#定位报错代码" class="headerlink" title="定位报错代码"></a>定位报错代码</h2><p>一行行删除代码，发现删除如下行代码，编译后不再报错。<br>报错代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## jQuery</span><br></pre></td></tr></table></figure></p>
<p>代码区块：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># CSS流行组件库</span><br><span class="line"></span><br><span class="line">## Bootstrap </span><br><span class="line"></span><br><span class="line">Bootstrap，让你的页面更简洁、直观、强悍、移动设备优先的前端开发框架,让web开发更迅速、更简单。它还提供了更优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。有着丰富的网格布局系统以及丰富的可重用组件，还有强大的支持十几的JavaScript、jQuery插件以及组件定制等。</span><br><span class="line"></span><br><span class="line">Bootstrap中文网地址：http://www.bootcss.com/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JS流行组件库</span><br><span class="line"></span><br><span class="line">## jQuery</span><br></pre></td></tr></table></figure></p>
<h1 id="问题解决方案"><a href="#问题解决方案" class="headerlink" title="问题解决方案"></a>问题解决方案</h1><p>将jQuery前面加一些文字</p>
<h1 id="问题出现原因："><a href="#问题出现原因：" class="headerlink" title="问题出现原因："></a>问题出现原因：</h1><p>我依次尝试了一下几种写法试图找一下规律：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 123 正常渲染</span><br><span class="line">## JS库jQuery 正常渲染</span><br><span class="line">## **jQuery** 报错,页面空白</span><br><span class="line">## jquery  报错,页面空白</span><br><span class="line">## eg:jquery  报错,页面空白</span><br><span class="line">## eg:jQuery  报错,页面空白</span><br><span class="line">## jQuery 报错,页面空白</span><br></pre></td></tr></table></figure></p>
<p>大概可能是jQuery影响了hexo的编译吧，具体原因不明，去github上问一下再来补充吧。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>问题解决耗时：3小时<br>这么一个小小的问题导致整个页面崩溃，而且还这么难定位，从报错信息根本无从下手，真是难受。<br>本问题解决使用了寻找bug的一般流程和二分排除法。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://tianxintiandisheng.github.io/2018/08/24/项目开发/如何验证程序是否完成，测试以及修正Bug" target="_blank" rel="noopener">如何验证程序是否完成，测试以及deBug?</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>知道css有个content属性吗？有什么作用？有什么应用？</title>
    <url>/2019/10/11/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8315/%E7%9F%A5%E9%81%93css%E6%9C%89%E4%B8%AAcontent%E5%B1%9E%E6%80%A7%E5%90%97%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%BA%94%E7%94%A8%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="CSS-content"><a href="#CSS-content" class="headerlink" title="CSS content"></a>CSS content</h1><p>content 属性与 :before 及 :after 伪元素配合使用，来插入生成内容。 </p><p>实例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">a:after &#123;content: &quot; (&quot; attr(href) &quot;)&quot;;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://tianxintiandisheng.github.io&quot;&gt;天心天地生的个人博客&lt;/a&gt; - 免费的在线笔记&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;注意:&lt;/b&gt;仅当 !DOCTYPE已经定义 IE8支持 content属性&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><a id="more"></a>


<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ul>
<li>最基本的 – 生成内容  content属性与:before及:after伪元素配合使用生成文本内容 </li>
<li>嵌入文字符号 </li>
<li>使用计数器创建号码内容  </li>
<li>为多语言内容插入正确的引号  </li>
<li>用图片替换文字  </li>
<li>显示相对应的链接图标  </li>
<li>使用属性值作为content内容 </li>
</ul>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？</title>
    <url>/2019/10/11/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8315/%E7%9F%A5%E9%81%93%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%A0%BC%E5%BC%8F%E5%90%97%EF%BC%9F%E8%B0%88%E8%B0%88%E7%90%86%E8%A7%A3%E3%80%82%E5%9C%A8%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E4%B8%AD%E5%BA%94%E8%AF%A5%E8%80%83%E8%99%91%E5%BE%AE%E6%A0%BC%E5%BC%8F%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="微格式"><a href="#微格式" class="headerlink" title="微格式"></a>微格式</h1><p>建立在已有的、被广泛采用的标准基础之上的一组简单的、开放的数据格式（microformats.org官方定义）。</p><p>是把语义嵌入到HTML以便有助于分离式开发而制定的一些简单约定，是兼顾人机可读性设计的数据表达方式，对Web网页进行语义注解的方法。</p><p>这种方法依托于标准的Web页面写作技术，例如，XHTML，这样引入语义信息对浏览器等所有现存的Web技术冲击最小。采用Microformat的 Web页面，在XHTML文档中给一些标签（Tag）增加一些属性（attribute），这些属性对信息的语义结构进行注解，处理XHTML文档的软件，</p><a id="more"></a>


<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="简单的微格式"><a href="#简单的微格式" class="headerlink" title="简单的微格式"></a>简单的微格式</h2><p>我们从上面的描述知道，微格式实际就是为现有的(X)HTML元素添加元数据和其他属性，增强语义。那么我们就来看一个简单的微格式应用吧。</p>
<p>以前我们是这样写一个链接到首页的<code>&lt;a&gt;&lt;/a&gt;</code>代码的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=”http://www.bbon.cn”&gt;Web Design Blog&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>而现在我们要为这个代码元素<code>&lt;a&gt;</code>加上 rel属性。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=”http://www.bbon.cn“ rel=”homepage”&gt;Web Design Blog&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>
<p>上面的链接标记<code>&lt;a&gt;</code>包括rel=”home”属性，该属性显示链接的目标页面是该网站的首页。通过为已有的链接元素添加语义化属性，就为这个链接添加了具体的结构和意义。</p>
<h2 id="hCard-微格式"><a href="#hCard-微格式" class="headerlink" title="hCard 微格式"></a>hCard 微格式</h2><p>hCard是一种微格式，用来发布个人，公司，组织，地点等详细的联系信息。它可以包含在(X)HTML，Atom，RSS等可扩展置标语言中。hCard使用vCard（RFC 2426）的属性和值来实现这些功能。</p>
<p>它可以使分析器（比如其他网站，Firefox的Operator插件）获得详细的信息，并通过别的网站或者地图工具进行显示，或者载入到地址簿等其他程序。</p>
<h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>如下HTML代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div&gt;Joe Doe&lt;/div&gt;</span><br><span class="line">&lt;div&gt;The Example Company&lt;/div&gt;</span><br><span class="line">&lt;div&gt;604-555-1234&lt;/div&gt;</span><br><span class="line">&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p> 加入微格式后，成为： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;vcard&quot;&gt;</span><br><span class="line">&lt;div class=&quot;fn&quot;&gt;Joe Doe&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;org&quot;&gt;The Example Company&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;tel&quot;&gt;604-555-1234&lt;/div&gt;</span><br><span class="line">&lt;a class=&quot;url&quot; href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>这里，正式名称（class=”fn”），组织（class=”org”），电话号码（class=”tel”）和url（class=”url”）分别用相应的class标示；同时，所有内容都包含在class=”vcard”里。 </p>
<h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><p>这里是维基媒体基金会的联系方式，可以作为hCard的一个真实示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Wikimedia Foundation Inc.</span><br><span class="line"></span><br><span class="line">200 2nd Ave. South #358</span><br><span class="line"></span><br><span class="line">St. Petersburg, FL 33701-4313</span><br><span class="line"></span><br><span class="line">USA</span><br><span class="line"></span><br><span class="line">Phone: +1-727-231-0101</span><br><span class="line"></span><br><span class="line">Email: info@wikimedia.org</span><br><span class="line"></span><br><span class="line">Fax: +1-727-258-0207</span><br></pre></td></tr></table></figure>
<p>加入微格式后，成为： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;vcard&quot;&gt;</span><br><span class="line">&lt;div class=&quot;fn org&quot;&gt;Wikimedia Foundation Inc.&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;adr&quot;&gt;</span><br><span class="line">&lt;div class=&quot;street-address&quot;&gt;200 2nd Ave. South #358&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span class=&quot;locality&quot;&gt;St. Petersburg&lt;/span&gt;,</span><br><span class="line">&lt;span class=&quot;region&quot;&gt;FL&lt;/span&gt; &lt;span class=&quot;postal-code&quot;&gt;33701-4313&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;country-name&quot;&gt;USA&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;Phone: &lt;span class=&quot;tel&quot;&gt;+1-727-231-0101&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;Email: &lt;span class=&quot;email&quot;&gt;info@wikimedia.org&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span class=&quot;tel&quot;&gt;&lt;span class=&quot;type&quot;&gt;Fax&lt;/span&gt;:</span><br><span class="line">&lt;span class=&quot;value&quot;&gt;+1-727-258-0207&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>注意，在这个例子中，正式名称（class=”fn”）和组织（class=”org”）写在了一个属性中，表示这是一个组织，而不是个人。 </p>
<h1 id="在前端构建中微格式的意义"><a href="#在前端构建中微格式的意义" class="headerlink" title="在前端构建中微格式的意义"></a>在前端构建中微格式的意义</h1><p>那么，微格式在实际应用中的意义和作用又是什么呢？微格式按照某种已有的被广泛应用的标准，通过对内容块的语义标记，可以让外部应用程序、聚合程序和搜索引擎能够做以下事情：</p>
<ol>
<li>在爬取Web内容时，能够更为准确地识别内容块的语义；</li>
<li>对内容进行操作，包括提供访问、校对，还可以将其转化成其他的相关格式，提供给外部程序和Web服务使用。</li>
</ol>
<p>总结： 可以对网站进行SEO优化，如果需要可以考虑。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/deng131/article/details/83632737" target="_blank" rel="noopener">什么是微格式及实例</a></p>
<p>版权声明：本文为CSDN博主「deng131」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/deng131/article/details/83632737" target="_blank" rel="noopener">https://blog.csdn.net/deng131/article/details/83632737</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>HTML5的离线储存怎么使用？</title>
    <url>/2019/10/11/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8315/HTML5%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%82%A8%E5%AD%98%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%EF%BC%9F/</url>
    <content><![CDATA[<p>HTML5 提拱更好的本地存储规范 localStorage 和 sessionStorage , 它们将数据存储在本地，而且在http请求时不会携带 Storage 里的信息, 使用方式也很简单: </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localStorage.setItem(&apos;key&apos;, &apos;value&apos;);</span><br><span class="line">localStorage.getItem(&apos;key&apos;);</span><br><span class="line">localStorage.removeItem(&apos;key&apos;);</span><br><span class="line">sessionStorage.setItem(&apos;key&apos;, &apos;value&apos;);</span><br><span class="line">sessionStorage.getItem(&apos;key&apos;);</span><br><span class="line">sessionStorage.removeItem(&apos;key&apos;);</span><br></pre></td></tr></table></figure><a id="more"></a>

<p>sessionStorage 和 localStorage 使用方式及特性基本一致，</p>
<p>唯一的区别是：</p>
<ul>
<li>localStorage - 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。</li>
<li>sessionStorage - 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</li>
</ul>
<p>参考资料：<a href="https://www.runoob.com/html/html5-webstorage.html" target="_blank" rel="noopener">HTML5 Web 存储</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>渐进增强和优雅降级之间有什么不同?</title>
    <url>/2019/10/11/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8315/%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C/</url>
    <content><![CDATA[<h1 id="渐进增强"><a href="#渐进增强" class="headerlink" title="渐进增强"></a>渐进增强</h1><p>在网页开发中，渐进增强认为应该专注于内容本身。一开始针对低版本的浏览器构建页面，满足最基本的功能，再针对高级浏 览器进行效果，交互，追加各种功能以达到更好用户体验。</p><p><strong>总结： 以最低要求，实现最基础功能为基本，向上兼容.</strong>  </p><h1 id="优雅降级"><a href="#优雅降级" class="headerlink" title="优雅降级"></a>优雅降级</h1><p>在网页开发中，优雅降级指的是一开始针对一个高版本的浏览器构建页面，先完善所有的功能。然后针对各个不同的浏览器进行测试，修复，保证低级浏览器也有基本功能 就好，低级浏览器被认为“简陋却无妨 (poor, but passable)” 可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较 大的错误之外，其它的差异将被直接忽略。</p><a id="more"></a>


<p><strong>总结： 以高要求，高版本为基准，向下兼容。</strong>  </p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>Quirks模式是什么？它和Standards模式有什么区别？</title>
    <url>/2019/10/11/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8315/Quirks%E6%A8%A1%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%AE%83%E5%92%8CStandards%E6%A8%A1%E5%BC%8F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="Quirks怪癖模式是什么"><a href="#Quirks怪癖模式是什么" class="headerlink" title="Quirks怪癖模式是什么"></a>Quirks怪癖模式是什么</h1><p> 从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。 </p><p> 在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？  在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能。IE6也是类似这样做的，它将DTD（文档类型定义）当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定 如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是Quirks模式（怪癖模式，诡异模式，怪异模式）。 </p><a id="more"></a>

<h1 id="Quirks和Standards模式有什么区别"><a href="#Quirks和Standards模式有什么区别" class="headerlink" title="Quirks和Standards模式有什么区别"></a>Quirks和Standards模式有什么区别</h1><p>总体会有布局、样式解析和脚本执行三个方面的区别。</p>
<p>盒模型：在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在Quirks 模式下，IE的宽度和高度还包含了padding和border。  </p>
<p>设置行内元素的高宽：在Standards模式下，给等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。  </p>
<p>设置百分比的高度：在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的  用margin:0 auto设置水平居中：使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效。 </p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>目前流行的组件库有哪些？css，js各有哪些流行的库？</title>
    <url>/2019/10/11/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8315/%E7%9B%AE%E5%89%8D%E6%B5%81%E8%A1%8C%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9Fcss%EF%BC%8Cjs%E5%90%84%E6%9C%89%E5%93%AA%E4%BA%9B%E6%B5%81%E8%A1%8C%E7%9A%84%E5%BA%93%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="CSS流行组件库"><a href="#CSS流行组件库" class="headerlink" title="CSS流行组件库"></a>CSS流行组件库</h1><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p>Bootstrap，让你的页面更简洁、直观、强悍、移动设备优先的前端开发框架,让web开发更迅速、更简单。它还提供了更优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。有着丰富的网格布局系统以及丰富的可重用组件，还有强大的支持十几的JavaScript、jQuery插件以及组件定制等。</p><a id="more"></a>
<p>Bootstrap中文网地址：<a href="http://www.bootcss.com/" target="_blank" rel="noopener">http://www.bootcss.com/</a></p>
<h1 id="JS流行组件库"><a href="#JS流行组件库" class="headerlink" title="JS流行组件库"></a>JS流行组件库</h1><h2 id="Js库jQuery"><a href="#Js库jQuery" class="headerlink" title="Js库jQuery"></a>Js库jQuery</h2><p>jQuery是最常用的JavaScript库，它革命性的在客户端开发，将CSS选择器引入到DOM节点检索加链接来应用事件处理程序，动画和Ajax调用.jQuery近年来备受青睐，对于一个很需要的的JavaScript的功能的项目来说，jQuery的的的绝对是一个可行的选择。</p>
<p>官网地址： <a href="https://jquery.com/" target="_blank" rel="noopener">https://jquery.com/</a> </p>
<h2 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h2><p>Element-Ul是饿了么前端团队推出的一款基于Vue.js 2.0 的桌面端UI框架，手机端有对应框架是Mint UI 。适合于Vue的UI框架；</p>
<p>官网地址：<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p>
<h2 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a>Ant Design</h2><p>服务于企业级产品的设计体系，基于确定和自然的设计价值观上的模块化解决方案，让设计者和开发者专注于更好的用户体验。 </p>
<p>官网地址：<a href="https://ant.design/index-cn" target="_blank" rel="noopener">https://ant.design/index-cn</a> </p>
<h2 id="UI-Bootstrap"><a href="#UI-Bootstrap" class="headerlink" title="UI Bootstrap"></a>UI Bootstrap</h2><p>基于Angular2的一款组件库，有手风琴，日期选择器，弹出窗口等组件。</p>
<p>官网地址：<a href="https://angular-ui.github.io/bootstrap/" target="_blank" rel="noopener">https://angular-ui.github.io/bootstrap/</a> </p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>为什么要做组件库？</title>
    <url>/2019/10/11/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8312-14/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E7%BB%84%E4%BB%B6%E5%BA%93%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="传统开发方式的弊端"><a href="#传统开发方式的弊端" class="headerlink" title="传统开发方式的弊端"></a>传统开发方式的弊端</h1><p>在大型软件系统中，web应用的前后端已经实现了分离，而随着REST软件架构的发展，后端服务逐步倾向于微服务，简单来说就是将一个大型后端服务，拆分成多个小服务，它们分别部署，降低了开发的复杂性，而且提高了系统的可伸缩性。而前端方面，随着技术的发展，开发的复杂度也越来越高，传统开发模式总是存在着开发效率低，维护成本高等的弊端。  </p><a id="more"></a>
<h1 id="弊端产生的原因"><a href="#弊端产生的原因" class="headerlink" title="弊端产生的原因"></a>弊端产生的原因</h1><p>传统开发方式效率低以及维护成本高的主要原因在于很多时候是将一个系统做成了整块应用，而且往往随着业务的增长或者变更，系统的复杂度会呈现指数级的增长，经常出现的情况就是一个小小的改动或者一个小功能的增加可能会引起整体逻辑的修改，造成牵一发而动全身。  </p>
<p>针对此弊端，其实业界早就有了一些探索，我们希望一个大且复杂的场景能够被分解成几个小的部分，这些小的部分彼此之间互不干扰，可以单独开发，单独维护，而且他们之间可以随意的进行组合。就拿电脑主机来说，一台整机包括CPU，主板，内存，硬盘等等，而这些部件其实都是由不同的公司进行生产的，他们彼此之间根据一套标准分别生产，最后组装在一起。当某个部件出现问题时，不需要将整台主机都进行维修，只需要将坏的部件拿下来，维修之后再将其组合上就可以了。这种化繁为简的思想在后端开发中的体现是微服务，而在前端开发中的体现就是组件化。  </p>
<h1 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h1><p>随着React，angular等以组件（指令等）为主的优秀前端框架的出现，前端组件化逐渐成为前端开发的迫切需求，当然这一迫切需求也逐渐成为一种主流，一种共识，它不仅提高了前端的开发效率，同时也降低了维护成本。开发者们不需要再面对一堆复杂且难阅读的代码，转而只需要关注以组件方式存在的代码片段。 </p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>固定宽度布局开发WebApp如何实现多终端下自适应？</title>
    <url>/2019/10/11/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8312-14/%E5%9B%BA%E5%AE%9A%E5%AE%BD%E5%BA%A6%E5%B8%83%E5%B1%80%E5%BC%80%E5%8F%91WebApp%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%88%E7%AB%AF%E4%B8%8B%E8%87%AA%E9%80%82%E5%BA%94%EF%BC%9F/</url>
    <content><![CDATA[<p>现在人通过手机浏览网页占了大多数，随着浏览方式的改变，网页在webapp下面实现多终端自适应，无论对于避免工程师无谓的重复劳动或者是项目管理的便捷性上来说重要性都是十分巨大的。 </p><h1 id="固定宽度布局"><a href="#固定宽度布局" class="headerlink" title="固定宽度布局"></a>固定宽度布局</h1><p>固定宽度式布局是目前国内最常用的布局方法，优点就是固定宽度使得其布局最简便，使得开发人员对布局和定位有更大的控制能力。</p><a id="more"></a>

<p>但是，固定宽度的布局也有缺点，因为它的宽度是固定的，无论窗口尺寸有多大，它的尺寸总是不变，所以无法充分利用可用空间。因此，它们也常常被认为是糟糕的权宜之计。</p>
<p>固定宽度的布局的示例，这个大家都是拿手布局方法。</p>
<p>html代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">     &lt;div class=&quot;primary&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;primary&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;secondary&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;secondary&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>css样式代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">  width: 920px; </span><br><span class="line">  margin: 0 auto; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .primary &#123; </span><br><span class="line">  width: 670px;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .secondary &#123; </span><br><span class="line">  width: 230px;</span><br><span class="line">  float: left; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">.content .primary .primary &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .primary .secondary &#123;</span><br><span class="line">    width: 230px;</span><br><span class="line">    padding-right: 20px;</span><br><span class="line">    float: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考资料：<a href="https://www.cnblogs.com/qiheng/archive/2014/04/21/3676904.html" target="_blank" rel="noopener">网页的三种布局(固定宽度式,流体式,弹性式) </a></p>
<h1 id="固定宽度多终端自适应"><a href="#固定宽度多终端自适应" class="headerlink" title="固定宽度多终端自适应"></a>固定宽度多终端自适应</h1><h2 id="固定宽度布局在移动端遇到的问题"><a href="#固定宽度布局在移动端遇到的问题" class="headerlink" title="固定宽度布局在移动端遇到的问题"></a>固定宽度布局在移动端遇到的问题</h2><h3 id="默认viewoort导致横向滚动条"><a href="#默认viewoort导致横向滚动条" class="headerlink" title="默认viewoort导致横向滚动条"></a>默认viewoort导致横向滚动条</h3><p>移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是<strong>浏览器会出现横向滚动条</strong>，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。 </p>
<h3 id="CSS中的1PX并不等于设备的1PX"><a href="#CSS中的1PX并不等于设备的1PX" class="headerlink" title="CSS中的1PX并不等于设备的1PX"></a>CSS中的1PX并不等于设备的1PX</h3><p>在css中我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素，这可能会造成我们的一个错觉，那就是css中的像素就是设备的物理像素。但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的。</p>
<p>还有一个因素也会引起css中px的变化，那就是用户缩放。例如，当用户把页面放大一倍，那么css中1px所代表的物理像素也会增加一倍；反之把页面缩小一倍，css中1px所代表的物理像素也会减少一倍。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;meta&gt;</code>标签是如何控制网页的尺寸和缩放浏览器的说明。</p>
<p><strong>width=device-width</strong>部分将页面的宽度设置为跟随设备的屏幕宽度（视设备而定）。</p>
<p><strong>initial-scale=1.0</strong>部分设置浏览器首次加载页面时的初始缩放级别。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/jnshu_it/article/details/85758753" target="_blank" rel="noopener">定宽网页设计下，固定宽度布局开发WebApp并实现多终端下WebApp布局自适应</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>移动端有哪些常见布局方式？</title>
    <url>/2019/10/11/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8312-14/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F%EF%BC%9F/</url>
    <content><![CDATA[<ol>
<li><p>响应式布局。 </p>
<p>可以用px作为像素，网页进行平铺。全屏的用100%。高度可以用px写死，宽度可以用百分比。不管网页怎么拉伸，高度不变，宽度会相应的扩大。</p>
</li>
<li><p>em/rem 方式布局。 </p>
<p>可以设置好html，body的字体大小，然后用不同的尺寸手机访问的时候，我们可以去修改body的字体大小，网页（网页的内容用rem设置宽度、高度）的之内容会自动进行缩放。</p>
</li>
<li><p>可以按照设计稿的宽 高 来写css，然后通过js判断不同尺寸屏幕，修改 里面 scale的比例大小。 </p>
<p>比如设计稿是 640 * 1136<br>我们可以按 640宽度写网页 也可以按320宽度写网页。<br>然后<br>默认宽度可以设置为你写网页的宽度。<br>然后再通过js 来控制scale的比例缩放即可 也可以控制 最小宽度 跟 最大宽度。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何做默认样式重置？resetting 和 normalizing 之间有什么区别？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8312-14/%E5%A6%82%E4%BD%95%E5%81%9A%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%E9%87%8D%E7%BD%AE%EF%BC%9Fresetting-%E5%92%8C-normalizing-%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="什么是CSS-resetting？"><a href="#什么是CSS-resetting？" class="headerlink" title="什么是CSS resetting？"></a>什么是CSS resetting？</h1><p>在HTML标签在浏览器里有默认的样式，例如 p 标签有上下边距，strong标签有字体加粗样式，em标签有字体倾斜样式。不同浏览器的默认样式之间也会有差别，例如ul默认带有缩进的样式，在IE下，它的缩进是通过margin实现的，而Firefox下，它的缩进是由padding实现的。在切换页面的时候，浏览器的默认样式往往会给我们带来麻烦，影响开发效率。所以解决的方法就是一开始就将浏览器的默认样式全部去掉，更准确说就是通过重新定义标签样式。“覆盖”浏览器的CSS默认属性。最最简单的说法就是把浏览器提供的默认样式覆盖掉！这就是CSS reset。</p><a id="more"></a>
<h2 id="CSS-Reset的作用"><a href="#CSS-Reset的作用" class="headerlink" title="CSS Reset的作用"></a>CSS Reset的作用</h2><p>CSS Reset让各个浏览器的CSS样式有一个统一的基准，而实现这一基准最主要的方式就是“清零”</p>
<h1 id="什么是normalizing？"><a href="#什么是normalizing？" class="headerlink" title="什么是normalizing？"></a>什么是normalizing？</h1><p>Normalize.css 只是一个很小的CSS文件，但它在默认的HTML元素样式上 提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css 是一种现代的、为HTML5准备的优质替代方案。Normalize.css现在已经被 用于Twitter Bootstrap、HTML5 Boilerplate、GOV.UK、Rdio、CSS Tricks 以及许许多多其他框架、工具和网站上。</p>
<h2 id="normalize创造的目的"><a href="#normalize创造的目的" class="headerlink" title="normalize创造的目的"></a>normalize创造的目的</h2><p>保护有用的浏览器默认样式而不是完全去掉它们</p>
<h1 id="resetting-和-normalizing-之间有什么区别？"><a href="#resetting-和-normalizing-之间有什么区别？" class="headerlink" title="resetting 和 normalizing 之间有什么区别？"></a>resetting 和 normalizing 之间有什么区别？</h1><ol>
<li>Normalize.css 保护了有价值的默认值<br>Reset通过为几乎所有的元素施加默认样式，强行使得元素有相同的视觉效果。 相比之下，Normalize.css保持了许多默认的浏览器样式。这就意味着你不用再 为所有公共的排版元素重新设置样式。当一个元素在不同的浏览器中有不同的默认值时， Normalize.css会力求让这些样式保持一致并尽可能与现代标准相符合。</li>
<li>Normalize.css 修复了浏览器的bug<br>它修复了常见的桌面端和移动端浏览器的bug。 这往往超出了Reset所能做到的范畴。关于这一点， Normalize.css修复的问题包含了HTML5元素的显示设置、 预格式化文字的font-size问题、在IE9中SVG的溢出、许多 出现在各浏览器和操作系统中的与表单相关的bug。</li>
<li>Normalize.css 不会让你的调试工具变的杂乱<br>使用Reset最让人困扰的地方莫过于在浏览器调试工具中大段大段的继承链， 如下图所示。在Normalize.css中就不会有这样的问题，因为在我们的准则中 对多选择器的使用时非常谨慎的，我们仅会有目的地对目标元素设置样式。</li>
<li>Normalize.css 是模块化的<br>这个项目已经被拆分为多个相关却又独立的部分， 这使得你能够很容易也很清楚地知道哪些元素被设置了特定的值。 因此这能让你自己选择性地移除掉某些永远不会用到部分（比如表单的一般化）。</li>
<li>Normalize.css 拥有详细的文档<br>Normalize.css的代码基于详细而全面的跨浏览器研究与测试。 这个文件中拥有详细的代码说明并在Github Wiki中有进一步的说明。 这意味着你可以找到每一行代码具体完成了什么工作、为什么要写这句代码、 浏览器之间的差异，并且你可以更容易地进行自己的测试。<br>总得来说，CSS Reset 是革命党 ，CSS Reset 里最激进那一派提倡不管你有用没用， 通通给我脱了衣服，于是 *{margin:0;} 等等运动，把人家全拍了。看似是众生平等了， 实则是浪费了资源又占不到便宜，有求于人家的时候还得给加回去，实在需要人家的默认 样式了怎么办？自己看着办吧。<br>Normalize.css 是改良派。他们提倡，各个元素都有其存在的道理， 简单粗暴地一视同仁是不好的。谁都有谁的作用，给他们制定个规范，确保他们 在任何浏览器里都干好自己的活儿就好了。</li>
</ol>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>CSS编码规范</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="CSS编码规范"><a href="#CSS编码规范" class="headerlink" title="CSS编码规范"></a>CSS编码规范</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>CSS作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使CSS代码风格保持一致，容易被理解和被维护。</p><p>虽然本文档是针对CSS设计的，但是在使用各种CSS的预编译器(如less、sass、stylus等)时，适用的部分也应尽量遵循本文档的约定。</p><h2 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h2><h3 id="2-1-文件"><a href="#2-1-文件" class="headerlink" title="2.1 文件"></a>2.1 文件</h3><a id="more"></a>

<h4 id="建议-CSS-文件使用无-BOM-的-UTF-8-编码。"><a href="#建议-CSS-文件使用无-BOM-的-UTF-8-编码。" class="headerlink" title="[建议] CSS 文件使用无 BOM 的 UTF-8 编码。"></a>[建议] <code>CSS</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h4><p>解释：</p>
<p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p>
<h3 id="2-2-缩进"><a href="#2-2-缩进" class="headerlink" title="2.2 缩进"></a>2.2 缩进</h3><h4 id="强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。"><a href="#强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。" class="headerlink" title="[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。"></a>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-空格"><a href="#2-3-空格" class="headerlink" title="2.3 空格"></a>2.3 空格</h3><h4 id="强制-选择器-与-之间必须包含空格。"><a href="#强制-选择器-与-之间必须包含空格。" class="headerlink" title="[强制] 选择器 与 { 之间必须包含空格。"></a>[强制] <code>选择器</code> 与 <code>{</code> 之间必须包含空格。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="强制-属性名-与之后的-之间不允许包含空格，-与-属性值-之间必须包含空格。"><a href="#强制-属性名-与之后的-之间不允许包含空格，-与-属性值-之间必须包含空格。" class="headerlink" title="[强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。"></a>[强制] <code>属性名</code> 与之后的 <code>:</code> 之间不允许包含空格， <code>:</code> 与 <code>属性值</code> 之间必须包含空格。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 0;</span><br></pre></td></tr></table></figure>
<h4 id="强制-列表型属性值-书写在单行时，-后必须跟一个空格。"><a href="#强制-列表型属性值-书写在单行时，-后必须跟一个空格。" class="headerlink" title="[强制] 列表型属性值 书写在单行时，, 后必须跟一个空格。"></a>[强制] <code>列表型属性值</code> 书写在单行时，<code>,</code> 后必须跟一个空格。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Arial</span>, <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-行长度"><a href="#2-4-行长度" class="headerlink" title="2.4 行长度"></a>2.4 行长度</h3><h4 id="强制-每行不得超过-120-个字符，除非单行不可分割。"><a href="#强制-每行不得超过-120-个字符，除非单行不可分割。" class="headerlink" title="[强制] 每行不得超过 120 个字符，除非单行不可分割。"></a>[强制] 每行不得超过 <code>120</code> 个字符，除非单行不可分割。</h4><p>解释：</p>
<p>常见不可分割的场景为URL超长。</p>
<h4 id="建议-对于超长的样式，在样式值的-空格-处或-后换行，建议按逻辑分组。"><a href="#建议-对于超长的样式，在样式值的-空格-处或-后换行，建议按逻辑分组。" class="headerlink" title="[建议] 对于超长的样式，在样式值的 空格 处或 , 后换行，建议按逻辑分组。"></a>[建议] 对于超长的样式，在样式值的 <code>空格</code> 处或 <code>,</code> 后换行，建议按逻辑分组。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不同属性值按逻辑分组 */</span></span><br><span class="line"><span class="selector-tag">background</span>:</span><br><span class="line">    <span class="selector-tag">transparent</span> <span class="selector-tag">url</span>(<span class="selector-tag">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class="line">    <span class="selector-tag">no-repeat</span> 0 0;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可重复多次的属性，每次重复一行 */</span></span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line">    <span class="selector-tag">url</span>(<span class="selector-tag">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class="line">    <span class="selector-tag">url</span>(<span class="selector-tag">anotherVeryVeryVeryLongUrlIsPlacedHere</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类似函数的属性值可以根据函数调用的缩进进行 */</span></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">-webkit-gradient</span>(</span><br><span class="line">    <span class="selector-tag">linear</span>,</span><br><span class="line">    <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>,</span><br><span class="line">    <span class="selector-tag">left</span> <span class="selector-tag">top</span>,</span><br><span class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.04</span>, <span class="selector-tag">rgb</span>(88,94,124)),</span><br><span class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.52</span>, <span class="selector-tag">rgb</span>(115,123,162))</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="2-5-选择器"><a href="#2-5-选择器" class="headerlink" title="2.5 选择器"></a>2.5 选择器</h3><h4 id="强制-当一个-rule-包含多个-selector-时，每个选择器声明必须独占一行。"><a href="#强制-当一个-rule-包含多个-selector-时，每个选择器声明必须独占一行。" class="headerlink" title="[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。"></a>[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.post</span>,</span><br><span class="line"><span class="selector-class">.page</span>,</span><br><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.post</span>, <span class="selector-class">.page</span>, <span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="强制-gt-、-、-选择器的两边各保留一个空格。"><a href="#强制-gt-、-、-选择器的两边各保留一个空格。" class="headerlink" title="[强制] &gt;、+、~ 选择器的两边各保留一个空格。"></a>[强制] <code>&gt;</code>、<code>+</code>、<code>~</code> 选择器的两边各保留一个空格。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">main</span> &gt; <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> + <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">main</span>&gt;<span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span>+<span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span>~<span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="强制-属性选择器中的值必须用双引号包围。"><a href="#强制-属性选择器中的值必须用双引号包围。" class="headerlink" title="[强制] 属性选择器中的值必须用双引号包围。"></a>[强制] 属性选择器中的值必须用双引号包围。</h4><p>解释：</p>
<p>不允许使用单引号，不允许不使用引号。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character="juliet"]</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character='juliet']</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6-属性"><a href="#2-6-属性" class="headerlink" title="2.6 属性"></a>2.6 属性</h3><h4 id="强制-属性定义必须另起一行。"><a href="#强制-属性定义必须另起一行。" class="headerlink" title="[强制] 属性定义必须另起一行。"></a>[强制] 属性定义必须另起一行。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>
<h4 id="强制-属性定义后必须以分号结尾。"><a href="#强制-属性定义后必须以分号结尾。" class="headerlink" title="[强制] 属性定义后必须以分号结尾。"></a>[强制] 属性定义后必须以分号结尾。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-通用"><a href="#3-通用" class="headerlink" title="3 通用"></a>3 通用</h2><h3 id="3-1-选择器"><a href="#3-1-选择器" class="headerlink" title="3.1 选择器"></a>3.1 选择器</h3><h4 id="强制-如无必要，不得为-id、class-选择器添加类型选择器进行限定。"><a href="#强制-如无必要，不得为-id、class-选择器添加类型选择器进行限定。" class="headerlink" title="[强制] 如无必要，不得为 id、class 选择器添加类型选择器进行限定。"></a>[强制] 如无必要，不得为 <code>id</code>、<code>class</code> 选择器添加类型选择器进行限定。</h4><p>解释：</p>
<p>在性能和维护性上，都有一定的影响。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#error</span>,</span><br><span class="line"><span class="selector-class">.danger-message</span> &#123;</span><br><span class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">dialog</span><span class="selector-id">#error</span>,</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.danger-message</span> &#123;</span><br><span class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="建议-选择器的嵌套层级应不大于-3-级，位置靠后的限定条件应尽可能精确。"><a href="#建议-选择器的嵌套层级应不大于-3-级，位置靠后的限定条件应尽可能精确。" class="headerlink" title="[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。"></a>[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.avatar</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span> <span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-属性缩写"><a href="#3-2-属性缩写" class="headerlink" title="3.2 属性缩写"></a>3.2 属性缩写</h3><h4 id="建议-在可以使用缩写的情况下，尽量使用属性缩写。"><a href="#建议-在可以使用缩写的情况下，尽量使用属性缩写。" class="headerlink" title="[建议] 在可以使用缩写的情况下，尽量使用属性缩写。"></a>[建议] 在可以使用缩写的情况下，尽量使用属性缩写。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="建议-使用-border-margin-padding-等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。"><a href="#建议-使用-border-margin-padding-等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。" class="headerlink" title="[建议] 使用 border / margin / padding 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。"></a>[建议] 使用 <code>border</code> / <code>margin</code> / <code>padding</code> 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。</h4><p>解释：</p>
<p>border / margin / padding 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* centering &lt;article class="page"&gt; horizontally and highlight featured ones */</span></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.featured</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#69c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> auto; <span class="comment">/* introducing redundancy */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.featured</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#69c</span>; <span class="comment">/* introducing redundancy */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-属性书写顺序"><a href="#3-3-属性书写顺序" class="headerlink" title="3.3 属性书写顺序"></a>3.3 属性书写顺序</h3><h4 id="建议-同一-rule-set-下的属性在书写时，应按功能进行分组，并以-Formatting-Model（布局方式、位置）-gt-Box-Model（尺寸）-gt-Typographic（文本相关）-gt-Visual（视觉效果）-的顺序书写，以提高代码的可读性。"><a href="#建议-同一-rule-set-下的属性在书写时，应按功能进行分组，并以-Formatting-Model（布局方式、位置）-gt-Box-Model（尺寸）-gt-Typographic（文本相关）-gt-Visual（视觉效果）-的顺序书写，以提高代码的可读性。" class="headerlink" title="[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。"></a>[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 <strong>Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果）</strong> 的顺序书写，以提高代码的可读性。</h4><p>解释：</p>
<ul>
<li>Formatting Model 相关属性包括：<code>position</code> / <code>top</code> / <code>right</code> / <code>bottom</code> / <code>left</code> / <code>float</code> / <code>display</code> / <code>overflow</code> 等</li>
<li>Box Model 相关属性包括：<code>border</code> / <code>margin</code> / <code>padding</code> / <code>width</code> / <code>height</code> 等</li>
<li>Typographic 相关属性包括：<code>font</code> / <code>line-height</code> / <code>text-align</code> / <code>word-wrap</code> 等</li>
<li>Visual 相关属性包括：<code>background</code> / <code>color</code> / <code>transition</code> / <code>list-style</code> 等</li>
</ul>
<p>另外，如果包含 <code>content</code> 属性，应放在最前面。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="comment">/* formatting model: positioning schemes / offsets / z-indexes / display / ...  */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* box model: sizes / margins / paddings / borders / ...  */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* typographic: font / aligns / text styles / ... */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* visual: colors / shadows / gradients / ... */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: color <span class="number">1s</span>;</span><br><span class="line">       <span class="attribute">-moz-transition</span>: color <span class="number">1s</span>;</span><br><span class="line">            <span class="attribute">transition</span>: color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-清除浮动"><a href="#3-4-清除浮动" class="headerlink" title="3.4 清除浮动"></a>3.4 清除浮动</h3><h4 id="建议-当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置-clear-或触发-BFC-的方式进行-clearfix。尽量不使用增加空标签的方式。"><a href="#建议-当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置-clear-或触发-BFC-的方式进行-clearfix。尽量不使用增加空标签的方式。" class="headerlink" title="[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。"></a>[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 <code>clear</code> 或触发 <code>BFC</code> 的方式进行 <code>clearfix</code>。尽量不使用增加空标签的方式。</h4><p>解释：</p>
<p>触发 BFC 的方式很多，常见的有：</p>
<ul>
<li>float 非 none</li>
<li>position 非 static</li>
<li>overflow 非 visible</li>
</ul>
<p>如希望使用更小副作用的清除浮动方法，参见 <a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="noopener">A new micro clearfix hack</a> 一文。</p>
<p>另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。</p>
<h3 id="3-5-important"><a href="#3-5-important" class="headerlink" title="3.5 !important"></a>3.5 !important</h3><h4 id="建议-尽量不使用-important-声明。"><a href="#建议-尽量不使用-important-声明。" class="headerlink" title="[建议] 尽量不使用 !important 声明。"></a>[建议] 尽量不使用 <code>!important</code> 声明。</h4><h4 id="建议-当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和-important-定义样式。"><a href="#建议-当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和-important-定义样式。" class="headerlink" title="[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 !important 定义样式。"></a>[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 <code>!important</code> 定义样式。</h4><p>解释：</p>
<p>必须注意的是，仅在设计上 <code>确实不允许任何其它场景覆盖样式</code> 时，才使用内联的 <code>!important</code> 样式。通常在第三方环境的应用中使用这种方案。下面的 z-index 章节是其中一个特殊场景的典型样例。</p>
<h3 id="3-6-z-index"><a href="#3-6-z-index" class="headerlink" title="3.6 z-index"></a>3.6 z-index</h3><h4 id="建议-将-z-index-进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。"><a href="#建议-将-z-index-进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。" class="headerlink" title="[建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。"></a>[建议] 将 <code>z-index</code> 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。</h4><p>解释：</p>
<p>同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 <code>z-index</code> 或递增 <code>z-index</code>。</p>
<p>建议每层包含100个 <code>z-index</code> 来容纳足够的元素，如果每层元素较多，可以调整这个数值。</p>
<h4 id="建议-在可控环境下，期望显示在最上层的元素，z-index-指定为-999999。"><a href="#建议-在可控环境下，期望显示在最上层的元素，z-index-指定为-999999。" class="headerlink" title="[建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。"></a>[建议] 在可控环境下，期望显示在最上层的元素，<code>z-index</code> 指定为 <code>999999</code>。</h4><p>解释：</p>
<p>可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。</p>
<p>不建议取值为 <code>2147483647</code>。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。</p>
<h4 id="建议-在第三方环境下，期望显示在最上层的元素，通过标签内联和-important，将-z-index-指定为-2147483647。"><a href="#建议-在第三方环境下，期望显示在最上层的元素，通过标签内联和-important，将-z-index-指定为-2147483647。" class="headerlink" title="[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647。"></a>[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 <code>!important</code>，将 <code>z-index</code> 指定为 <code>2147483647</code>。</h4><p>解释：</p>
<p>第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。</p>
<h2 id="4-值与单位"><a href="#4-值与单位" class="headerlink" title="4 值与单位"></a>4 值与单位</h2><h3 id="4-1-文本"><a href="#4-1-文本" class="headerlink" title="4.1 文本"></a>4.1 文本</h3><h4 id="强制-文本内容必须用双引号包围。"><a href="#强制-文本内容必须用双引号包围。" class="headerlink" title="[强制] 文本内容必须用双引号包围。"></a>[强制] 文本内容必须用双引号包围。</h4><p>解释：</p>
<p>文本类型的内容可能在选择器、属性值等内容中。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"“"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'“'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-数值"><a href="#4-2-数值" class="headerlink" title="4.2 数值"></a>4.2 数值</h3><h4 id="强制-当数值为-0-1-之间的小数时，省略整数部分的-0。"><a href="#强制-当数值为-0-1-之间的小数时，省略整数部分的-0。" class="headerlink" title="[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 0。"></a>[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 <code>0</code>。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">panel</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">panel</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-url"><a href="#4-3-url" class="headerlink" title="4.3 url()"></a>4.3 url()</h3><h4 id="强制-url-函数中的路径不加引号。"><a href="#强制-url-函数中的路径不加引号。" class="headerlink" title="[强制] url() 函数中的路径不加引号。"></a>[强制] <code>url()</code> 函数中的路径不加引号。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(bg.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="建议-url-函数中的绝对路径可省去协议名。"><a href="#建议-url-函数中的绝对路径可省去协议名。" class="headerlink" title="[建议] url() 函数中的绝对路径可省去协议名。"></a>[建议] <code>url()</code> 函数中的绝对路径可省去协议名。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(//baidu.com/img/bg.png) no-repeat <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-长度"><a href="#4-4-长度" class="headerlink" title="4.4 长度"></a>4.4 长度</h3><h4 id="强制-长度为-0-时须省略单位。-也只有长度单位可省"><a href="#强制-长度为-0-时须省略单位。-也只有长度单位可省" class="headerlink" title="[强制] 长度为 0 时须省略单位。 (也只有长度单位可省)"></a>[强制] 长度为 <code>0</code> 时须省略单位。 (也只有长度单位可省)</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-5-颜色"><a href="#4-5-颜色" class="headerlink" title="4.5 颜色"></a>4.5 颜色</h3><h4 id="强制-RGB颜色值必须使用十六进制记号形式-rrggbb。不允许使用-rgb-。"><a href="#强制-RGB颜色值必须使用十六进制记号形式-rrggbb。不允许使用-rgb-。" class="headerlink" title="[强制] RGB颜色值必须使用十六进制记号形式 #rrggbb。不允许使用 rgb()。"></a>[强制] RGB颜色值必须使用十六进制记号形式 <code>#rrggbb</code>。不允许使用 <code>rgb()</code>。</h4><p>解释：</p>
<p>带有alpha的颜色信息可以使用 <code>rgba()</code>。使用 <code>rgba()</code> 时每个逗号后必须保留一个空格。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 128, 0, .3);</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#008000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0,128,0,.3);</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(0, 128, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="强制-颜色值可以缩写时，必须使用缩写形式。"><a href="#强制-颜色值可以缩写时，必须使用缩写形式。" class="headerlink" title="[强制] 颜色值可以缩写时，必须使用缩写形式。"></a>[强制] 颜色值可以缩写时，必须使用缩写形式。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aaccaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="强制-颜色值不允许使用命名色值。"><a href="#强制-颜色值不允许使用命名色值。" class="headerlink" title="[强制] 颜色值不允许使用命名色值。"></a>[强制] 颜色值不允许使用命名色值。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="建议-颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。"><a href="#建议-颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。" class="headerlink" title="[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。"></a>[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90EE90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-2D-位置"><a href="#4-6-2D-位置" class="headerlink" title="4.6 2D 位置"></a>4.6 2D 位置</h3><h4 id="强制-必须同时给出水平和垂直方向的位置。"><a href="#强制-必须同时给出水平和垂直方向的位置。" class="headerlink" title="[强制] 必须同时给出水平和垂直方向的位置。"></a>[强制] 必须同时给出水平和垂直方向的位置。</h4><p>解释：</p>
<p>2D 位置初始值为 <code>0% 0%</code>，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。<a href="http://www.w3.org/TR/CSS21/colors.html#propdef-background-position" target="_blank" rel="noopener">background-position属性值的定义</a></p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: center top; <span class="comment">/* 50% 0% */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: top; <span class="comment">/* 50% 0% */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-文本编排"><a href="#5-文本编排" class="headerlink" title="5 文本编排"></a>5 文本编排</h2><h3 id="5-1-字体族"><a href="#5-1-字体族" class="headerlink" title="5.1 字体族"></a>5.1 字体族</h3><h4 id="强制-font-family-属性中的字体族名称应使用字体的英文-Family-Name，其中如有空格，须放置在引号中。"><a href="#强制-font-family-属性中的字体族名称应使用字体的英文-Family-Name，其中如有空格，须放置在引号中。" class="headerlink" title="[强制] font-family 属性中的字体族名称应使用字体的英文 Family Name，其中如有空格，须放置在引号中。"></a>[强制] <code>font-family</code> 属性中的字体族名称应使用字体的英文 <code>Family Name</code>，其中如有空格，须放置在引号中。</h4><p>解释：</p>
<p>所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：</p>
<table>
<thead>
<tr>
<th>字体</th>
<th>操作系统</th>
<th>Family Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>宋体 (中易宋体)</td>
<td>Windows</td>
<td>SimSun</td>
</tr>
<tr>
<td>黑体 (中易黑体)</td>
<td>Windows</td>
<td>SimHei</td>
</tr>
<tr>
<td>微软雅黑</td>
<td>Windows</td>
<td>Microsoft YaHei</td>
</tr>
<tr>
<td>微软正黑</td>
<td>Windows</td>
<td>Microsoft JhengHei</td>
</tr>
<tr>
<td>华文黑体</td>
<td>Mac/iOS</td>
<td>STHeiti</td>
</tr>
<tr>
<td>冬青黑体</td>
<td>Mac/iOS</td>
<td>Hiragino Sans GB</td>
</tr>
<tr>
<td>文泉驿正黑</td>
<td>Linux</td>
<td>WenQuanYi Zen Hei</td>
</tr>
<tr>
<td>文泉驿微米黑</td>
<td>Linux</td>
<td>WenQuanYi Micro Hei</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="强制-font-family-按「西文字体在前、中文字体在后」、「效果佳-质量高-更能满足需求-的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族-serif-sans-serif-。"><a href="#强制-font-family-按「西文字体在前、中文字体在后」、「效果佳-质量高-更能满足需求-的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族-serif-sans-serif-。" class="headerlink" title="[强制] font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( serif / sans-serif )。"></a>[强制] <code>font-family</code> 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( <code>serif</code> / <code>sans-serif</code> )。</h4><p>解释：</p>
<p>更详细说明可参考<a href="http://www.zhihu.com/question/19911793/answer/13329819" target="_blank" rel="noopener">本文</a>。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Display according to platform */</span></span><br><span class="line"><span class="selector-class">.article</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Specific for most platforms */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Arial, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"WenQuanYi Micro Hei"</span>, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="强制-font-family-不区分大小写，但在同一个项目中，同样的-Family-Name-大小写必须统一。"><a href="#强制-font-family-不区分大小写，但在同一个项目中，同样的-Family-Name-大小写必须统一。" class="headerlink" title="[强制] font-family 不区分大小写，但在同一个项目中，同样的 Family Name 大小写必须统一。"></a>[强制] <code>font-family</code> 不区分大小写，但在同一个项目中，同样的 <code>Family Name</code> 大小写必须统一。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-字号"><a href="#5-2-字号" class="headerlink" title="5.2 字号"></a>5.2 字号</h3><h4 id="强制-需要在-Windows-平台显示的中文内容，其字号应不小于-12px。"><a href="#强制-需要在-Windows-平台显示的中文内容，其字号应不小于-12px。" class="headerlink" title="[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。"></a>[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 <code>12px</code>。</h4><p>解释：</p>
<p>由于 Windows 的字体渲染机制，小于 12px 的文字显示效果极差、难以辨认。</p>
<h3 id="5-3-字体风格"><a href="#5-3-字体风格" class="headerlink" title="5.3 字体风格"></a>5.3 字体风格</h3><h4 id="建议-需要在-Windows-平台显示的中文内容，不要使用除-normal-外的-font-style。其他平台也应慎用。"><a href="#建议-需要在-Windows-平台显示的中文内容，不要使用除-normal-外的-font-style。其他平台也应慎用。" class="headerlink" title="[建议] 需要在 Windows 平台显示的中文内容，不要使用除 normal 外的 font-style。其他平台也应慎用。"></a>[建议] 需要在 Windows 平台显示的中文内容，不要使用除 <code>normal</code> 外的 <code>font-style</code>。其他平台也应慎用。</h4><p>解释：</p>
<p>由于中文字体没有 italic 风格的实现，所有浏览器下都会 fallback 到 obilique 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。</p>
<h3 id="5-4-字重"><a href="#5-4-字重" class="headerlink" title="5.4 字重"></a>5.4 字重</h3><h4 id="强制-font-weight-属性必须使用数值方式描述。"><a href="#强制-font-weight-属性必须使用数值方式描述。" class="headerlink" title="[强制] font-weight 属性必须使用数值方式描述。"></a>[强制] <code>font-weight</code> 属性必须使用数值方式描述。</h4><p>解释：</p>
<p>CSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 400 和 700 两档，分别等价于关键词 normal 和 bold。</p>
<p>浏览器本身使用一系列<a href="http://www.w3.org/TR/CSS21/fonts.html#propdef-font-weight" target="_blank" rel="noopener">启发式规则</a>来进行匹配，在 <700 时一般匹配字体的="" regular="" 字重，="">=700 时匹配 Bold 字重。</700></p>
<p>但已有浏览器开始支持 =600 时匹配 Semibold 字重 (见<a href="http://justineo.github.io/slideshows/font/#/3/15" target="_blank" rel="noopener">此表</a>)，故使用数值描述增加了灵活性，也更简短。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-5-行高"><a href="#5-5-行高" class="headerlink" title="5.5 行高"></a>5.5 行高</h3><h4 id="建议-line-height-在定义文本段落时，应使用数值。"><a href="#建议-line-height-在定义文本段落时，应使用数值。" class="headerlink" title="[建议] line-height 在定义文本段落时，应使用数值。"></a>[建议] <code>line-height</code> 在定义文本段落时，应使用数值。</h4><p>解释：</p>
<p>将 line-height 设置为数值，浏览器会基于当前元素设置的 font-size 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 font-size 都需要设置 line-height。</p>
<p>当 line-height 用于控制垂直居中时，还是应该设置成与容器高度一致。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-变换与动画"><a href="#6-变换与动画" class="headerlink" title="6 变换与动画"></a>6 变换与动画</h2><h4 id="强制-使用-transition-时应指定-transition-property。"><a href="#强制-使用-transition-时应指定-transition-property。" class="headerlink" title="[强制] 使用 transition 时应指定 transition-property。"></a>[强制] 使用 <code>transition</code> 时应指定 <code>transition-property</code>。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: color <span class="number">1s</span>, border-color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="建议-尽可能在浏览器能高效实现的属性上添加过渡和动画。"><a href="#建议-尽可能在浏览器能高效实现的属性上添加过渡和动画。" class="headerlink" title="[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。"></a>[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。</h4><p>解释：</p>
<p>见<a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/" target="_blank" rel="noopener">本文</a>，在可能的情况下应选择这样四种变换：</p>
<ul>
<li><code>transform: translate(npx, npx);</code></li>
<li><code>transform: scale(n);</code></li>
<li><code>transform: rotate(ndeg);</code></li>
<li><code>opacity: 0..1;</code></li>
</ul>
<p>典型的，可以使用 translate 来代替 left 作为动画属性。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(20px); <span class="comment">/* move right for 20px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: left <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>; <span class="comment">/* move right for 20px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-响应式"><a href="#7-响应式" class="headerlink" title="7 响应式"></a>7 响应式</h2><h4 id="强制-Media-Query-不得单独编排，必须与相关的规则一起定义。"><a href="#强制-Media-Query-不得单独编排，必须与相关的规则一起定义。" class="headerlink" title="[强制] Media Query 不得单独编排，必须与相关的规则一起定义。"></a>[强制] <code>Media Query</code> 不得单独编排，必须与相关的规则一起定义。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Good */</span></span><br><span class="line"><span class="comment">/* header styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* header styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* main styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* footer styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* footer styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="comment">/* header styles */</span></span><br><span class="line"><span class="comment">/* main styles */</span></span><br><span class="line"><span class="comment">/* footer styles */</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* header styles */</span></span><br><span class="line">    <span class="comment">/* main styles */</span></span><br><span class="line">    <span class="comment">/* footer styles */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="强制-Media-Query-如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。"><a href="#强制-Media-Query-如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。" class="headerlink" title="[强制] Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。"></a>[强制] <code>Media Query</code> 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">media</span></span><br><span class="line">(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */</span><br><span class="line">(<span class="selector-tag">min--moz-device-pixel-ratio</span>: 2),    <span class="comment">/* Older Firefox browsers (prior to Firefox 16) */</span></span><br><span class="line">(<span class="selector-tag">min-resolution</span>: 2<span class="selector-tag">dppx</span>),             <span class="comment">/* The standard way */</span></span><br><span class="line">(<span class="selector-tag">min-resolution</span>: 192<span class="selector-tag">dpi</span>) &#123;           <span class="comment">/* dppx fallback */</span></span><br><span class="line">    <span class="comment">/* Retina-specific stuff here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="建议-尽可能给出在高分辨率设备-Retina-下效果更佳的样式。"><a href="#建议-尽可能给出在高分辨率设备-Retina-下效果更佳的样式。" class="headerlink" title="[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。"></a>[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。</h4><h2 id="8-兼容性"><a href="#8-兼容性" class="headerlink" title="8 兼容性"></a>8 兼容性</h2><h3 id="8-1-属性前缀"><a href="#8-1-属性前缀" class="headerlink" title="8.1 属性前缀"></a>8.1 属性前缀</h3><h4 id="强制-带私有前缀的属性由长到短排列，按冒号位置对齐。"><a href="#强制-带私有前缀的属性由长到短排列，按冒号位置对齐。" class="headerlink" title="[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。"></a>[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。</h4><p>解释：</p>
<p>标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">       <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-2-Hack"><a href="#8-2-Hack" class="headerlink" title="8.2 Hack"></a>8.2 Hack</h3><h4 id="建议-需要添加-hack-时应尽可能考虑是否可以采用其他方式解决。"><a href="#建议-需要添加-hack-时应尽可能考虑是否可以采用其他方式解决。" class="headerlink" title="[建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。"></a>[建议] 需要添加 <code>hack</code> 时应尽可能考虑是否可以采用其他方式解决。</h4><p>解释：</p>
<p>如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。</p>
<h4 id="建议-尽量使用-选择器-hack-处理兼容性，而非-属性-hack。"><a href="#建议-尽量使用-选择器-hack-处理兼容性，而非-属性-hack。" class="headerlink" title="[建议] 尽量使用 选择器 hack 处理兼容性，而非 属性 hack。"></a>[建议] 尽量使用 <code>选择器 hack</code> 处理兼容性，而非 <code>属性 hack</code>。</h4><p>解释：</p>
<p>尽量使用符合 CSS 语法的 selector hack，可以避免一些第三方库无法识别 hack 语法的问题。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* IE 7 */</span></span><br><span class="line">*<span class="selector-pseudo">:first-child</span> + <span class="selector-tag">html</span> <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE 6 */</span></span><br><span class="line">* <span class="selector-tag">html</span> <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="建议-尽量使用简单的-属性-hack。"><a href="#建议-尽量使用简单的-属性-hack。" class="headerlink" title="[建议] 尽量使用简单的 属性 hack。"></a>[建议] 尽量使用简单的 <code>属性 hack</code>。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">_display</span>: inline; <span class="comment">/* fix double margin */</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    *zoom: 1; /* triggering hasLayout */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-3-Expression"><a href="#8-3-Expression" class="headerlink" title="8.3 Expression"></a>8.3 Expression</h3><h4 id="强制-禁止使用-Expression。"><a href="#强制-禁止使用-Expression。" class="headerlink" title="[强制] 禁止使用 Expression。"></a>[强制] 禁止使用 <code>Expression</code>。</h4><hr>
<p>参考资料: <a href="https://github.com/fex-team/styleguide/blob/master/css.md" target="_blank" rel="noopener">css编码规范</a></p>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
  </entry>
  <entry>
    <title>开发过程中应该遵守哪些编码规范和class命名规范？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8312-14/%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%BA%94%E8%AF%A5%E9%81%B5%E5%AE%88%E5%93%AA%E4%BA%9B%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E5%92%8Cclass%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%EF%BC%9F/</url>
    <content><![CDATA[<p>真正阅读程序的是人，而不是计算机，所以所写代码具有良好的可读性，是优秀程序员必备的素质之一。在大型的系统开发中，往往需要很多人的通力配合，例如，开源软件Linux 之所以能够为全球顶尖程序员共享、协作开发，也得益于规范化和标准化的编码规范。规范应该尽量一致；即使有例外，也只能是少数情况，而不能是很多例外。好的代码规范能够提高代码的可读性便于协作沟通，好的模式能够在上层设计上避免不必要的 bug 出现。 </p><a id="more"></a>
<h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><h2 id="HTML规范"><a href="#HTML规范" class="headerlink" title="HTML规范"></a>HTML规范</h2><p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g7tjm466ilj30qv0cj74i.jpg" alt="html规范1.png"></p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g7tjmyv3lgj311m0n175l.jpg" alt="html规范2.png"></p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g7tjnbe90ij315b0mxta4.jpg" alt="html规范3.png"> </p>
<p>参考资料:<a href="http://lesson.jnshu.com/l/subjectContent/1087/?id=&amp;lobtn=2" target="_blank" rel="noopener">开发过程中应该遵守哪些编码规范和class命名规范？ </a></p>
<h2 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h2><p>css规范目录如下,<a href="https://github.com/fex-team/styleguide/blob/master/css.md" target="_blank" rel="noopener">详细内容点击查看</a></p>
<p>1 前言</p>
<p>2 代码风格</p>
<p>　　2.1 文件</p>
<p>　　2.2 缩进</p>
<p>　　2.3 空格</p>
<p>　　2.4 行长度</p>
<p>　　2.5 选择器</p>
<p>　　2.6 属性</p>
<p>3 通用</p>
<p>　　3.1 选择器</p>
<p>　　3.2 属性缩写</p>
<p>　　3.3 属性书写顺序</p>
<p>　　3.4 清除浮动</p>
<p>　　3.5 !important</p>
<p>　　3.6 z-index</p>
<p>4 值与单位</p>
<p>　　4.1 文本</p>
<p>　　4.2 数值</p>
<p>　　4.3 url()</p>
<p>　　4.4 长度</p>
<p>　　4.5 颜色</p>
<p>　　4.6 2D 位置</p>
<p>5 文本编排</p>
<p>　　5.1 字体族</p>
<p>　　5.2 字号</p>
<p>　　5.3 字体风格</p>
<p>　　5.4 字重</p>
<p>　　5.5 行高</p>
<p>6 变换与动画</p>
<p>7 响应式</p>
<p>8 兼容性</p>
<p>　　8.1 属性前缀</p>
<p>　　8.2 Hack</p>
<p>　　8.3 Expression</p>
<p>#class命名规范</p>
<h2 id="class命名的常用方式"><a href="#class命名的常用方式" class="headerlink" title="class命名的常用方式"></a>class命名的常用方式</h2><h3 id="原子类命名规则"><a href="#原子类命名规则" class="headerlink" title="原子类命名规则"></a>原子类命名规则</h3><p>将复用性高的单条属性直接命名成类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.ml5&#123;margin-left:5px;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模块命名规则"><a href="#模块命名规则" class="headerlink" title="模块命名规则"></a>模块命名规则</h3><p>按照职能划分命名规则</p>
<p>例如，模块是nav，便可以命名nav-tittle、nav-left</p>
<h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h3><p>BEM思想是由于项目开发中，每个组件都是唯一无二的，其名字也是独一无二的，组件内部元素的名字都加上组件名，并用元素的名字作为选择器，自然组件内的样式就不会与组件外的样式冲突了。这是通过组件名的唯一性来保证选择器的唯一性，从而保证样式不会污染到组件外。</p>
<p>BEM的命名规矩很容易记：block-name__element-name–modifier-name，也就是模块名+元素名+修饰器名</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、规则命名中，一律采用小写加中划线的方式，不允许使用大写字母或_</p>
<p>2、命名避免使用中文拼音，应该采用更简明有语义的英文单词进行组合</p>
<p>3、不允许通过1、2、3等序号进行命名；避免class与id重名</p>
<p>4、class用于标识某一个类型的对象，命名必须言简意赅</p>
<p>5、尽可能提高代码模块的复用，样式尽量用组合的方式</p>
<p>6、规则名称中不应该包含颜色（red/blue）、定位（left/right）等与具体显示效果相关的信息。应该用意义命名，而不是样式显示结果命名</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用gulp编辑(编译)less？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8311/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gulp%E7%BC%96%E8%BE%91less%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="什么是gulp"><a href="#什么是gulp" class="headerlink" title="什么是gulp"></a>什么是gulp</h1><p>gulp是自动化构建工具,构建工具可以使繁琐的工作简单化，提高开发人员的工作效率，对于前端开发开发人员来说，我们通常用gulp来合并文件，压缩文件，编译less和sass文件等。 </p><h1 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h1><p>gulp 是基于 node 实现的，那么我们就需要先安装 node。 </p><p>打开 <a href="https://nodejs.org/" target="_blank" rel="noopener">https://nodejs.org/</a> 点击绿色的 <strong>INSTALL</strong> 按钮下载安装 node。 </p><a id="more"></a>


<p>npm 是 node 的包管理工具，可以利用它安装 gulp 所需的包。（在安装 node 时已经自动安装了 npm）</p>
<p>在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure>
<p>若一直没安装成功，请<a href="https://github.com/nimojs/blog/issues/20" target="_blank" rel="noopener">使用 cnpm 安装</a>(npm的国内加速镜像)</p>
<p>意思是：使用 npm 安装全局性的(<code>-g</code>) gulp 包。</p>
<blockquote>
<p>如果你安装失败，请输入<code>sudo npm install -g gulp</code>使用管理员权限安装。（可能会要求输入密码）</p>
</blockquote>
<p>安装时请注意命令行的提示信息，安装完成后可在命令行输入 <code>gulp -v</code> 以确认安装成功。</p>
<h1 id="如何使用gulp编译less"><a href="#如何使用gulp编译less" class="headerlink" title="如何使用gulp编译less"></a>如何使用gulp编译less</h1><p>你可以 <a href="https://github.com/nimojs/gulp-book/archive/master.zip" target="_blank" rel="noopener">下载所有示例代码</a> - <a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter5" target="_blank" rel="noopener">或在线查看代码</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 获取 gulp</span><br><span class="line">var gulp = require(&apos;gulp&apos;)</span><br><span class="line">// 获取 gulp-less 模块</span><br><span class="line">var less = require(&apos;gulp-less&apos;)</span><br><span class="line"></span><br><span class="line">// 编译less</span><br><span class="line">// 在命令行输入 gulp images 启动此任务</span><br><span class="line">gulp.task(&apos;less&apos;, function () &#123;</span><br><span class="line">    // 1. 找到 less 文件</span><br><span class="line">    gulp.src(&apos;less/**.less&apos;)</span><br><span class="line">    // 2. 编译为css</span><br><span class="line">        .pipe(less())</span><br><span class="line">    // 3. 另存文件</span><br><span class="line">        .pipe(gulp.dest(&apos;dist/css&apos;))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 在命令行使用 gulp auto 启动此任务</span><br><span class="line">gulp.task(&apos;auto&apos;, function () &#123;</span><br><span class="line">    // 监听文件修改，当文件被修改则执行 images 任务</span><br><span class="line">    gulp.watch(&apos;less/**.less&apos;, [&apos;less&apos;])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 使用 gulp.task(&apos;default&apos;) 定义默认任务</span><br><span class="line">// 在命令行使用 gulp 启动 less 任务和 auto 任务</span><br><span class="line">gulp.task(&apos;default&apos;, [&apos;less&apos;, &apos;auto&apos;])</span><br></pre></td></tr></table></figure>
<p>你可以访问 <a href="https://github.com/plus3network/gulp-less" target="_blank" rel="noopener">gulp-less</a> 以查看更多用法。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.kancloud.cn/thinkphp/gulp-guide/43994" target="_blank" rel="noopener">gulp入门指南</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>less和sass有什么区别？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8311/less%E5%92%8Csass%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="1-编译环境不一样"><a href="#1-编译环境不一样" class="headerlink" title="1.编译环境不一样"></a>1.编译环境不一样</h1><p>Sass的安装需要Ruby环境，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出css到浏览器，也可以在开发环节使用Less，然后编译成css文件，直接放到项目中，也有 Less.app、SimpleLess、CodeKit.app这样的工具，也有在线编译地址。 </p><a id="more"></a>
<h1 id="2-变量符不一样"><a href="#2-变量符不一样" class="headerlink" title="2.变量符不一样"></a>2.变量符不一样</h1><p>Less是@，而Scss是$，而且变量的作用域也不一样。 </p>
<h1 id="3-输出设置"><a href="#3-输出设置" class="headerlink" title="3.输出设置"></a>3.输出设置</h1><p>Less没有输出设置，Sass提供4中输出选项：nested, compact, compressed 和 expanded。<br>输出样式的风格可以有四种选择，默认为nested<br>nested：嵌套缩进的css代码<br>expanded：展开的多行css代码<br>compact：简洁格式的css代码<br>compressed：压缩后的css代码 </p>
<h1 id="4-条件语句"><a href="#4-条件语句" class="headerlink" title="4.条件语句"></a>4.条件语句</h1><p>Sass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持。</p>
<h1 id="5-引用外部CSS文件"><a href="#5-引用外部CSS文件" class="headerlink" title="5.引用外部CSS文件"></a>5.引用外部CSS文件</h1><p>引用外部CSS文件 scss引用的外部文件命名必须以_开头, 如下例所示:其中_test1.scss,test2.scss、<em>test3.scss文件分别设置的h1 h2 h3。文件名如果以下划线</em>开头的话，Sass会认为该文件是一个引用文件，不会将其编译为css文件. </p>
<h1 id="6-工具库的不同"><a href="#6-工具库的不同" class="headerlink" title="6.工具库的不同"></a>6.工具库的不同</h1><p>Sass和Less的工具库不同 .</p>
<p>Sass有工具库Compass, 简单说，Sass和Compass的关系有点像Javascript和jQuery的关系,Compass是Sass的工具库。在它的基础上，封装了一系列有用的模块和模板，补充强化了Sass的功能。 </p>
<p>Less有UI组件库Bootstrap,Bootstrap是web前端开发中一个比较有名的前端UI组件库，Bootstrap的样式文件部分源码就是采用Less语法编写。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用sass?</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8311/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8sass/</url>
    <content><![CDATA[<h1 id="什么是sass"><a href="#什么是sass" class="headerlink" title="什么是sass"></a>什么是sass</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Sass 是一门高于 CSS 的元语言，它能用来清晰地、结构化地描述文件样式，有着比普通 CSS 更加强大的功能。<br>Sass 能够提供更简洁、更优雅的语法，同时提供多种功能来创建可维护和管理的样式表。 </p><h2 id="sass和scss有什么区别？"><a href="#sass和scss有什么区别？" class="headerlink" title="sass和scss有什么区别？"></a>sass和scss有什么区别？</h2><p>Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点：<br>文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名<br>语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号({})和分号(;)，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。</p><a id="more"></a>

<h1 id="安装sass"><a href="#安装sass" class="headerlink" title="安装sass"></a>安装sass</h1><p>1.安装环境ruby<br>2.打开的Ruby 的 Command 控制面板命令终端，输入下面的命令：<br>gem install sass</p>
<h1 id="sass转译"><a href="#sass转译" class="headerlink" title="sass转译"></a>sass转译</h1><p>因为 Sass 开发之后，要让 Web 页面能调用 Sass 写好的东西，就得有这么一个过程，这个过程就称之为 Sass 编译过程。Sass 的编译有多种方法：</p>
<ul>
<li>命令编译</li>
<li>工具编译 eg：koala</li>
<li>使用webstorm关联scss自动转译<br>1.找到setting下的tools（工具），tools下有一个file watchers，找到并点击。<br>2.点击右侧工具栏中的“+”按钮，添加所需要监控的文件类型<br>3.进行相关设置</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>具体语法及使用见sass中文文档</p>
<p><a href="https://www.sasscss.com/docs/" target="_blank" rel="noopener">sass中文文档</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用less?</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8311/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8less/</url>
    <content><![CDATA[<h1 id="什么是less"><a href="#什么是less" class="headerlink" title="什么是less"></a>什么是less</h1><p>less是一门动态的css语言，使得css样式更加灵活地作用于html标签。</p><p>less作为css的一种形式扩展，它并没有减少css的功能，而是在现有的css语法上，为css加入了程序是式语言的特性。less包含一套自定义的语法及一个解析器， 用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的css文件。</p><a id="more"></a>

<h1 id="为什么使用less"><a href="#为什么使用less" class="headerlink" title="为什么使用less"></a>为什么使用less</h1><p>css是一门非程序式语言，没有变量，没有函数，SCOPE（作用域），需要书写大量看似没有逻辑的代码，即不方便维护与扩展，也不利于复用。 为了方便前端开发的工作量，出现了sass和less. </p>
<h1 id="如何使用less"><a href="#如何使用less" class="headerlink" title="如何使用less"></a>如何使用less</h1><h2 id="在-Node-js-环境中使用-Less"><a href="#在-Node-js-环境中使用-Less" class="headerlink" title="在 Node.js 环境中使用 Less"></a>在 Node.js 环境中使用 Less</h2><p><code>npm install -g less</code> <code>&gt; lessc styles.less styles.css</code> </p>
<h2 id="在浏览器环境中使用-Less"><a href="#在浏览器环境中使用-Less" class="headerlink" title="在浏览器环境中使用 Less"></a>在浏览器环境中使用 Less</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet/less&quot; type=&quot;text/css&quot; href=&quot;styles.less&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/less.js/3.10.0-beta/less.min.js&quot; &gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>less样式文件一定要在引入less.js前先引入。 </p>
<p>备注：请在服务器环境下使用！本地直接打开可能会报错！  </p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul>
<li>命令编译</li>
<li>工具编译 eg：koala</li>
<li>使用webstorm关联less自动转译 </li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://less.bootcss.com/" target="_blank" rel="noopener">less快速入门</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>自适应小屏幕设备时，该如何布局？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8310/%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%8F%E5%B1%8F%E5%B9%95%E8%AE%BE%E5%A4%87%E6%97%B6%EF%BC%8C%E8%AF%A5%E5%A6%82%E4%BD%95%E5%B8%83%E5%B1%80%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="什么时自适应网页设计"><a href="#什么时自适应网页设计" class="headerlink" title="什么时自适应网页设计"></a>什么时自适应网页设计</h1><p>页面能适配众多不同的终端设备，让同一张网页自动适应不同大小的屏幕，根据屏幕宽度，自动调整布局.</p><p>2010年，Ethan Marcotte提出了”自适应网页设计”（Responsive Web Design）这个名词，指可以自动识别屏幕宽度、并做出相应调整的网页设计。响应式网页设计是自适应网页设计的子集。响应式网页设计指的是页面的布局（流动网格、灵活的图像及媒介查询）。总体目标就是去解决设备多样化问题。响应式布局等于流动网格布局，而自适应布局等于使用固定分割点来进行布局。当固定宽度与流动宽度结合起来时，自适应布局就是一种响应式设计，而不仅仅是它的一种替代方法。</p><a id="more"></a>

<h1 id="如何进行自适应网页设计"><a href="#如何进行自适应网页设计" class="headerlink" title="如何进行自适应网页设计"></a>如何进行自适应网页设计</h1><p>1.学会运用 css3 Media Queries，根据不同的屏幕分辨率，选择应用不同的css规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media screen and (max-width:400px)&#123;</span><br><span class="line"></span><br><span class="line">    .class &#123;</span><br><span class="line"></span><br><span class="line">         background:#ccc;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>2.在网页头部加上viewport标签</p>
<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p>
<p>该属性可以控制视窗口宽度的大小。它可以被设置为实际的具体像素width= 600或为特殊设备设置宽度值。 viewport设置属性如下：</p>
<p>width：可设定数值，或者指定为 device-width</p>
<p>height：可设定数值，或者指定為 device-height</p>
<p>initial-scale：第一次进入页面的初始比例</p>
<p>minimum-scale：允许缩小最小比例</p>
<p>maximum-scale：允许放大最大比例</p>
<p>user-scalable：允许使用者缩放，1 or 0 (yes or no)</p>
<p>3.不使用绝对宽度</p>
<p>4.字体最好不要用绝对大小(px)，而使用相对大小(em)</p>
<p>5.流动布局（fluid grid）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.main &#123; float: rightright; width: 70%; &#125;</span><br><span class="line"></span><br><span class="line">.leftBar &#123; float: left; width: 25%; &#125;</span><br></pre></td></tr></table></figure>
<p>6 图片的自动缩放，等比缩放</p>
<p><code>img{ max-width: 100%; }</code></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何改变默认radio和select的样式？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%8310/%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E9%BB%98%E8%AE%A4radio%E5%92%8Cselect%E7%9A%84%E6%A0%B7%E5%BC%8F%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="改变默认radio样式"><a href="#改变默认radio样式" class="headerlink" title="改变默认radio样式"></a>改变默认radio样式</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>step1.可以为<code>&lt;label&gt;</code>元素添加生成性内容(伪元素)，并基于单选按钮的状态来为其设置样式；<br>step2. 然后把真正的单选按钮隐藏起来；<br>step3. 最后把生成内容美化一下。</p><h2 id="编码实战"><a href="#编码实战" class="headerlink" title="编码实战"></a>编码实战</h2><p>1、可以为<code>&lt;label&gt;</code>元素添加生成性内容(伪元素)，并基于单选按钮的状态来为其设置样式；<br>为label设置样式<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">label::before&#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">content: &quot;&quot;;</span><br><span class="line">width: 10rem;</span><br><span class="line">height: 10rem;</span><br><span class="line">border: 10px solid #d7d7d7;</span><br><span class="line">border-radius: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a>

<ol start="2">
<li><p>然后把真正的单选按钮隐藏起来；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input[type=&quot;radio&quot;] &#123; position: absolute; clip: rect(0, 0, 0, 0); &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后把生成内容美化一下。<br>为label选中时设置样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input[type=&quot;radio&quot;]:checked + label::before &#123; background-color: #01cd78; background-clip: content-box; padding: .2em; &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="改变默认select样式"><a href="#改变默认select样式" class="headerlink" title="改变默认select样式"></a>改变默认select样式</h1><h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt; &lt;select name=&quot;&quot;&gt; &lt;option value=&quot;芝士&quot;&gt;芝士&lt;/option&gt; &lt;option value=&quot;奶油&quot;&gt;奶油&lt;/option&gt; &lt;/select&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>给select添加父元素div目的是为了，用div的样式覆盖住select样式。</p>
<h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">                //用div的样式代替select的样式</span><br><span class="line">                width: 200px;</span><br><span class="line">                height: 40px;</span><br><span class="line">                border-radius: 5px;</span><br><span class="line">                //盒子阴影修饰作用,自己随意</span><br><span class="line">                box-shadow: 0 0 5px #ccc;</span><br><span class="line">                position: relative;</span><br><span class="line">            &#125;</span><br><span class="line">            select&#123;</span><br><span class="line">                //清除select的边框样式</span><br><span class="line">                border: none;</span><br><span class="line">                //清除select聚焦时候的边框颜色</span><br><span class="line">                outline: none;</span><br><span class="line">                //将select的宽高等于div的宽高</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 40px;</span><br><span class="line">                line-height: 40px;</span><br><span class="line">                //隐藏select的下拉图标</span><br><span class="line">                appearance: none;</span><br><span class="line">                -webkit-appearance: none;</span><br><span class="line">                -moz-appearance: none;</span><br><span class="line">                //通过padding-left的值让文字居中</span><br><span class="line">                padding-left: 60px;</span><br><span class="line">            &#125;</span><br><span class="line">            //使用伪类给select添加自己想用的图标</span><br><span class="line">            div:after&#123;</span><br><span class="line">                content: &quot;&quot;;</span><br><span class="line">                width: 14px;</span><br><span class="line">                height: 8px;</span><br><span class="line">                background: url(img/xiala.png) no-repeat center;</span><br><span class="line">                //通过定位将图标放在合适的位置</span><br><span class="line">                position: absolute;</span><br><span class="line">                right: 20px;</span><br><span class="line">                top: 45%;</span><br><span class="line">                //给自定义的图标实现点击下来功能</span><br><span class="line">                pointer-events: none;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>媒体查询如何使用？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%839/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><p>媒体查询是非常别致的”有条件的 CSS 规则”。它只适用于一些基于某些规定条件的 CSS。如果满足那些条件，则应用相应的样式。 </p><h1 id="为什么使用媒体查询"><a href="#为什么使用媒体查询" class="headerlink" title="为什么使用媒体查询"></a>为什么使用媒体查询</h1><p>使用@media媒体查询，可以针对不同的媒体类型定义不同的样式。</p><h1 id="媒体查询的使用"><a href="#媒体查询的使用" class="headerlink" title="媒体查询的使用"></a>媒体查询的使用</h1><h2 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h2><p> 媒体查询有两种引入方法：</p><p>link元素中的CSS媒体查询 </p><p>css样式表中媒体查询 </p><a id="more"></a>




<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- link元素中的CSS媒体查询 --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;(max-width: 800px)&quot; href=&quot;example.css&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 样式表中的CSS媒体查询 --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">@media (max-width: 600px) &#123;</span><br><span class="line">  .facet_sidebar &#123;</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><p>你可以使用逻辑操作符，包括<code>not</code>、<code>and</code>和<code>only</code>等，构建复杂的媒体查询。<code>and</code>操作符用来把多个<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries#Media_features" target="_blank" rel="noopener">媒体属性</a>组合成一条媒体查询，对成链式的特征进行请求，只有当每个属性都为真时，结果才为真。<code>not</code>操作符用来对一条媒体查询的结果进行取反。<code>only</code>操作符仅在媒体查询匹配成功的情况下被用于应用一个样式，这对于防止让选中的样式在老式浏览器中被应用到。若使用了<code>not</code>或<code>only</code>操作符，必须明确指定一个媒体类型。</p>
<p>你也可以将多个媒体查询以逗号分隔放在一起；只要其中任何一个为真，整个媒体语句就返回真。相当于<code>or</code>操作符。</p>
<p>eg：and 关键字用于合并多个媒体属性或合并媒体属性与媒体类型,只有当每个属性都为真时，结果才为真  <code>@media and (max-width:600px) and (min-width: 800px;){......}</code>,此代码表示屏幕宽度在600-800px时，使用上述样式。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>最好在使用媒体查询时引入如下meta标签保证媒体查询的精准.</p>
<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</code></p>
<p>width = device-width：宽度等于当前设备的宽度<br>initial-scale:初始的缩放比例(默认设置为1.0)<br>minimum-scale:允许用户缩放到的最小比例(默认设置为1.0)<br>maximum-scale:允许用户缩放到的最大比例(默认设置为1.0)<br>user-scalable:用户是否可以手动缩放(默认设置为no，因为我们不希望用户放大缩小页面)</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="noopener">MDN-CSS媒体查询</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>响应式的优点与缺点？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%839/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9%EF%BC%9F/</url>
    <content><![CDATA[<p>响应式网站是在2010年提出来的，是为了能让网页在不同设备下兼容多个终端，而不是为每个终端特定一种版本。 </p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>1.在不同设备下能有不同的页面排版，这也是响应式最大的优点，在分辨率不同，设备环境进行一些不同的设计，所有开发维护和运营上，相对多个版本成本会降低很多。 </p><p>2.兼容性好，能在不同的设备下浏览。 </p><a id="more"></a>


<p>3.方便后期维护页面，只需要对必要的页面进行修改，不会影响其他页面。 </p>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>1.页面加载过多的代码，当你在pc端加载的时候，css样式也会将手机端的冗余代码一块加载，这样就直接影响了加载速度。 </p>
<p>2.在响应式设计中，图片和视频都是统一加载的，当你在设备低的手机上加载不符合当前需要的图片或者视频，就会过多的消耗用户的流量。 </p>
<p>3.局限性，对于响应式，局限性较大，不适合一些大型的门户网或者电商网站，一般门户网或电商网站一个界面内容较多，而响应式最忌讳较多内容，代码过多会影响运行速度。<br>对大型门户或电商网站来说，响应式设计目前确实不太适合。因为响应式设计的基本原则是不会因设备不同而给予用户不同的内容（比如在低分辩率设备上删减某些内容），而大型门户或电商网站的单页内容非常多，当缩减到低分辨率设备上，又要保证内容全部可浏览时，必然导致页面拉长，浏览困难度增加。所以很多大型门户或电商网站都会提供一个移动设备版的网站，或者干脆直接让用户缩放网页进行浏览。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用bootstrap栅格系统？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%839/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8bootstrap%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="bootstrap栅格系统"><a href="#bootstrap栅格系统" class="headerlink" title="bootstrap栅格系统"></a>bootstrap栅格系统</h1><h2 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h2><p>Bootstrap 是一个用于快速开发 Web 应用程序和网站的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的。 </p><h2 id="bootstrap栅格系统-1"><a href="#bootstrap栅格系统-1" class="headerlink" title="bootstrap栅格系统"></a>bootstrap栅格系统</h2><p>Bootstrap 提供了一套响应式、移动设备优先的流式网格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。 </p><a id="more"></a>

<h1 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h1><p>1、数据行(.row)必须包含在容器（.container）中，以便为其赋予合适的对齐方式和内距(padding)。  </p>
<p>2、在行(.row)中可以添加列(.column)，但列数之和不能超过平分的总列数，比如12。  </p>
<p>3、具体内容应当放置在列容器（column）之内，而且只有列（column）才可以作为行容器(.row)的直接子元素  </p>
<p>4、通过设置内距（padding）从而创建列与列之间的间距。然后通过为第一列和最后一列设置负值的外距（margin）来抵消内距(padding)的影响 。</p>
<h1 id="编码实战"><a href="#编码实战" class="headerlink" title="编码实战"></a>编码实战</h1><p>HTML代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">   &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;col-*-*&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;col-*-*&quot;&gt;&lt;/div&gt;      </span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;row&quot;&gt;...&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;....</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.runoob.com/bootstrap/bootstrap-grid-system.html" target="_blank" rel="noopener">菜鸟教程bootstrap栅格系统</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>margin负值在页面布局中有哪些应用？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%838/margin%E8%B4%9F%E5%80%BC%E5%9C%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BA%94%E7%94%A8%EF%BC%9F/</url>
    <content><![CDATA[<ol>
<li><p>左右列固定，中间列自适应布局 </p>
<p>此例适用于左右栏宽度固定，中间栏宽度自适应的布局。由于网页的主体部分一般在中间，很多网页都需要中间列优先加载，而这种布局刚好满足此需求。</p>
</li>
<li><p>去除列表右边框 </p>
<p>项目中经常会使用浮动列表展示信息，为了美观通常为每个列表之间设置一定的间距（margin-right）,当父元素的宽度固定式，每一行的最右端的li元素的右边距就多余了，去除的方法通常是为最右端的li添加class，设置margin-right:0; 这种方法需要动态判断为哪些li元素添加class，麻烦！！！利用负margin就可以实现下面这种效果：</p>
</li>
<li><p>负边距+定位：水平垂直居中 </p>
<p>使用绝对定位将div定位到body的中心，然后使用负margin（content宽高的一半），将div的中心拉回到body的中心，已到达水平垂直居中的效果。</p>
</li>
<li><p>去除列表最后一个li元素的border-bottom </p>
<p>列表中我们经常会添加border-bottom值，最后一个li的border-bottom往往会与外边框重合，视觉上不雅观，往往要移除。</p>
</li>
<li><p>多列等高 </p>
<p>此例关键是给每个框设置大的底部内边距，然后用数值相似的负外边距消除这个高度。这会导致每一列溢出容器元素，如果把外包容器的overflow属性设为hidden，列就在最高点被裁切。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>css有哪些方式可以实现垂直居中？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%838/css%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E5%BC%8F%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>前端在设计一个版面时，通常都会用到水平，垂直居中，水平居中相对来说比较好处理，而垂直居中就稍微复杂点，但他们两个都是我们需要熟练掌握的知识点。</p><h1 id="水平居中设置"><a href="#水平居中设置" class="headerlink" title="水平居中设置"></a>水平居中设置</h1><h2 id="1-行内元素"><a href="#1-行内元素" class="headerlink" title="1.行内元素"></a>1.行内元素</h2><p>设置 text-align:center  </p><h2 id="2-定宽块状元素"><a href="#2-定宽块状元素" class="headerlink" title="2.定宽块状元素"></a>2.定宽块状元素</h2><p>设置 左右 margin 值为 auto  </p><h2 id="3-不定宽块状元素"><a href="#3-不定宽块状元素" class="headerlink" title="3.不定宽块状元素"></a>3.不定宽块状元素</h2><ul>
<li>在元素外加入 table 标签（完整的，包括 table、tbody、tr、td），该元素写在 td 内，然后设置 margin 的值为 auto  </li>
<li>给该元素设置 display:in-line 方法 </li>
<li>父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left:50%  </li>
</ul><a id="more"></a>



<h1 id="垂直居中设置"><a href="#垂直居中设置" class="headerlink" title="垂直居中设置"></a>垂直居中设置</h1><h2 id="1-父元素高度确定的单行文本"><a href="#1-父元素高度确定的单行文本" class="headerlink" title="1.父元素高度确定的单行文本"></a>1.父元素高度确定的单行文本</h2><p>​    设置 height = line-height  </p>
<h2 id="2-父元素高度确定的多行文本"><a href="#2-父元素高度确定的多行文本" class="headerlink" title="2.父元素高度确定的多行文本"></a>2.父元素高度确定的多行文本</h2><ul>
<li>插入 table （插入方法和水平居中一样），然后设置 vertical-align:middle </li>
<li>先设置 display:table-cell 再设置 vertical-align:middle </li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://tianxintiandisheng.github.io/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%835/%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8BCSS3%E7%9A%84Flexbox%EF%BC%88%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%EF%BC%89%E4%BB%A5%E5%8F%8A%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/" target="_blank" rel="noopener">Flex大法好！</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>bootstrap有哪些常用组件？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%838/bootstrap%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h1><p>组件:一般是指软件系统的一部分，承担了特定的职责，可以独立于整个系统进行开发和测试， 一个良好设计的组件应该可以在不同的软件系统中被使用(可复用)。  </p>
<h1 id="目前常用的bootstrap组件："><a href="#目前常用的bootstrap组件：" class="headerlink" title="目前常用的bootstrap组件："></a>目前常用的bootstrap组件：</h1><p>1.轮播图</p>
<p>2.下拉菜单</p>
<p>3.响应式导航栏 </p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>div+css的布局较table布局有什么优点？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%838/div-css%E7%9A%84%E5%B8%83%E5%B1%80%E8%BE%83table%E5%B8%83%E5%B1%80%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%82%B9%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>tableE布局是WEB早期CSS不存在的时候兴起的，是对TABLE标签的不正规使用，Table标签就是表格，是用来显示数据的，而不是用来布局网页的，虽然它有时候布局网页很简单。现在绝大多数的网站都是用DIV+CSS布局，现在的网页越来越倾向于使用DIV的方法来布局网页了。  这两种布局各有各的优缺点。 </p><a id="more"></a>
<h1 id="div-css布局"><a href="#div-css布局" class="headerlink" title="div+css布局"></a>div+css布局</h1><h2 id="div-css布局的优点"><a href="#div-css布局的优点" class="headerlink" title="div+css布局的优点"></a>div+css布局的优点</h2><p>可以通过css样式给框架进行功能强大的属性设置以及给网页的局部进行任意的定位，制作出来的页面浏览速度较快，同时页面的风格可以通过修改单独的css文件进行随意的修改和更新；</p>
<p>1.符合W3C标准，代码结构清晰明了，结构、样式和行为分离，带来足够好的可维护性。 </p>
<p>2.布局精准，网站版面布局修改简单。 </p>
<p>3.加快了页面的加载速度（最重要的）（在IE中要将整个table加载完了才显示内容）。  </p>
<p>4.节约站点所占的空间和站点的流量。  </p>
<p>5.用只包含结构化内容的HTML代替嵌套的标签，提高另外搜索引擎对网页的搜索效率。 </p>
<h2 id="div-css布局的缺点"><a href="#div-css布局的缺点" class="headerlink" title="div+css布局的缺点"></a>div+css布局的缺点</h2><p>每个div容器都需要定义css样式来控制，制作过程相比table方式要复杂。</p>
<h1 id="table布局"><a href="#table布局" class="headerlink" title="table布局"></a>table布局</h1><h2 id="table布局的优点"><a href="#table布局的优点" class="headerlink" title="table布局的优点"></a>table布局的优点</h2><p>1.容易上手。</p>
<p>2.可以形成复杂的变化，简单快速。</p>
<p>3.表现上更加“严谨”，在不同浏览器中都能得到很好的兼容。 </p>
<h2 id="table布局的缺点"><a href="#table布局的缺点" class="headerlink" title="table布局的缺点"></a>table布局的缺点</h2><p>由于html文件中的table标签的浏览速度较慢，所以，使用嵌套表格的方法来布局网页框架会使网页浏览的速度变慢。因为table是中的内容是自适应的，为了自适应，它要计算嵌套最深的节点以满足自适应，所以有可能会有一断时间出现空白才显示。所以是会有问题的。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>什么是外边距重叠？重叠的结果是什么？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%838/%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%96%E8%BE%B9%E8%B7%9D%E9%87%8D%E5%8F%A0%EF%BC%9F%E9%87%8D%E5%8F%A0%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="外边距重叠"><a href="#外边距重叠" class="headerlink" title="外边距重叠"></a>外边距重叠</h1><p>边界重叠是指两个或多个盒子(可能相邻也可能嵌套)的相邻边界(其间没有任何非空内容、补白、边框)重合在一起而形成一个单一边界。两个或多个块级盒子的垂直相邻边界会重合。</p><h1 id="外边距重叠的结果"><a href="#外边距重叠的结果" class="headerlink" title="外边距重叠的结果"></a>外边距重叠的结果</h1><p>结果的边界宽度是相邻边界宽度中最大的值。</p><p>如果出现负边界，则在最大的正边界中减去绝对值最大的负边界。</p><p>如果没有正边界，则从零中减去绝对值最大的负边界。  </p><a id="more"></a>



<h1 id="外边距重叠的意义"><a href="#外边距重叠的意义" class="headerlink" title="外边距重叠的意义"></a>外边距重叠的意义</h1><p>外边距的重叠只产生在普通流文档的上下外边距之间，这个看起来有点奇怪的规则，其实有其现实意义。设想，当我们上下排列一系列规则的块级元素（如段落P）时，那么块元素之间因为外边距重叠的存在，段落之间就不会产生双倍的距离。  </p>
<h1 id="防止外边距重叠解决方案"><a href="#防止外边距重叠解决方案" class="headerlink" title="防止外边距重叠解决方案"></a>防止外边距重叠解决方案</h1><p>虽然外边距的重叠有其一定的意义，但有时候我们在设计上却不想让元素之间产生重叠，那么可以有如下几个建议可供参考： </p>
<ul>
<li>外层元素padding代替  </li>
<li>内层元素透明边框 border:1px solid transparent;  </li>
<li>内层元素绝对定位 postion:absolute:  </li>
<li>外层元素 overflow:hidden;  </li>
<li>内层元素 加float:left;或display:inline-block;  </li>
<li>内层元素padding:1px; </li>
</ul>
<hr>
<blockquote>
<p>版权声明：本文为CSDN博主「jnshu_it」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/jnshu_it/article/details/85370693" target="_blank" rel="noopener">https://blog.csdn.net/jnshu_it/article/details/85370693</a></p>
</blockquote>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>主流浏览器内核有哪几种？</title>
    <url>/2019/10/10/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%838/%E4%B8%BB%E6%B5%81%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h1><p>浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。</p><a id="more"></a>
<p>浏览器最重要或者说最核心的部分是“Rendering Engine”，可大概译为“渲染引擎”，不过一般习惯将之称为“浏览器内核”，负责对网页语法的解释并渲染网页。所以，通常所谓的浏览器内核也就是浏览器所采用的渲染引擎，渲染引擎决定了浏览器如何显示网页的内容以及页面的格式信息。  </p>
<h1 id="主流浏览器内核"><a href="#主流浏览器内核" class="headerlink" title="主流浏览器内核"></a>主流浏览器内核</h1><h2 id="1-Trident-IE内核"><a href="#1-Trident-IE内核" class="headerlink" title="1.Trident/IE内核"></a>1.Trident/IE内核</h2><p>该内核程序在1997年的IE4中首次被采用，是微软在Mosaic代码的基础之上修改而来的，并沿用到IE11，也被普遍称作”IE内核”。Trident实际上是一款开放的内核，其接口内核设计的相当成熟，因此才有许多采用IE内核而非IE的浏览器(壳浏览器)涌现。由于IE本身的“垄断性”（虽然名义上IE并非垄断，但实际上，特别是从Windows 95年代一直到XP初期，就市场占有率来说IE的确借助Windows的东风处于“垄断”的地位）而使得Trident内核的长期一家独大，微软很长时间都并没有更新Trident内核，这也导致了后面的两个后果： 一是Trident内核曾经几乎与W3C标准脱节（2005年） 二是Trident内核的大量 Bug等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为IE浏览器不安全的观点，也有很多用户转向了其他浏览 器，Firefox和Opera就是这个时候兴起的。 Trident内核的常见浏览器有：IE6、IE7、IE8（Trident 4.0）、IE9（Trident 5.0）、IE10（Trident 6.0）、2345浏览器、腾讯TT、淘宝浏览器、阿云浏览器（早期版本）、瑞星安全浏览器、蚂蚁浏览器、飞腾浏览器、速达浏览器、佐罗浏览器、海豚浏览器等等  </p>
<h2 id="2-Gecko-Firefox内核"><a href="#2-Gecko-Firefox内核" class="headerlink" title="2.Gecko/Firefox内核"></a>2.Gecko/Firefox内核</h2><p>Netscape6开始采用的内核，后来的Mozilla FireFox(火狐浏览器) 也采用了该内核，Gecko的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko内核的浏览器也很多，这也是Gecko内核虽然年轻但市场占有率能够迅速提高的重要原因。事实上，Gecko引擎的由来跟IE不无关系，前面说过IE没有使用W3C的标准，这导致了微软内部一些开发人员的不满；他们与当时已经停止更新了的 Netscape的一些员工一起创办了Mozilla，以当时的Mosaic内核为基础重新编写内核，于是开发出了Gecko。不过事实上，Gecko 内核的浏览器仍然还是Firefox (火狐) 用户最多，所以有时也会被称为Firefox内核。Gecko核心设计的相对成熟，在无法获取源码的情况下，开放程度仅次于IE。由于其本身Open Source。实际上是目前开发程度最好的浏览器。Firefox的扩展能够给浏览者带来完全不同的浏览体验。市面上Gecko内核的浏览器主要分两类，一类是以Mozilla Firefox为代表的，用XUL作为界面描述语言的浏览器：这类浏览器往往继承了Firefox扩展性好的优点，早前的Madfox和Albatross就是这一类型的浏览器。所以，Gecko内核也被称为Firefox内核。 Gecko内核常见的浏览器： Mozilla Firefox、Mozilla SeaMonkey、waterfox（Firefox的64位开源版）、Iceweasel、Epiphany（早期版本）、Flock（早期版本）等等</p>
<h2 id="3-WebKit内核"><a href="#3-WebKit内核" class="headerlink" title="3.WebKit内核"></a>3.WebKit内核</h2><p>Webkit(Safari内核,Chrome内核原型,开源):它是苹果公司自己的内核，也是苹果的Safari浏览器使用的内核。 Webkit引擎包含WebCore排版引擎及JavaScriptCore解析引擎，均是从KDE的KHTML及KJS引擎衍生而来，它们都是自由软件，在GPL条约下授权，同时支持BSD系统的开发。WebKit 内核在手机上的应用也十分广泛，例如 Google 的手机 Gphone、 Apple 的 iPhone, Nokia’s Series 60 browser 等所使用的 Browser 内核引擎，都是基于 WebKit。2003年，Apple 宣布发布首款他们自主开发的 web 浏览器：Safari。它的呈现引擎叫 WebKit。它是 Linux 中的 web 浏览器 Konqueror 呈现引擎 KHTML 的一个分支，几年后，WebKit 的开源吸引了呈现引擎的开发人员。根据最新的浏览器调查表明，该浏览器的市场甚至已经超过了Opera的Presto了——当然这一方面得益于苹果转到x86架构之后的人气暴涨，另外也是因为Safari 3终于推出了Windows版的缘故吧。Google Chrome、360极速浏览器以及搜狗高速浏览器高速模式也使用Webkit作为内核(在脚本理解方面，Chrome使用自己研发的V8引擎)。WebKit 内核在手机上的应用也十分广泛，例如 Google 的手机 Gphone、 Apple 的iPhone， Nokia’s Series 60 browser 等所使用的 Browser 内核引擎，都是基于 WebKit。 WebKit内核常见的浏览器：傲游浏览器3、[1] Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器，  </p>
<h2 id="4-Presto内核"><a href="#4-Presto内核" class="headerlink" title="4.Presto内核"></a>4.Presto内核</h2><p>Presto是一个由Opera Software开发的浏览器排版引擎，供Opera 7.0及以上使用。该款引擎的特点就是渲染速度的优化达到了极致，也是目前公认网页浏览速度最快的浏览器内核，然而代价是牺牲了网页的兼容性。实际上它是一个动态内核，与其它几个内核的最大的区别就在脚本处理上，Presto有着天生的 优势，页面的全部或者部分都能够在回应脚本事件时等情况下被重新解析。此外该内核在执行Javascrīpt的时候有着最快的速度，根据在同等条件下的测 试，Presto内核执行同等Javascrīpt所需的时间仅有Trident和Gecko内核的约1/3（Trident内核最慢，不过两者相差没有多大）。由于Presto是商业引擎，使用Presto的除开Opera以外，只剩下NDSBrowser、Wii Internet Channle、Nokia 770网络浏览器等，这很大程度上限制了Presto的发展。  </p>
<h2 id="5-Blink内核"><a href="#5-Blink内核" class="headerlink" title="5.Blink内核"></a>5.Blink内核</h2><p>2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实Blink引擎就是也就是Webkit的分支，就像Webkit是KHTML的分支一样。Blink引擎现在是谷歌公司与Opera Software共同研发， </p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何用css写一个简单的幻灯片效果页面？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%838/%E5%A6%82%E4%BD%95%E7%94%A8css%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%B9%BB%E7%81%AF%E7%89%87%E6%95%88%E6%9E%9C%E9%A1%B5%E9%9D%A2%EF%BC%9F/</url>
    <content><![CDATA[<p>CSS3属性中有关于制作动画的三个属性：Transform,Transition,Animation。</p><p>transform属性向元素应用2D或3D转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p><p>transition是令一个或多个可以用数值表示的css属性值发生变化时产生过渡效果。</p><p>Animation字面上的意思，就是“动画”的意思.</p><a id="more"></a>



<p>我们使用CSS3的Animation制作动画，实现简单的幻灯片效果，可以省去复杂的js,jquery代码。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何实现轮播图？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%838/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE%EF%BC%9F/</url>
    <content><![CDATA[<p>通过以下的5个过程，实现轮播图的轮播效果 </p><h1 id="1-动态生成结构"><a href="#1-动态生成结构" class="headerlink" title="1.动态生成结构"></a>1.动态生成结构</h1><p>创建元素和插入元素的方法分别是什么？<br>创建元素：<code>document.creatElement( tagName ) var li = document.creatElement(“li”)；</code><br>插入元素：<code>appendChild( element ) ol.appendChild(“li”);</code><br>通过什么方法复制第一张图片元素？<br>通过<code>cloneNode()</code>方法来复制元素：<code>eg . var firstImg = ulLis[0].cloneNode(true)</code>； 其中<code>cloneNode</code>方法中，如果传递给它的参数是 true，它还将递归复制当前节点的所有子孙节点。否则，它只复制当前节点 </p><a id="more"></a>

<h1 id="2-鼠标经过按钮"><a href="#2-鼠标经过按钮" class="headerlink" title="2.鼠标经过按钮"></a>2.鼠标经过按钮</h1><p>鼠标经过时如何改变按钮样式？<br>a. 清除所有按钮的样式 <code>for (var j = 0; j &lt; olLis.length; j++) { olLis[j].className = “”; }</code><br>b. 给当前鼠标所在按钮添加特殊样式<code>this.className = “current”;</code><br>鼠标经过按钮时如何计算图片盒子移动的距离?<br>通过按钮索引值（this.index）和图片的宽度（imgWidth）来计算图片盒子要移动的距离（target） <code>target = - this.index * imgWidth</code> </p>
<h1 id="3-鼠标点击箭头"><a href="#3-鼠标点击箭头" class="headerlink" title="3.鼠标点击箭头"></a>3.鼠标点击箭头</h1><p><strong>通过什么属性改变左右箭头的隐藏和显示？</strong><br>通过控制左右箭头盒子的display属性来控制左右箭头盒子的显示（block）和隐藏（none）<br>通过什么机制来统一左/右箭头点击时图片切换为当前图片的上/下一张？<br>利用全局变量来统一左右箭头切换图片，在左右箭头点击时，通过pic来计算图片盒子移动的目标位置 <code>var target = -pic * imgWidth;</code><br>当点击左箭头时：pic– –这样target比当前位置数值大imgWidth 图片盒子向右移动一张图片的距离 显示出上一张图片<br>当点击右箭头时：pic++ 这样target比当前位置数值小imgWidth 图片盒子向左移动一张图片的距离 显示出下一张图片 </p>
<h1 id="4-按钮随之变化"><a href="#4-按钮随之变化" class="headerlink" title="4.按钮随之变化"></a>4.按钮随之变化</h1><p>square的取值范围以及其与pic对应情况 </p>
<h1 id="5-添加自动滚动"><a href="#5-添加自动滚动" class="headerlink" title="5.添加自动滚动"></a>5.添加自动滚动</h1><p>图片自动播放下一张和点击右箭头的操作相同<br>图片轮播主要技术点为：<br>一、<code>&lt;ul&gt; &lt;li&gt;</code> 来作导航栏；<br>二、通过设置其属性为<code>overflow:none</code>，使照片集部分隐藏； </p>
<p>三、CSS3的transition 结合 transform 来做动画变换；<br>四、JQUERY通过选择器，控制动画元素属性。 </p>
<p>动画描述<br>一、鼠标放在图片上，会出现左右滑动箭头；<br>二、点击箭头会使图片集左右移动，中间图片会旋转360度，并放大1.2倍；<br>三、图片到边界时不能再滑动</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如果是在手机上查看投票页，没有hover效果时应该怎么办？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%837/%E5%A6%82%E6%9E%9C%E6%98%AF%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E6%9F%A5%E7%9C%8B%E6%8A%95%E7%A5%A8%E9%A1%B5%EF%BC%8C%E6%B2%A1%E6%9C%89hover%E6%95%88%E6%9E%9C%E6%97%B6%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="为什么hover在手机上没效果？"><a href="#为什么hover在手机上没效果？" class="headerlink" title="为什么hover在手机上没效果？"></a>为什么hover在手机上没效果？</h1><p>让我们再回顾一下hover的定义…</p><p><code>:hover</code>用于选择鼠标指针浮动在上面的元素。</p><p>再想一想…</p><p>手机上哪来的鼠标啊伙计？！</p><p>SO,手机端没有hover特效，当你点击的时候就直接触发click。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><strong>首先，经试验发现，设置的<code>：hover</code>在Android系统上点击会出现， 但是需要再次点击才会消失；</strong></p><a id="more"></a>





<p><strong>IOS系统上点击无法出现；</strong></p>
<p>手机虽然没有鼠标，但是有触摸事件.</p>
<p>一开始触摸事件是ios版Safari浏览器为了向开发人员传达一些信息新添加的事件。 因为ios设备既没有鼠标也没有键盘，所以在为移动Safari浏览器开发交互性网页的时候， PC端的鼠标和键盘事件是不够用的。</p>
<p>在iPhone 3G发布的时候，其自带的移动Safari浏览器就提供了一些与触摸(touch)操作相关的新事件。 随后，Android上的浏览器也实现了相同的事件。触摸事件(touch)会在用户手指放在屏幕上面的时候、 在屏幕上滑动的时候或者是从屏幕上移开的时候触发。</p>
<p>1.touchstart事件：当手指触摸屏幕时候触发，即使已经有一个手指放在屏幕上也会触发。</p>
<p>2.touchmove事件：当手指在屏幕上滑动的时候连续地触发。在这个事件发生期间， 调用preventDefault()事件可以阻止滚动。</p>
<p>3.touchend事件：当手指从屏幕上离开的时候触发。</p>
<p>4.touchcancel事件：touchcancel，是在拖动中断时候触发。</p>
<hr>
<blockquote>
<p>版权声明：本文为CSDN博主「jnshu_it」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/jnshu_it/article/details/85759010" target="_blank" rel="noopener">https://blog.csdn.net/jnshu_it/article/details/85759010</a></p>
</blockquote>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>描述下z-index和叠加上下文是如何形成的？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%837/%E6%8F%8F%E8%BF%B0%E4%B8%8Bz-index%E5%92%8C%E5%8F%A0%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E6%98%AF%E5%A6%82%E4%BD%95%E5%BD%A2%E6%88%90%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="z-index是什么？"><a href="#z-index是什么？" class="headerlink" title="z-index是什么？"></a>z-index是什么？</h1><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。<br>该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。</p><h1 id="z-index和叠加上下文是如何形成的"><a href="#z-index和叠加上下文是如何形成的" class="headerlink" title="z-index和叠加上下文是如何形成的"></a>z-index和叠加上下文是如何形成的</h1><p>一言难尽，献上传送门。</p><a id="more"></a>

<p><a href="https://blog.csdn.net/cat_sky/article/details/80302245" target="_blank" rel="noopener">z-index 层叠上下文的关系</a></p>
<h1 id="使用z-index有什么需要注意的地方？"><a href="#使用z-index有什么需要注意的地方？" class="headerlink" title="使用z-index有什么需要注意的地方？"></a>使用z-index有什么需要注意的地方？</h1><ul>
<li>在开发中尽量避免层叠上下文的多层嵌套，因为层叠上下文嵌套过多的话容易产生混乱，如果对层叠上下文理解不够的话是不好把控的。</li>
<li>非浮层元素（对话框等）尽量不要用z-index（通过层叠顺序或者dom顺序或者通过层叠上下文进行处理）</li>
<li>z-index设置数值时尽量用个位数</li>
<li>让absolute元素覆盖正常文档流内元素（不用设z-index，自然覆盖）</li>
<li>让后一个absolute元素覆盖前一个absolute元素（不用设z-index，只要在HTML端正确设置元素顺序即可）</li>
</ul>
<h1 id="什么情况下使用z-index？"><a href="#什么情况下使用z-index？" class="headerlink" title="什么情况下使用z-index？"></a>什么情况下使用z-index？</h1><p>当absolute元素覆盖另一个absolute元素，且HTML端不方便调整DOM的先后顺序时，需要设置z-index: 1。非常少见的情况下多个absolute交错覆盖，或者需要显示最高层次的模态对话框时，可以设置z-index &gt; 1。</p>
<hr>
<blockquote>
<p>版权声明：本文为CSDN博主「cat_sky」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p>
<p>原文链接：<a href="https://blog.csdn.net/cat_sky/article/details/80302245" target="_blank" rel="noopener">https://blog.csdn.net/cat_sky/article/details/80302245</a></p>
</blockquote>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>rgba和opacity的透明效果有什么不同？display和visiblity有什么区别？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%837/rgba%E5%92%8Copacity%E7%9A%84%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9Fdisplay%E5%92%8Cvisiblity%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="rgba和opacity的透明效果有什么不同"><a href="#rgba和opacity的透明效果有什么不同" class="headerlink" title="rgba和opacity的透明效果有什么不同"></a>rgba和opacity的透明效果有什么不同</h1><p>opacity后代元素会随着一起具有透明性，Opacity中的字随着透明值下降越来越看不清楚，而RGBA不具有这样的问题。 </p><h1 id="display和visiblity有什么区别"><a href="#display和visiblity有什么区别" class="headerlink" title="display和visiblity有什么区别"></a>display和visiblity有什么区别</h1><p>display：通常可以设置为none、inline、block<br>visblity：通常可以设置为hidden、visible </p><a id="more"></a>

<p>当display为none，visibility为hidden时，元素都会不见。不过其还有不同之处。</p>
<p>区别：<br>display：none:隐藏元素但不占据该元素原来的空间。父级设置值为none后，无论子级设置任何值都无法显示。（<strong>不占空间，可遗传</strong>）<br>visibility：hidden:隐藏元素并且占据该元素原来的空间。子级设置visible后不受父级影响。（<strong>占空间，不遗传</strong>）</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>什么是浮动？有哪些清除浮动的方法？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%837/%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%AE%E5%8A%A8%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><p>在了解什么是浮动之前我们先了解一下html元素在普通流排列方式。在普通流中，元素是按照它在 HTML 中的出现的先后顺序自上而下依次排列布局的，在排列过程中所有的行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为一整行。如果没有特殊样式指定，所有元素默认都是按照普通流方式排列布局，即普通流中元素的位置由该元素在 HTML 文档中的位置决定的。</p><a id="more"></a>
<p>浮动使元素脱离文档普通流，漂浮在普通流之上的。浮动元素依然按照其在普通流的位置上出现，然后尽可能的根据设置的浮动方向向左或者向右浮动，直到浮动元素的外边缘遇到包含框或者另一个浮动元素为止，且允许文本和内联元素环绕它。浮动会产生块级框（相当于设置了display:block），而不管该元素本身是什么。</p>
<h1 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h1><p>如果我们不给父元素设置高度，我们知道如果它里面的元素不浮动的话， 那么这个外层的高是会自动被撑开的。<br>若浮动元素比它的父元素还高，那么它就会溢出父元素外面</p>
<p>当内层元素所有浮动后，则影响更大：</p>
<ul>
<li>背景不能显示</li>
<li>边框不能撑开</li>
<li>高度塌陷等<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1>方法1：脚底插入clear:both;<br>方法2：父元素BFC(ie8+)或haslayout(ie6/ie7)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 现代浏览器clearfix方案，不支持IE6/7 </span><br><span class="line">.clearfix:after &#123; display: table; content: &quot; &quot;; clear: both; &#125; </span><br><span class="line">​</span><br><span class="line">// 全浏览器通用的clearfix方案// 引入了zoom以支持IE6/7</span><br><span class="line">.clearfix:after &#123; display: table; content: &quot; &quot;; clear: both; &#125; </span><br><span class="line">.clearfix&#123; *zoom: 1; &#125; </span><br><span class="line">​</span><br><span class="line">// 全浏览器通用的clearfix方案【推荐】</span><br><span class="line">// 引入了zoom以支持IE6/7 </span><br><span class="line">// 同时加入:before以解决现代浏览器上边距折叠的问题 </span><br><span class="line">.clearfix:before,</span><br><span class="line"> .clearfix:after &#123; display: table; content: &quot; &quot;; &#125;</span><br><span class="line"> .clearfix:after &#123; clear: both; &#125; </span><br><span class="line">.clearfix&#123; *zoom: 1; &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>什么是CSS sprites？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%837/%E4%BB%80%E4%B9%88%E6%98%AFCSS-sprites%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ss sprites直译过来就是CSS精灵。通常被解释为“CSS图像拼合”或“CSS贴图定位”。其实就是通过将多个图片融合到一张图里面，然后通过CSS background背景定位技术技巧布局网页背景。</p><h1 id="为什么要使用CSS-sprites"><a href="#为什么要使用CSS-sprites" class="headerlink" title="为什么要使用CSS sprites"></a>为什么要使用CSS sprites</h1><p>这样做的好处也是显而易见的，因为图片多的话，会增加http的请求，无疑促使了网站性能的减低，特别是图片特别多的网站，如果能用css sprites降低图片数量，带来的将是速度的提升。 </p><a id="more"></a>

<h1 id="如何使用CSS-sprites"><a href="#如何使用CSS-sprites" class="headerlink" title="如何使用CSS sprites"></a>如何使用CSS sprites</h1><p>css sprites是什么通俗解释：CSS Sprites其实就是把网页中一些背景图片整合拼合成一张图片中，再利用DIV CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字能精确的定位出背景图片在布局盒子对象位置。<br><a href="https://www.jianshu.com/p/84d7aa090ba1" target="_blank" rel="noopener">前端必备 CSS Sprites雪碧图生成工具</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>HTML中dl、ul、ol用哪个比较好？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%835/HTML%E4%B8%ADdl%E3%80%81ul%E3%80%81ol%E7%94%A8%E5%93%AA%E4%B8%AA%E6%AF%94%E8%BE%83%E5%A5%BD%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ul，ol，dl标签是CSS网页布局中常用的列表元素。 列表将具有相似特征或先后顺序的内容按照从上到下的顺序排列起来。</p><h1 id="具体介绍"><a href="#具体介绍" class="headerlink" title="具体介绍"></a>具体介绍</h1><p>1.ul标签：无序列表始于 u l 标签。每个列表项始于l i标签，此列项目默认使用粗体圆点（典型的小黑圆圈）进行标记。</p><p>2.ol标签：有序列表始于ol标签，每个列表项始于li标签，列表项目使用数字进行标记。</p><a id="more"></a>


<p>3.dl标签：dl标签是定义列表，自定义列表不仅仅是一列项目，而是项目及其注释的组合。自定义列表以 dl 标签开始。每个自定义列表项以 dt 开始。每个自定义列表项的定义以 dd 开始。</p>
<h1 id="应用范围"><a href="#应用范围" class="headerlink" title="应用范围"></a>应用范围</h1><p>ul经常用来实现轮播的小按钮，下拉菜单的各种要用来排列的列表，多个a标签排列等，实用范围非常广。</p>
<p>ol因为它的有序属性，用的范围就比较小了，不是一定要用有序来排列的情况下，一般都是用ul。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用IconFont？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%835/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8IconFont%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="什么是IconFont"><a href="#什么是IconFont" class="headerlink" title="什么是IconFont?"></a>什么是IconFont?</h1><p>IconFont是阿里巴巴旗下的矢量图标库网站，通过搜索关键字可以获取前端开发所需的各类图标。</p><h1 id="如何使用IconFont？"><a href="#如何使用IconFont？" class="headerlink" title="如何使用IconFont？"></a>如何使用IconFont？</h1><p>step 1:百度iconfont,找到阿里巴巴矢量图标库官网,然后注册登录,或者用github登录也行,此步骤跳过; </p><p>step 2:找到图标管理-&gt;我的项目-&gt;然后新建项目: </p><a id="more"></a>


<p>step 3:项目新建完成后,往项目里添加我们要想使用的图标,找到图标库,搜索一个想要的图标,然后添加到购物车; </p>
<p>step 4:添加到购物车完成后,购物车徽章数字应该显示1了,点击右上角的购物车图标,选择添加至项目,选择我们刚刚创建的项目,确定; </p>
<p>step 5:接下来一部比较关键,将打包好的字体文件下载到本地添加到你的项目中,在项目中引用文件中的iconfont.css文件; </p>
<p>step 6:到了最后一步了,如何在项目中使用字体图标呢,其实很简单,创建一个i标签或者span标签,添加两个类名,一个固定的是iconfont,另一个是你想要的那个图标对应的类名:</p>
<blockquote>
<p>参考资料：<a href="https://blog.csdn.net/why12345678901/article/details/89633705" target="_blank" rel="noopener">如何使用IconFont</a></p>
</blockquote>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>title与h1、b与strong、i与em、img的alt与title、src与href有什么区别？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%835/title%E4%B8%8Eh1%E3%80%81b%E4%B8%8Estrong%E3%80%81i%E4%B8%8Eem%E3%80%81img%E7%9A%84alt%E4%B8%8Etitle%E3%80%81src%E4%B8%8Ehref%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="title与h1"><a href="#title与h1" class="headerlink" title="title与h1"></a>title与h1</h1><p><strong>title</strong>的权重高于H1,其适用性要比H1广。</p><h1 id="b与strong、i与em"><a href="#b与strong、i与em" class="headerlink" title="b与strong、i与em"></a>b与strong、i与em</h1><p>物理元素：b、i </p><p>逻辑元素：em、strong </p><p> 物理元素是告诉浏览器我应该以何种格式显示文字，逻辑元素告诉浏览器这些文字有怎么样的重要性。  </p><p><strong>结论</strong>：对于搜索引擎来说<strong>逻辑元素</strong>比物理元素要重视的多。 </p><h1 id="mg的alt与title"><a href="#mg的alt与title" class="headerlink" title="mg的alt与title"></a>mg的alt与title</h1><a id="more"></a>




<p>alt 用于图片没显示时在图片显示区域显示一个说明文字。  title 表示鼠标在图片上停留时，显示一个悬浮框，其中显示的文字。  </p>
<h1 id="src与href"><a href="#src与href" class="headerlink" title="src与href"></a>src与href</h1><p>src是source的缩写，src的内容是页面必不可少的一部分，是引入。src指向的内容会嵌入到文档中当前标签所在的位置。常用的有：img、script、iframe。<br>href是Hypertext Reference的缩写，表示超文本引用。用来建立当前元素和文档之间的链接。常用的有：link、a。</p>
<p><strong>结论</strong>：src用于替换当前元素；href用于在当前文档和引用资源之间建立联系。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>请解释一下CSS3的Flexbox（弹性盒布局模型）以及适用场景？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%835/%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8BCSS3%E7%9A%84Flexbox%EF%BC%88%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%EF%BC%89%E4%BB%A5%E5%8F%8A%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="Flexbox（弹性盒布局模型）"><a href="#Flexbox（弹性盒布局模型）" class="headerlink" title="Flexbox（弹性盒布局模型）"></a>Flexbox（弹性盒布局模型）</h1><p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>
<p>参考资料：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></p>
<h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。–Flex 布局，可以简便、完整、响应式地实现各种页面布局。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何理解vertical-align与line-height？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%835/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3vertical-align%E4%B8%8Eline-height%EF%BC%9F/</url>
    <content><![CDATA[<p>vertical-align 属性设置元素的垂直对齐方式。<br>line-height 属性设置行间的距离（行高）。</p>
<p>参考资料：<br><a href="https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/" target="_blank" rel="noopener">CSS深入理解vertical-align和line-height的基友关系</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>css可以绘制哪些常见的特殊形状？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%835/css%E5%8F%AF%E4%BB%A5%E7%BB%98%E5%88%B6%E5%93%AA%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E7%89%B9%E6%AE%8A%E5%BD%A2%E7%8A%B6%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="为什么使用CSS绘制图形"><a href="#为什么使用CSS绘制图形" class="headerlink" title="为什么使用CSS绘制图形"></a>为什么使用CSS绘制图形</h1><p>在写网页的时候，会遇到需要装饰一些几何图形的情况，用css就可以实现很多特殊形状的绘制。它的特点是放大后图像不会失真，档案的占用空间较小，也可以减少http的请求。 </p><h1 id="CSS绘制图形"><a href="#CSS绘制图形" class="headerlink" title="CSS绘制图形"></a>CSS绘制图形</h1><h2 id="圆形-椭圆形"><a href="#圆形-椭圆形" class="headerlink" title="圆形/椭圆形"></a>圆形/椭圆形</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.circle&#123;</span><br><span class="line"></span><br><span class="line">width:10rem;</span><br><span class="line"></span><br><span class="line">height:10rem;</span><br><span class="line"></span><br><span class="line">border-radius:50%;</span><br><span class="line"></span><br><span class="line">background:orange;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>

<p>椭圆形只需改变矩形的边长 </p>
<h2 id="三角形-梯形"><a href="#三角形-梯形" class="headerlink" title="三角形/梯形"></a>三角形/梯形</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.triangle&#123;</span><br><span class="line"></span><br><span class="line">margin-top:5rem;</span><br><span class="line"></span><br><span class="line">width:0;</span><br><span class="line"></span><br><span class="line">border-bottom:5rem solid#00a000;</span><br><span class="line"></span><br><span class="line">border-left:5rem solid transparent;</span><br><span class="line"></span><br><span class="line">border-right:5rem solid transparent;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>梯形只需设定width的值即可 </p>
<h2 id="平行四边形"><a href="#平行四边形" class="headerlink" title="平行四边形"></a><strong>平行四边形</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.parallelogram&#123;</span><br><span class="line"></span><br><span class="line">margin:5rem;</span><br><span class="line"></span><br><span class="line">width:10rem;</span><br><span class="line"></span><br><span class="line">height:5rem;</span><br><span class="line"></span><br><span class="line">transform:skew(30deg);</span><br><span class="line"></span><br><span class="line">background:orange;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>使用fixed的时候，在手机上查看是否会有问题，怎么解决？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%834/%E4%BD%BF%E7%94%A8fixed%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E4%BC%9A%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>苹果会对position: fixed的元素位置做调整 </p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>尽量避免在移动端开发中使用position: fixed，而是更多使用更现代的布局方式和position: absolute来实现类似需求。</p>
<h1 id="详细解析"><a href="#详细解析" class="headerlink" title="详细解析"></a>详细解析</h1><p><a href="https://blog.csdn.net/jnshu_it/article/details/86611525" target="_blank" rel="noopener">使用fixed的时候，在手机上查看是否会有问题，怎么解决</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何理解HTML结构的语义化？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%834/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3HTML%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%AD%E4%B9%89%E5%8C%96%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>HTML结构语义化，是最近几年才提出来的，以前的html结构，都是一堆的没有语义的冷冰冰的标签。最泛滥的就是div+css,以前的页面，一上来就是一堆的div+css, </p><p>为了改变这种这种状况，开发者们和官方提出了让HTML结构语义化的概念，并且官方w3c，也在HTML5给出了几个新的语义化的标签。 </p><a id="more"></a>

<h1 id="什么是语义化"><a href="#什么是语义化" class="headerlink" title="什么是语义化"></a>什么是语义化</h1><p>字面意思就是说根据我们所说的话，就能了解其中的含义。</p>
<p>语义化，故名思意，就是你写的HTml结构，是用相对应的有一定语义的英文字母（标签）表示的，标记的，因为HTML本身就是标记语言。不仅对自己来说，容易阅读，书写。别人看你的代码和结构也容易理解，甚至对一些不是做网页开发的人来说，也容易阅读。</p>
<h1 id="什么是HTML语义化"><a href="#什么是HTML语义化" class="headerlink" title="什么是HTML语义化"></a>什么是HTML语义化</h1><p>首先标签语义化是指HTML，不是CSS, 语义化标签只是HTML，CSS不存在语义化。HTML是标签，CSS是属性。</p>
<p>在最初html里标签的语义，我们看到table,就会知道这是列表，看到p，就知道这是段落，看到img知道是图片，看到input就知道这是一个表单，h1~h6是标题。 机器和人类相比笨多了，但是只要我们设定好程序，上面的标签的意思机器也能读懂。</p>
<p> 但是也有些是无语义化的如div—division并不能表示div标签里面内容的属性和表现样式</p>
<p> HTML 标签语义化是让大家直观的通过标签(markup)和属性(attribute)来知道其用途和作用。</p>
<h1 id="怎样判断标签是否语义化"><a href="#怎样判断标签是否语义化" class="headerlink" title="怎样判断标签是否语义化"></a>怎样判断标签是否语义化</h1><p>去掉样式，看网页结构是否组织良好有序，是否仍然有很好的可读性。 </p>
<h1 id="写HTML代码时应注意什么"><a href="#写HTML代码时应注意什么" class="headerlink" title="写HTML代码时应注意什么"></a>写HTML代码时应注意什么</h1><ol>
<li>尽可能少的使用无语义的标签div和span；</li>
<li>在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；</li>
<li>不要使用纯样式标签，如：b、font、u等，改用css设置。</li>
<li>需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；</li>
<li>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；</li>
<li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来 </li>
</ol>
<h1 id="实现HTML语义化好处有哪些"><a href="#实现HTML语义化好处有哪些" class="headerlink" title="实现HTML语义化好处有哪些"></a>实现HTML语义化好处有哪些</h1><ol>
<li>清晰的页面结构。去掉或样式丢失的时候,也能让页面呈现清晰的结构，增强页面的可读性。</li>
<li>支持更多的设备。屏幕阅读器会完全根据你的标记来“读”你的网页。更好的支持浏览器的阅读模式等。</li>
<li>有利于SEO(搜索引擎优化)。和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息，搜索引擎的爬虫也依赖于标记来确定上下文和各个关键字的权重。</li>
<li>便于团队开发和维护。在团队中大家都遵循同一个标准，可以减少很多差异化的东西，方便开发和维护，提高开发效率，甚至实现模块化开发。</li>
<li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://segmentfault.com/a/1190000017824723" target="_blank" rel="noopener">如何理解HTML结构的语义化？</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>常见的表单元素有哪些？各有什么属性？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%834/%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%90%84%E6%9C%89%E4%BB%80%E4%B9%88%E5%B1%9E%E6%80%A7%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="常用的表单元素"><a href="#常用的表单元素" class="headerlink" title="常用的表单元素"></a>常用的表单元素</h1><ol>
<li><p>form: 定义供用户输入的表单。</p>
</li>
<li><p>fieldset: 定义域。即输入区加有文字的边框。</p>
</li>
<li><p>legend：定义域的标题，即边框上的文字。</p>
</li>
<li><p>label：定义一个控制的标签。如输入框前的文字，用以关联用户的选择。</p>
</li>
<li><p>input: 定义输入域，常用。可设置type属性，从而具有不同功能。</p>
</li>
<li><p>textarea: 定义文本域(一个多行的输入控件)，默认可通过鼠标拖动调整大小。</p>
</li>
<li><p>button: 定义一个按钮。</p>
</li>
<li><p>select: 定义一个选择列表，即下拉列表。</p>
</li>
<li><p>option: 定义下拉列表中的选项。</p>
</li>
</ol><a id="more"></a>
<h1 id="表单元素的具体属性"><a href="#表单元素的具体属性" class="headerlink" title="表单元素的具体属性"></a>表单元素的具体属性</h1><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><p><code>&lt;form name=&quot;&quot; action=&quot;&quot; method=&quot;get&quot;&gt;……&lt;/form&gt;</code></p>
<p>name : 表单名称；action : 用来指定表单处理程序的位置（url）；method : 定义表单结果从浏览器传送到服务器的方式，默认为”get”（也可以是post）</p>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p><code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot; size=&quot;&quot;&gt;</code></p>
<p>name:控件名称；value:input控件默认文本值；size:input控件在页面中的显示宽度（必须是正整数）</p>
<p>input常用type属性如下：</p>
<ol>
<li>text：单行文本输入框，可以通过正整数的size控制框长度。</li>
<li>password：密码输入框。</li>
<li>radio：单选按钮，同一组的单选按钮必须要有相同的name。</li>
<li>checkbox：复选框，同一组的单选按钮必须要有相同的name。</li>
<li>button：普通按钮。</li>
<li>submit：提交按钮，每出现一次，一个 Submit 对象就会被创建。</li>
<li>reset：重置按钮，会重置当前表单中全部的内容。</li>
<li>image：图像形式的提交按钮，写法是“”。</li>
<li>hidden：隐藏域，隐藏字段对于用户是不可见的。</li>
<li>file：文件域，用于文件上传。</li>
</ol>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select size=&quot;&quot; multiple=&quot;multiple&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;option hidden&gt;选项1&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>size：下拉菜单的可见选项数；multiple：多选。</p>
<p>在最新的html5中，有一些表单的新增属性，多用于js，如</p>
<p>datalist : 定义填写一个input时，提示几个option用于提示。可通过input的list特性与此元素作关联。</p>
<p>output : 表示计算的结果。可通过for特性与其它能够影响运算的元素（如input）作关联。</p>
<hr>
<blockquote>
<p>版权声明：本文为CSDN博主「jnshu_it」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p>
<p>原文链接：<a href="https://blog.csdn.net/jnshu_it/article/details/85370309" target="_blank" rel="noopener">https://blog.csdn.net/jnshu_it/article/details/85370309</a></p>
</blockquote>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>哪些css属性可以设置百分比，其计算原则是什么？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%834/%E5%93%AA%E4%BA%9Bcss%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E8%AE%BE%E7%BD%AE%E7%99%BE%E5%88%86%E6%AF%94%EF%BC%8C%E5%85%B6%E8%AE%A1%E7%AE%97%E5%8E%9F%E5%88%99%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="定位属性"><a href="#定位属性" class="headerlink" title="定位属性"></a>定位属性</h1><p>top, right, bottom, left;<br>计算原则：基于父元素</p><h1 id="盒模型属性"><a href="#盒模型属性" class="headerlink" title="盒模型属性"></a>盒模型属性</h1><p>height, width, margin, padding; </p><p>height：基于包含它的块级对象的百分比高度<br>width：基于包含它的块级对象的百分比宽度<br>margin，padding：百分数是相对与父元素的width计算</p><a id="more"></a>


<h1 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h1><p>background-position; </p>
<p>background-position 的默认值是 0% 0%，在功能上相当于 top left。这就解释了背景图像为什么总是从元素内边距区的左上角开始平铺，除非您设置了不同的位置值。</p>
<h1 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h1><p>text-indent, line-height, vertical-align;</p>
<h1 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h1><p>font-size;</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>position定位有哪几种？各有什么特点？</title>
    <url>/2019/10/09/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%834/position%E5%AE%9A%E4%BD%8D%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%EF%BC%9F%E5%90%84%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h1><p>简介：生成相对定位的元素，相对于其正常位置进行定位。 </p><p>生成相对定位的元素，相对于其正常位置进行定位。元素的位置通过left、right、top、button属性进行规定，可以通过z-index进行层次分级。 元素仍保持其未定位前的形状，原本所占的空间仍将保留。（如果没有定位偏移量，对元素本身没有任何影响。所以可以设置父元素的position属性为relative，使其成为子元素的包含块）</p><a id="more"></a>

<h1 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h1><p>简介：生成绝对定位元素。使元素脱离文档流，并相对于其包含块进行定位，包含块可能是文档中的另一个元素或者是初始包含块，元素原先在正常文档流中所占的空间会会被后面元素占据； </p>
<p>元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框；绝对定位元素的包含块由离它最近的 ‘position’ 属性为 ‘absolute’、’relative’ 或者 ‘fixed’ 的祖先元素创建。只要父级元素设置了position并且不是static（默认既是static），那么设定了absolute的子元素即以此为包含块（最近的）。如果都没有定义，那么就相对于整个文档body定位（注意不是相对于浏览器窗口定位） </p>
<h1 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h1><p>简介：生成绝对定位元素，相对于浏览器窗口的定位。 </p>
<p>通常配合z-index一起来使用。比如说网页上悬挂的聊天图标或者广告就是用fixed</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>手机分辨率和网页中的px是一回事吗？</title>
    <url>/2019/10/08/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%833/%E6%89%8B%E6%9C%BA%E5%88%86%E8%BE%A8%E7%8E%87%E5%92%8C%E7%BD%91%E9%A1%B5%E4%B8%AD%E7%9A%84px%E6%98%AF%E4%B8%80%E5%9B%9E%E4%BA%8B%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h1><p>像素即px，是画面中最小的点（单位色块）。像素的大小是没有固定长度值的，不同设备上1个单位像素色块的大小是不一样的。 </p><p>px是一个相对单位，而且在特定设备上总是一个近似值（原则是尽量接近参考像素）。 </p><h1 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h1><p>分辨率=画面水平方向的像素值 * 画面垂直方向的像素值。</p><p>分辨率可以分为两方面：屏幕分辨率和图像分辨率。</p><a id="more"></a>



<ol>
<li><p>屏幕分辨率：     </p>
<p>例如，屏幕分辨率是1024×768，也就是说设备屏幕的水平方向上有1024个像素点，垂直方向上有768个像素点。像素的大小是没有固定长度的，不同设备上一个单位像素色块的大小是不一样的。    例如，尺寸面积大小相同的两块屏幕，分辨率大小可以是不一样的，分辨率高的屏幕上面像素点（色块）就多，所以屏幕内可以展示的画面就更细致，单个色块面积更小。而分辨率低的屏幕上像素点（色块）更少，单个像素面积更大，可以显示的画面就没那么细致。</p>
</li>
<li><p>图像分辨率：    </p>
<p>例如，一张图片分辨率是500x200，也就是说这张图片在屏幕上按1:1放大时，水平方向有500个像素点（色块），垂直方向有200个像素点（色块）。    在同一台设备上，图片分辨率越高，这张图片1:1放大时，图片面积越大；图片分辨率越低，这张图片1:1缩放时，图片面积越小。（可以理解为图片的像素点和屏幕的像素点是一个一个对应的）。    但是，在屏幕上把图片超过100%放大时，为什么图片上像素色块也变的越大，其实是设备通过算法对图像进行了像素补足，我们把图片放的很大后看到的一块一块的方格子，虽然理解为一个图像像素，但是其实是已经补充了很多个屏幕像素；同理，把图片小于100%缩小时，也是通过算法将图片像素进行减少。</p>
</li>
</ol>
<h1 id="移动设备分辨率"><a href="#移动设备分辨率" class="headerlink" title="移动设备分辨率"></a>移动设备分辨率</h1><p>说到移动设备分辨率，这里先提另一个单位dpi(dot per inch)<br>dpi/ppi是表示一个每inch多少个物理像素dot的单位<br>在最开始是160dpi/ppi<br>后来因为技术的提高，为了追求高清屏幕，有了320dpi/ppi以上等等的屏幕<br>下面继续说移动设备分辨率<br>我们可以理解分辨率就是长宽分别有多少个物理像素dot<br>但是设备大小就那么大，所以同样大小的设备，分辨率越高，物理像素堆得越多，屏幕越清晰，也就是dpi越高</p>
<h1 id="网页中的px（css像素）"><a href="#网页中的px（css像素）" class="headerlink" title="网页中的px（css像素）"></a>网页中的px（css像素）</h1><p>在桌面浏览器：1px（下面我们读成‘css像素’）代表1个物理像素，也就是1css像素 = 1物理像素<br>没有加meta viewport标签时候：移动端viewport宽度为980px或者1024px，这时候1css像素不确定是几个物理像素（根据分辨率来算）<br>写个20px的文字看看效果（见演示）<br>在加了meta viewport标签以后呢？我们引入另外一个单位：密度独立像素dp/dip<br>dp/dip是在不同设备都显示为同一大小的单位（见演示）<br>简单理解，在使用了<code>&lt;xmp&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&lt;/xmp&gt;</code>之后，所有1px = 1dp/dip<br>添加meta标签后20px的文字（见演示）<br>设备的独立像素都是可以查到的</p>
<h1 id="UI口中的px像素"><a href="#UI口中的px像素" class="headerlink" title="UI口中的px像素"></a>UI口中的px像素</h1><p>UI图中的像素，也就是psd中我们量出来的像素，比如说任务中psd图的宽度为750px或者640px</p>
<p>UI口中的像素是移动设备分辨率 </p>
<p><strong>注意事项：</strong> 直接按照UI图上px大小写，会偏大。 因为UI图的px和css中的px不是一个单位，一般来说UI图中大小除以2写在css里</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>手机分辨率和网页中的px不相同，px是一个相对单位，而且在特定设备上总是一个近似值（原则是尽量接近参考像素）。 </p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/jnshu_it/article/details/80055739" target="_blank" rel="noopener">手机分辨率和网页中的px是一回事吗？</a></p>
<p><a href="https://www.zhihu.com/question/21149600" target="_blank" rel="noopener">分辨率和像素是什么关系？</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>什么时候用margin好，什么时候用padding好？</title>
    <url>/2019/10/08/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%833/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8margin%E5%A5%BD%EF%BC%8C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8padding%E5%A5%BD%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>margin始终是透明的；margin是用来隔开元素与元素的间距；</p>
<p>padding是用来隔开元素与内容的间隔。  </p>
<h1 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h1><p>margin用于<strong>布局</strong>分开元素使元素与元素互不相干；  </p>
<p>padding用于<strong>元素与内容之间</strong>的间隔，让内容（文字）与（包裹）元素之间有一段“呼吸距离”，还可以调整边框与内容的距离。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>css有哪些选择器，优先级如何计算？</title>
    <url>/2019/10/07/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%833/css%E6%9C%89%E5%93%AA%E4%BA%9B%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%8C%E4%BC%98%E5%85%88%E7%BA%A7%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>类别选择器、标签选择器、id选择器、通用选择器、后代选择器、子选择器、伪类选择器、群组选择器、相邻同胞选择器  </p><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><ol>
<li><p>在属性后面使用！important会覆盖页面内任何位置定义的元素样式。 </p>
</li>
<li><p>作为style属性写在元素内的样式 </p>
</li>
<li><p>id选择器  </p>
</li>
<li><p>类选择器  </p>
</li>
<li><p>标签选择器  </p>
</li>
<li><p>通配符选择器 </p>
</li>
<li><p>浏览器自定义或子元素集成父类的样式  </p>
</li>
</ol><a id="more"></a>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/b69de6742357" target="_blank" rel="noopener">简书</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何进行自适应网页设计？</title>
    <url>/2019/10/07/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%833/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%87%AA%E9%80%82%E5%BA%94%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="什么是自适应网页设计"><a href="#什么是自适应网页设计" class="headerlink" title="什么是自适应网页设计"></a>什么是自适应网页设计</h1><p>“自适应网页设计”的概念，什么是自适应网页设计，即可以自动识别屏幕宽度、并做出相应调整的网页设计。  </p><h1 id="如何实现自适应网页设计"><a href="#如何实现自适应网页设计" class="headerlink" title="如何实现自适应网页设计"></a>如何实现自适应网页设计</h1><ol>
<li>允许网页宽度自动调整：在网页代码的头部加入一行viewport元标签，宽度为设备宽度，缩放比例为一。 </li>
<li>不使用绝对宽度：可以使用百分比宽度，视窗宽度等，或者width:auto;  </li>
<li>使用相对大小的字体：em、rem  </li>
<li>流动布局：各个区块的位置是浮动的，不是固定不变的 </li>
<li>图片自适应：图片自动缩放 img { max-width: 100%;} </li>
<li>选择加载css：自适应网页设计”的核心，就是CSS3引入的Media Query模块。它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。</li>
<li>css中的@media媒体查询规则：同一个CSS文件中，也可以根据不同的屏幕分辨率，选择应用不同的CSS规则。  </li>
</ol><a id="more"></a>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhidao.baidu.com/question/245161275053820324.html?fr=iks&amp;word=%25%2Cvw%2Cwh%2Cvm%B5%A5%CE%BB&amp;ie=gbk" target="_blank" rel="noopener">自适应网页设计</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>px、em、rem、%、vw、wh、vm等单位有什么区别？</title>
    <url>/2019/10/07/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%833/px%E3%80%81em%E3%80%81rem%E3%80%81-%E3%80%81vw%E3%80%81wh%E3%80%81vm%E7%AD%89%E5%8D%95%E4%BD%8D%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<ol>
<li>px：绝对单位，页面按精确像素展示</li>
<li>em：相对单位，基准点为父级元素字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。</li>
<li>rem：相对单位，为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。</li>
<li>%：相对单位，相对于父级元素的百分比宽度</li>
<li>vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。<br>vh：viewpoint height，视窗高度，1vh等于视窗高度的1%。</li>
<li>vm；css3单位，相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vm<br>举个例子：浏览器高度900px，宽度1200px，取最小的浏览器高度，1 vm = 900px/100 = 9 px。</li>
</ol>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何利用PS切图以及从UI图中获取所需信息？</title>
    <url>/2019/10/07/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%833/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8PS%E5%88%87%E5%9B%BE%E4%BB%A5%E5%8F%8A%E4%BB%8EUI%E5%9B%BE%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%89%80%E9%9C%80%E4%BF%A1%E6%81%AF%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="PS切图"><a href="#PS切图" class="headerlink" title="PS切图"></a>PS切图</h1><h2 id="切片工具"><a href="#切片工具" class="headerlink" title="切片工具"></a>切片工具</h2><p>使用PS中的切片工具进行所需图片的切割，然后点击文件选项卡，选择其中存储为web所用格式即可完成ps切图。</p><h2 id="一键切图"><a href="#一键切图" class="headerlink" title="一键切图"></a>一键切图</h2><p>下载一键切图工具并载入动作，用移动工具选择图层，按F2一键切图。最后选择保存为web所需格式，注意保存为png格式防止出现兼容性问题。  </p><p><strong>下载链接及教程：</strong> <a href="https://www.cnblogs.com/rangzf/p/3279848.html" target="_blank" rel="noopener">前端高效开发之“一键切图”</a></p><a id="more"></a>


<h1 id="获取UI中的信息"><a href="#获取UI中的信息" class="headerlink" title="获取UI中的信息"></a>获取UI中的信息</h1><ol>
<li>各部分之间的距离</li>
<li>文字的字体，字号颜色</li>
<li>背景的颜色（使用取色器）</li>
</ol>
<p><strong>注意事项</strong>：UI图的px和css中的px不是一个单位，一般来说UI图中大小除以2写在css里</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何将代码部署至自己的服务器？</title>
    <url>/2019/10/07/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%832/%E5%A6%82%E4%BD%95%E5%B0%86%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%E8%87%B3%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="1-买一个服务器"><a href="#1-买一个服务器" class="headerlink" title="1. 买一个服务器"></a>1. 买一个服务器</h1><h1 id="2-下载filezilla"><a href="#2-下载filezilla" class="headerlink" title="2. 下载filezilla"></a>2. 下载filezilla</h1><h1 id="3-连接自己的服务器，将对应代码上传（全中文页面不再赘述）"><a href="#3-连接自己的服务器，将对应代码上传（全中文页面不再赘述）" class="headerlink" title="3. 连接自己的服务器，将对应代码上传（全中文页面不再赘述）"></a>3. 连接自己的服务器，将对应代码上传（全中文页面不再赘述）</h1>]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何配置nginx，实现在手机上查看页面？</title>
    <url>/2019/10/07/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%832/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEnginx%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E6%9F%A5%E7%9C%8B%E9%A1%B5%E9%9D%A2%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="什么是nginx？"><a href="#什么是nginx？" class="headerlink" title="什么是nginx？"></a>什么是nginx？</h1><p>Nginx（发音同engine x）是异步框架的网页服务器，也可以用作反向代理、负载平衡器和HTTP缓存。该软件由伊戈尔·赛索耶夫创建并于2004年首次公开发布。2011年成立同名公司以提供支持。2019年3月11日，Nginx公司被F5 Networks以6.7亿美元收购。</p><p>Nginx是免费的开源软件，根据类BSD许可证的条款发布。一大部分Web服务器使用Nginx，通常作为负载均衡器。</p><a id="more"></a>

<h1 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h1><h2 id="正向代理简介"><a href="#正向代理简介" class="headerlink" title="正向代理简介"></a>正向代理简介</h2><p>一般情况下，如果没有特别说明，代理技术默认说的是正向代理技术。关于正向代理的概念如下：</p>
<p>正向代理(forward)是一个位于客户端【用户A】和原始服务器(origin server)【服务器B】之间的服务器【代理服务器Z】，为了从原始服务器取得内容，用户A向代理服务器Z发送一个请求并指定目标(服务器B)，然后代理服务器Z向服务器B转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。如下图</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hc2sucWNsb3VkaW1nLmNvbS9odHRwLXNhdmUveWVoZS0xMDEwNzkyL3ZyM3B6M292emgucG5n?x-oss-process=image/format,png" alt="img"> </p>
<p>从上面的概念中，我们看出，文中所谓的正向代理就是代理服务器替代访问方【用户A】去访问目标服务器【服务器B】 ，</p>
<p><strong>总结：代理服务器代替了用户A</strong></p>
<h2 id="正向代理的意义"><a href="#正向代理的意义" class="headerlink" title="正向代理的意义"></a>正向代理的意义</h2><p><strong>为什么要用通过代理服务器去访问服务器B，而不是用户直接访问？</strong></p>
<ul>
<li>访问本无法访问的服务器B</li>
<li>加速访问服务器B</li>
<li>Cache（缓存） 作用</li>
<li>客户端访问授权（为什么我们无法直接访问谷歌）</li>
<li>隐藏访问者的行踪（服务器B只知道代理服务器Z访问了它）</li>
</ul>
<h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><h2 id="反向代理简介"><a href="#反向代理简介" class="headerlink" title="反向代理简介"></a>反向代理简介</h2><p>反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端。</p>
<p><strong>总结：代理服务器代替了服务器B</strong></p>
<h2 id="反向代理的意义"><a href="#反向代理的意义" class="headerlink" title="反向代理的意义"></a>反向代理的意义</h2><ol>
<li><p>保护和隐藏原始资源服务器<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hc2sucWNsb3VkaW1nLmNvbS9odHRwLXNhdmUveWVoZS0xMDEwNzkyL2xiNmswZzY4ZzUucG5n?x-oss-process=image/format,png" alt="img"> </p>
<p>用户A始终认为它访问的是原始服务器B而不是代理服务器Z，但实用际上反向代理服务器接受用户A的应答，从原始资源服务器B中取得用户A的需求资源，然后发送给用户A。由于防火墙的作用，只允许代理服务器Z访问原始资源服务器B。尽管在这个虚拟的环境下，防火墙和反向代理的共同作用保护了原始资源服务器B，但用户A并不知情。 </p>
</li>
</ol>
<ol start="2">
<li><p>负载均衡<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hc2sucWNsb3VkaW1nLmNvbS9odHRwLXNhdmUveWVoZS0xMDEwNzkyL21kMjFlbzFpenMucG5n?x-oss-process=image/format,png" alt="img"></p>
<p>当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器B的时候，让不同的代理服务器Z（x）去应答不同的用户，然后发送不同用户需要的资源。</p>
<p>当然反向代理服务器像正向代理服务器一样拥有CACHE的作用，它可以缓存原始资源服务器B的资源，而不是每次都要向原始资源服务器B请求数据，特别是一些静态的数据，比如图片和文件，如果这些反向代理服务器能够做到和用户X来自同一个网络，那么用户X访问反向代理服务器X，就会得到很高质量的速度。这正是<a href="https://cloud.tencent.com/product/cdn?from=10680" target="_blank" rel="noopener">CDN</a>技术的核心。 </p>
</li>
</ol>
<h1 id="如何配置nginx，实现在手机上查看页面？"><a href="#如何配置nginx，实现在手机上查看页面？" class="headerlink" title="如何配置nginx，实现在手机上查看页面？"></a>如何配置nginx，实现在手机上查看页面？</h1><p>Nginx的配置文件是文件夹中的conf文件下的nginx.conf，其实配置文件默认不修改也是可有用的；</p>
<p>如果你通过浏览器输入localhost出现的页面即为文件夹下HTML文件中的index.html；所以你可以将你想要检测的产品放到HTML文件夹中，并将原本的index.html文件给删了，这个时候打开网页输入localhost，使用ctrl+F5清下浏览器缓存即出现你产品中的index.html(产品的首页都会命名为index.html）页面，然后进行一系列测试看看是否OK；</p>
<p>  如果要使用自己文件夹中的文件测试，需要更改Nginx的配置文件是文件夹中的conf文件下的nginx.conf，修改三处root地址为自己的文件夹所在地址，第一处改为 D:\home\www，第二处改为 /home/www,第三处改为/home/www。</p>
<p><strong>注意事项：</strong>  左斜杠/与右斜杠\的区别不要打错了！</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://cloud.tencent.com/developer/article/1053668" target="_blank" rel="noopener">图解正向代理、反向代理、透明代理</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Nginx#cite_note-8" target="_blank" rel="noopener">维基百科</a></li>
</ul>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何利用github搭建自己的个人网站？</title>
    <url>/2019/10/07/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%832/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="使用github搭建个人网站"><a href="#使用github搭建个人网站" class="headerlink" title="使用github搭建个人网站"></a>使用github搭建个人网站</h1><ol>
<li>在github上搭建网站 即username.github.io（username是你的github用户名）</li>
<li>把自己的域名（如zhangsan.com）绑定到username.github.io上</li>
</ol><p>具体操作：<a href="https://blog.csdn.net/u012075670/article/details/54581015" target="_blank" rel="noopener">如何用github搭建自己的个人网站</a></p><h1 id="用Hexo-Github-搭建个人网站"><a href="#用Hexo-Github-搭建个人网站" class="headerlink" title="用Hexo+Github 搭建个人网站"></a>用Hexo+Github 搭建个人网站</h1><a id="more"></a>

<ol>
<li>搭建环境准备（包括node.js和git环境，gitHub账户的配置）</li>
<li>安装Hexo</li>
<li>配置Hexo</li>
<li>怎样将Hexo与github page 联系起来</li>
<li>怎样发布文章</li>
<li>主题 推荐</li>
<li>主题Net的简单配置</li>
<li>添加sitemap和feed插件</li>
<li>添加404 公益页面</li>
</ol>
<p>具体操作：<a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">手把手教你用Hexo+Github 搭建属于自己的博客</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>svn和git有什么区别?</title>
    <url>/2019/10/07/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%832/svn%E5%92%8Cgit%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="svn与git简介"><a href="#svn与git简介" class="headerlink" title="svn与git简介"></a>svn与git简介</h1><h2 id="SVN-（集中式版本控制系统）"><a href="#SVN-（集中式版本控制系统）" class="headerlink" title="SVN （集中式版本控制系统）"></a><strong>SVN</strong> （集中式版本控制系统）</h2><p>SVN是Subversion的简称，是一个开放源代码的版本控制系统,支持大多数常见的操作系统。作为一个开源的版本控制系统,Subversion管理着随时间改变的数据。这些数据放置在一个中央资料档案库(repository)中。这个档案库很像一个普通的文件服务器,不过它会记住每一次文件的变动。这样你就可以把档案恢复到旧的版本,或是浏览文件的变动历史。Subversion是一个通用的系统,可用来管理任何类型的文件,其中包括了程序源码。</p><a id="more"></a>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a><strong>工作流程</strong></h3><p><a href="http://baike.baidu.com/view/3794518.htm" target="_blank" rel="noopener">集中式管理</a>的工作流程如下图：</p>
<p>   <img src="https://img-blog.csdn.net/20160129151818496" alt="img"></p>
<p>集中式代码管理的核心是<a href="http://baike.baidu.com/view/899.htm" target="_blank" rel="noopener">服务器</a>，所有开发者在开始新一天的工作之前必须从服务器获取代码，然后开发，最后解决冲突，提交。所有的版本信息都放在服务器上。如果脱离了服务器，开发者基本上可以说是无法工作的。下面举例说明：</p>
<p>开始新一天的工作：</p>
<ol>
<li>从服务器下载项目组最新代码。</li>
<li>进入自己的分支，进行工作，每隔一个小时向服务器自己的分支提交一次代码（很多人都有这个习惯。因为有时候自己对代码改来改去，最后又想还原到前一个小时的版本，或者看看前一个小时自己修改了哪些代码，就需要这样做了）。</li>
<li>下班时间快到了，把自己的分支合并到服务器主分支上，一天的工作完成，并反映给服务器。</li>
</ol>
<h3 id="SVN属于集中化的版本控制系统"><a href="#SVN属于集中化的版本控制系统" class="headerlink" title="SVN属于集中化的版本控制系统"></a>SVN属于集中化的版本控制系统</h3><p>​     这种做法带来了许多好处，特别是相较于老式的本地VCS来说。现在，每个人都可以一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限。<br>事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的单点故障。若是宕机一小时，那么在这一小时内，谁都无法提交更新、还原、对比等，也就无法协同工作。如果中央服务器的磁盘发生故障，并且没做过备份或者备份得不够及时的话，还会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录，被客户端提取出来的某些快照数据除外，但这样的话依然是个问题，你不能保证所有的数据都已经有人提取出来。<br>Subversion原理上只关心文件内容的具体差异。每次记录有哪些文件作了更新，以及都更新了哪些行的什么内容。</p>
<h3 id="Subversion的特点"><a href="#Subversion的特点" class="headerlink" title="Subversion的特点"></a>Subversion的特点</h3><ol>
<li>每个版本库有唯一的URL（官方地址），每个用户都从这个地址获取代码和数据；</li>
<li>获取代码的更新，也只能连接到这个唯一的版本库，同步以取得最新数据；</li>
<li>提交必须有网络连接（非本地版本库）；</li>
<li>提交需要授权，如果没有写权限，提交会失败；</li>
<li>提交并非每次都能够成功。如果有其他人先于你提交，会提示“改动基于过时的版本，先更新再提交”… 诸如此类；</li>
<li>冲突解决是一个提交速度的竞赛：手快者，先提交，平安无事；手慢者，后提交，可能遇到麻烦的冲突解决。</li>
</ol>
<h2 id="GIT（分布式版本控制系统）"><a href="#GIT（分布式版本控制系统）" class="headerlink" title="GIT（分布式版本控制系统）"></a>GIT（分布式版本控制系统）</h2><p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目</p>
<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>
<p>分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库.</p>
<h3 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a><strong>工作流程</strong></h3><p>下图是经典的git开发过程。</p>
<p><img src="https://img-blog.csdn.net/20160129151822850" alt="img"></p>
<h3 id="Git的功能特性"><a href="#Git的功能特性" class="headerlink" title="Git的功能特性"></a>Git的功能特性</h3><p>从<strong>一般开发者</strong>的角度来看，git有以下功能：</p>
<ol>
<li>从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。</li>
<li>在自己的机器上根据不同的开发目的，创建分支，修改代码。</li>
<li>在单机上自己创建的分支上提交代码。</li>
<li>在单机上合并分支。</li>
<li>把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。</li>
<li>生成补丁（patch），把补丁发送给主开发者。</li>
<li>看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。</li>
<li>一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</li>
</ol>
<p>从<strong>主开发者</strong>的角度（假设主开发者不用开发代码）看，git有以下功能：</p>
<ol>
<li><p>查看邮件或者通过其它方式查看一般开发者的提交状态。</p>
</li>
<li><p>打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。</p>
</li>
<li><p>向公共服务器提交结果，然后通知所有开发人员。 </p>
</li>
</ol>
<h3 id="Git属于分布式的版本控制系统"><a href="#Git属于分布式的版本控制系统" class="headerlink" title="Git属于分布式的版本控制系统"></a>Git属于分布式的版本控制系统</h3><p>​    自2005年诞生于以来，Git日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目，它还有着令人难以置信的非线性分支管理系统，可以应付各种复杂的项目开发需求。</p>
<p>   与SVN不同，Git记录版本历史只关心文件数据的整体是否发生变化。Git并不保存文件内容前后变化的差异数据。实际上，Git更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git不会再次保存，而只对上次保存的快照作一连接。</p>
<h3 id="Git特点"><a href="#Git特点" class="headerlink" title="Git特点"></a>Git特点</h3><ol>
<li>Git中每个克隆(clone)的版本库都是平等的。你可以从任何一个版本库的克隆来创建属于你自己的版本库，同时你的版本库也可以作为源提供给他人，只要你愿意。</li>
<li>Git的每一次提取操作，实际上都是一次对代码仓库的完整备份。提交完全在本地完成，无须别人给你授权，你的版本库你作主，并且提交总是会成功。</li>
<li>甚至基于旧版本的改动也可以成功提交，提交会基于旧的版本创建一个新的分支。</li>
<li>Git的提交不会被打断，直到你的工作完全满意了，PUSH给他人或者他人PULL你的版本库，合并会发生在PULL和PUSH过程中，不能自动解决的冲突会提示您手工完成。</li>
<li>冲突解决不再像是SVN一样的提交竞赛，而是在需要的时候才进行合并和冲突解决。</li>
</ol>
<h1 id="svn和git的区别"><a href="#svn和git的区别" class="headerlink" title="svn和git的区别"></a>svn和git的区别</h1><ol>
<li><p>SVN属于集中化的版本控制系统，有个不太精确的比喻:SVN = 版本控制+ 备份服务器SVN使用起来有点像是档案仓库的感觉，支持并行读写文件，支持代码的版本化管理，功能包括取出、导入、更新、分支、改名、还原、合并等。</p>
<p>Git是一个分布式版本控制系统，操作命令包括：clone，pull，push,branch ,merge ,push,rebase，Git擅长的是程序代码的版本化管理。</p>
</li>
<li><p>GIT跟SVN一样有自己的集中式版本库或服务器。但，GIT更倾向于被使用于分布式模式，也就是每个开发人员从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。</p>
<p>可以这样说，如果你被困在一个不能连接网络的地方时，就像在飞机上，地下室，电梯里等，你仍然能够提交文件，查看历史版本记录，创建项目分支，等。对一些人来说，这好像没多大用处，但当你突然遇到没有网络的环境时，这个将解决你的大麻烦。</p>
</li>
<li><p>GIT把内容按元数据方式存储，而SVN是按文件所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</p>
<p>如果你把.git目录的体积大小跟.svn比较，你会发现它们差距很大。因为,.git目录是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。</p>
</li>
<li><p>分支在SVN中一点不特别，就是版本库中的另外的一个目录。如果你想知道是否合并了一个分支，你需要手工运行像这样的命令svn propget svn:mergeinfo，来确认代码是否被合并。</p>
<p>然而，处理GIT的分支却是相当的简单和有趣。你可以从同一个工作目录下快速的在几个分支间切换。你很容易发现未被合并的分支，你能简单而快捷的合并这些文件。</p>
</li>
<li><p>GIT没有一个全局的版本号，而SVN有目前为止这是跟SVN相比GIT缺少的最大的一个特征。你也知道，SVN的版本号实际是任何一个相应时间的源代码快照。我认为它是从CVS进化到SVN的最大的一个突破。因为GIT和SVN从概念上就不同，我不知道GIT里是什么特征与之对应。如果你有任何的线索，请在评论里奉献出来与大家共享。</p>
</li>
<li><p>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 </p>
</li>
</ol>
<h1 id="svn和git的优缺点"><a href="#svn和git的优缺点" class="headerlink" title="svn和git的优缺点"></a>svn和git的优缺点</h1><h2 id="SVN-的优缺点"><a href="#SVN-的优缺点" class="headerlink" title="SVN 的优缺点"></a>SVN 的优缺点</h2><p>​      SVN对中文支持好，操作简单，使用没有难度，美工人员，产品人员，测试人员，实施人员都可轻松上手。使用界面统一，功能完善，操作方便。</p>
<h2 id="Git的优缺点"><a href="#Git的优缺点" class="headerlink" title="Git的优缺点"></a>Git的优缺点</h2><p>​      对程序源代码进行差异化的版本管理，代码库占极少的空间。易于代码的分支化管理。不支持中文，图形界面支持差，使用难度大。不易推广。 </p>
<h1 id="svn和git适用范围的不同"><a href="#svn和git适用范围的不同" class="headerlink" title="svn和git适用范围的不同"></a>svn和git适用范围的不同</h1><ol>
<li><p>适用对象不同。Git适用于参与开源项目的开发者。他们由于水平高，更在乎的是效率而不是易用性。SVN则不同，它适合普通的公司开发团队。使用起来更加容易。</p>
</li>
<li><p>使用的场合不同。Git适用于通过Internet，有多个开发角色的单个项目开发，SVN适合企业内部由项目经理统一协调的多个并行项目的开发。</p>
</li>
<li><p>权限管理策略不同。Git没有严格的权限管理控制，只要有帐号，就可以导出、导入代码，甚至执行回退操作。SVN则有严格的权限管理，可以按组、按个人进行针对某个子目录的权限控制。区分读、写权限。更严格的，不支持回退操作。保证代码永远可以追踪。</p>
</li>
<li><p>分支(branch)的使用范围不一样。Git中，你只能针对整个仓库作branch,而且一旦删除，便无法恢复。而SVN中，branch可以针对任何子目录，它本质上是一个拷贝操作。所以，可以建立非常多、层次性的branch,并且，在不需要时将其删除，而以后需要时只要checkout老的SVN版本就可以了。</p>
</li>
<li><p>基于第三点，Git适用于单纯的软件项目，典型的就是一些开源项目，比如Linux内核、busybox等。相反，SVN擅长多项目管理。比如，你可以在一个SVN仓库中存放一个手机项目的bsp/设计文档/文件系统/应用程序/自动化编译脚本，或者在一个SVN中存放5款手机项目的文件系统。git中必须建立n(项目数)*m（组件数）个仓库。SVN中只需要最多n或者m个就可以了。</p>
</li>
<li><p><strong>Git使用128位ID作为版本号</strong>，而且checkout时要注明是哪个branch,而SVN使用一个递增的序列号作为全局唯一的版本号，更加简明易懂。虽然可以使用gittag来建立一些文字化的别名，但是毕竟那只是针对特殊版本。</p>
</li>
<li>可跟踪性，git的典型开发过程为：建立分支，进行开发，提交到本地master，删除分支。这样做的后果是以前的修改细节会丢失。而在SVN下做同样的事情，不会丢失任何细节。这里是一个有趣的链接，表明了git下典型的工作方式：（以master为核心，不断创建新branch,删除旧branch)</li>
<li>局部更新，局部还原。SVN由于是在每个文件夹建立一个.svn文件夹来实现管理，所以可以很简单实现局部更新或者还原。假如你只希望更新某些部分，则svn可以很好实现。同时代码写错了，同时可以很好实现局部还原，当然git也可以通过历史版本还原，但是无法简单地实现局部还原。</li>
</ol>
<h1 id="SVN-和-Git-哪个更适用于项目管理？"><a href="#SVN-和-Git-哪个更适用于项目管理？" class="headerlink" title="SVN 和 Git 哪个更适用于项目管理？"></a>SVN 和 Git 哪个更适用于项目管理？</h1><p>​      首先说一下，我是一个研发团队的项目经理，SVN和Git我都用过，SVN更适用于项目管理， Git仅适用于代码管理。</p>
<p>​     一个研发队伍的成员正常包括：需求分析、设计、美工、程序员、测试、实施、运维，每个成员在工作中都有产出物，  包括了文档、设计代码、程序代码，这些都需要按项目集中进行管理的。SVN能清楚的按目录进行分类管理， 使项目组的管理处于有序高效的状态。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> <strong>总之，公司的开发团队在进行的项目开发管理时，svn是更好的选择，团队成员共同维护公司的中心版本。</strong></p>
<p><strong>若是开源项目，则git更加适合，每个人都可以维护自己专属的版本，同时有github开源社区支持。</strong></p>
<h1 id="参考和转载"><a href="#参考和转载" class="headerlink" title="参考和转载"></a>参考和转载</h1><p>伯乐在线:<a href="http://blog.jobbole.com/31444/" target="_blank" rel="noopener">http://blog.jobbole.com/31444/</a></p>
<p>百度百科:<a href="http://baike.baidu.com/" target="_blank" rel="noopener">http://baike.baidu.com</a></p>
<p>marko39:<a href="http://jingyan.baidu.com/article/676629976401a154d51b8430.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/676629976401a154d51b8430.html</a></p>
<p>码迷网:<a href="http://www.mamicode.com/info-detail-107111.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-107111.htm</a></p>
<p>百度百科:<a href="http://baike.baidu.com/" target="_blank" rel="noopener">http://baike.baidu.com</a></p>
<p>marko39:<a href="http://jingyan.baidu.com/article/676629976401a154d51b8430.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/676629976401a154d51b8430.html</a></p>
<p>码迷网:<a href="http://www.mamicode.com/info-detail-107111.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-107111.htm</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用git将代码上传至github?</title>
    <url>/2019/10/07/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%832/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git%E5%B0%86%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%E8%87%B3github/</url>
    <content><![CDATA[<blockquote>
<p>代码开发在大多数情况下不是一个人的工作，那么不同人之间如何统一代码共同进行项目开发呢。git 是一款分布式版本控制系统，本文简要介绍了git的基本应用。</p>
</blockquote>
<a id="more"></a>
<h1 id="git是什么？"><a href="#git是什么？" class="headerlink" title="git是什么？"></a>git是什么？</h1><p>Git是一款分布式版本控制系统 </p>
<h1 id="github是什么？"><a href="#github是什么？" class="headerlink" title="github是什么？"></a>github是什么？</h1><p>GitHub是一款免费的远程仓库 </p>
<h1 id="如何使用git将代码上传至github？"><a href="#如何使用git将代码上传至github？" class="headerlink" title="如何使用git将代码上传至github？"></a>如何使用git将代码上传至github？</h1><p>关于如何安装git，如何使用git将代码上传至github，廖雪峰的教程已经相当完善且浅显易懂了，我在此不再赘述。</p>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000" target="_blank" rel="noopener">廖雪峰的git教程</a></p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何用TortoiseSVN将项目代码提交到SVN?</title>
    <url>/2019/10/07/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%832/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8svn%E5%B0%86%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%E8%87%B3github/</url>
    <content><![CDATA[<blockquote>
<p>代码开发在大多数情况下不是一个人的工作，那么不同人之间如何统一代码共同进行项目开发呢。Subversion 是一种跨平台的开源版本控制系统，本文简要介绍了svn的基本应用。</p>
</blockquote>
<a id="more"></a>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><p>导引</p>
</li>
<li><p>安装Subversionn</p>
</li>
<li><p>安装TortoiseSVN</p>
</li>
<li><p>一步步地操作</p>
<ol>
<li>设置全局忽略文件类型(此步骤为可选)步骤</li>
<li>创建版本库<strong>Repository</strong>数据库</li>
<li>创建工作目录 -  将你的项目与数据库连接起来</li>
<li>添加忽略</li>
</ol>
</li>
<li><p>注意事项</p>
</li>
<li><p>参考资料</p>
</li>
</ul>
<h1 id="导引"><a href="#导引" class="headerlink" title="导引"></a>导引</h1><p> 到目前有很多关于Subversion (SVN) 和 TortoiseSVN的优秀书籍和教程。其中有部分在本文的参考资料区有列出。这篇教程无疑是站在巨人的肩膀上。它只覆盖了subversion (SVN)有限的一部分功能。 然而我希望此文能简化你对SVN的认识。</p>
<p>Subversion 是一种跨平台的开源版本控制系统 (<a href="http://subversion.tigris.org/" target="_blank" rel="noopener">http://subversion.tigris.org/</a>).  它由版本数据库 (FSFS 或 BDB) 和一些命令行工具组成。目前有各种各样的SVN前端工具。</p>
<p>Subversion是为多人参与的项目专门设计的。 但它也可用于管理个人项目。</p>
<p>此文仅限于基于<strong>Windows的本地SVN环境</strong>(未单独配置远程的服务器)。</p>
<h1 id="安装Subversion"><a href="#安装Subversion" class="headerlink" title="安装Subversion"></a>安装Subversion</h1><p>打开Tigris.org网站的下载区，选择 开源代码软件工程工具Subversion (<a href="http://subversion.tigris.org/" target="_blank" rel="noopener">http://subversion.tigris.org/</a>)。 Windows下最新的命令行版Subversion的安装文件和库都能在<a href="http://www.open.collab.net/downloads/subversion/" target="_blank" rel="noopener">http://www.open.collab.net/downloads/subversion/</a>下载到。下载安装包。SVN的默认安装目录为C:\Program Files\Subversion，当然你也可以修改磁盘路径。</p>
<p>现在你就可以开始使用SVN了。 如果你不习惯使用命令行工具，那你有必要安装一个你觉得合适的GUI前端。</p>
<h1 id="安装TortoiseSVN"><a href="#安装TortoiseSVN" class="headerlink" title="安装TortoiseSVN"></a>安装TortoiseSVN</h1><p>TortoiseSVN是一种Subversion客户端, Windows下它是一个命令行扩展, Windows资源管理器的一个插件(<a href="http://tortoisesvn.tigris.org/" target="_blank" rel="noopener">http://tortoisesvn.tigris.org/</a>)。</p>
<p>最新版本可以在这下载到 <a href="http://tortoisesvn.sourceforge.net/downloads" target="_blank" rel="noopener">http://tortoisesvn.sourceforge.net/downloads</a>. 截止到2015.12.18的最新版本为：TortoiseSVN-1.9.2.26806-x64-svn-1.9.2.msi，如果需要切换语言，还可以在官网上下载相应语言包。</p>
<p>如果你电脑安装的Windows是32位的请选择32位的TortoiseSVN安装包，如果你电脑安装的Windows是x64的请选择x64的TortoiseSVN安装包。 下载区域的另一个文件TortoiseSVN-xxx-xxx.md5, 是安装时不需要的。它包含安装包的验证编号checksum，该验证编号能有效验证你是否下载到了合适的安装包 (且它没有损坏)。</p>
<p>你可以下载程序HashFile (<a href="http://www.shokhirev.com/nikolai/programs/progmisc.html" target="_blank" rel="noopener">http://www.shokhirev.com/nikolai/programs/progmisc.html</a>) 来验证下载到的安装包的 MD5 哈希值 (checksum). 该验证编号必须和TortoiseSVN-xxx-xxx.md5文件上的信息完全一致。</p>
<p>这个安装也是直接的，同意默认设置即可。 唯一有趣的是ASP.Net hack. 默认情况下, SVN 使用 .svn 工作目录 (正如Linux下隐藏文件的命名风格)。<br><img src="https://img-blog.csdn.net/20180423144822210" alt="img"><br>这使得 微软 ASP.Net 和 the hack 强制 SVN 去使用  _svn 作为工作目录。 如果你要使用Subversion对ASP.Net项目进行版本控制，请不要安装ASP.Net hack这一项。</p>
<p>注： 安装完TortoiseSVN后，你的Windows 资源管理器的主目录上会出现下图所示的新的按钮：</p>
<p> <img src="https://img-blog.csdn.net/20151218142852404?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"><br>同时这些新增按钮也会添加到 (通过鼠标右键单击激活) 的上下文菜单中。</p>
<h1 id="一步步地操作"><a href="#一步步地操作" class="headerlink" title="一步步地操作"></a>一步步地操作</h1><p>目前有很多Subversion管理方式(参看手册). 现在我们主要考虑如下主要的情形: </p>
<ul>
<li>你有一个现有的项目，你想将它加入版本控制。</li>
<li>这是你本地电脑上的个人项目。</li>
</ul>
<p>在这种情形下你不应该会担心安全性和开启一个subversion服务器。</p>
<p>假设你的项目驻放在 C:\Projects\MyProject 路径下，它包含如下文件，或许还有些子文件夹：</p>
<p><img src="https://img-blog.csdn.net/20151218143815197?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img">   </p>
<h2 id="步骤0-可选-设置全局忽略文件类型。"><a href="#步骤0-可选-设置全局忽略文件类型。" class="headerlink" title="步骤0 (可选). 设置全局忽略文件类型。"></a>步骤0 (可选). 设置全局忽略文件类型。</h2><p>你可能不想跟踪临时文件 或  某些其他格式的文件。鼠标右击任意一个文件夹，然后打开TortoiseSVN的Settings：</p>
<p><img src="https://img-blog.csdn.net/20151218142928353?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"><br>当然你也可以鼠标右击文件， 打开Windows资源管理器主目录中的TortoiseSVN/Settings。<br><img src="https://img-blog.csdn.net/20151218142945655?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"><br>“General” -&gt; “Subversion”处，你可以列出各种各样的文件类型，并使用空格隔开 (比如上图中示例的 <code>*.bak *.~*</code>). 注意到这个设置会对所有的工作目录有效。参看手册的5.25可了解更多的设置。</p>
<h2 id="步骤1-创建版本库Repository。"><a href="#步骤1-创建版本库Repository。" class="headerlink" title="步骤1.创建版本库Repository。"></a>步骤1.创建版本库Repository。</h2><p>在你的硬盘上为你的项目创建版本库的目录, 比如 C:\SVN. 在它里面创建一个空的子目录 \MyProject. 鼠标右键点击MyProject，并选择TortoiseSVN -&gt; 在此创建版本库:</p>
<p><img src="https://img-blog.csdn.net/20151218143011950?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p>
<p>选择默认”原生文件系统”(FSFS)选项，并单击OK按钮：</p>
<p><img src="https://img-blog.csdn.net/20151218143024077?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p>
<p>这一步将 C:\SVN\MyProject 转化为含有如下内容的版本库：</p>
<p><img src="https://img-blog.csdn.net/20151218143053878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p>
<p>到目前为止，它还是一个空的版本库，虽然Subversion已经创建了几个目录和文件 ! 我们需要将我们的项目文件中需要进行版本控制的文件填充进去并将它链接到我们的工作项目的目录。这些操作中可能会有几个和大家的习惯操作不一样、新的操作。</p>
<h2 id="步骤2-导入初始化。"><a href="#步骤2-导入初始化。" class="headerlink" title="步骤2. 导入初始化。"></a>步骤2. 导入初始化。</h2><p> 在你的磁盘的某处 (比如 在 C:\tmp) 创建一个目录 (比如 \new) ，含有如下3个子目录：<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\tmp\new\branches </span><br><span class="line">C:\tmp\new\tags    </span><br><span class="line">C:\tmp\new\trunk</span><br></pre></td></tr></table></figure></p>
<p>相应的文件结构为：</p>
<p><img src="https://img-blog.csdn.net/20151218143332531?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p>
<p>为了能用更多高级的项目管理功能，这个结构是必须的, 如果事先创建它也不会带来什么损害。 有些手册首推先导入此结构到版本库，然后向里面添加项目。我推荐使用如下的快捷方式：</p>
<ul>
<li>备份你的项目文件 (比如 C:\Projects\MyProject), 以防万一.</li>
<li>删除所有不在全局忽略文件列表中的不需要进行版本控制的文件。</li>
<li>将 文件夹 \MyProject 中需要进行版本控制的内容 移动 进 trunk 子目录 (C:\tmp\new\trunk). 我们之后无论如何都将会需要一个空的文件夹。</li>
<li>将目录”new”导入Import到版本库 (选择”new”，右键依次单击TortoiseSVN-&gt;Import)：</li>
</ul>
<p>URL 选择 file:///C:/SVN/Myproject (左斜杠”/“ !):</p>
<p><img src="https://img-blog.csdn.net/20151218143348048?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p>
<p>“Import finished” 消息出现时，表明 C:\tmp\new\下的所有文件及子文件夹都已成功导入版本库 :</p>
<p><img src="https://img-blog.csdn.net/20151218143351826?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p>
<p>不需要担心”tmp\new” 消息, 只要验证哪些文件真正地导入到了版本库中即可。 书表右键单击 C:\SVN\MyProject ，然后打开 TortoiseSVN -&gt; Repo-browser(版本库浏览器)：</p>
<p><img src="https://img-blog.csdn.net/20151218143356202?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p>
<p>导航 至 file///C:/SVN/MyProject/trunk:</p>
<p><img src="https://img-blog.csdn.net/20151218143400685?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"><br>注意到全局忽略列表的文件都没被导入。 并且也没有 ‘C:\tmp\new’ 目录的痕迹了， ‘C:\tmp\new’ 目录再没有什么用处了，可以删掉。</p>
<h2 id="步骤3-创建工作目录-将你的项目与数据库连接起来"><a href="#步骤3-创建工作目录-将你的项目与数据库连接起来" class="headerlink" title="步骤3. 创建工作目录 -  将你的项目与数据库连接起来."></a>步骤3. 创建工作目录 -  将你的项目与数据库连接起来.</h2><p>现在你已经成功增加了你对所有需要进行版本控制的文件添加了版本控制，并且当前的空目录 C:\Projects\MyProject (回忆一下, 我们之前已将改目录中的所有文件 移动 到了 目录 C:\tmp\new\trunk 中，对么?). “为了让你的双手移动文件的这个行为获得”赞美”, 完全得到批准, 并且完全导入Subversion目录, 你需要从版本库中对它进行检出Checkout” . 书表右击 C:\Projects\MyProject 文件夹，并选择 “<strong>SVN Checkout”(SVN 检出)</strong>:</p>
<p><img src="https://img-blog.csdn.net/20151218143405371?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p>
<p>设置 URL 为 file:///C:/SVN/MyProject/trunk ，并设置检出目录为： C:\Projects\MyProject</p>
<p><img src="https://img-blog.csdn.net/20151218143409839?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p>
<p>点击OK. 会提示”Checkout (检出) has finished”：</p>
<p><img src="https://img-blog.csdn.net/20151218143413848?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"> </p>
<p>“赞美” 以”对勾Check”小图标的形式反映在你的项目目录和里面所有的文件(和所有的子目录)上。</p>
<h2 id="步骤4-添加忽略的文件"><a href="#步骤4-添加忽略的文件" class="headerlink" title="步骤4.添加忽略的文件"></a><strong>步骤4.添加忽略的文件</strong></h2><p>在资源管理器中，右键一个未加入版本控制文件或目录，并从弹出菜单选择TortoiseSVN →Add to Ignore List，会出现一个子菜单，允许你仅选择该文件或者所有具有相同后缀的文件。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctbXkuY3Nkbi5uZXQvdXBsb2Fkcy8yMDExMTAvMjUvMF8xMzE5NTI4NjQ2UVN2MS5naWY" alt="img"> </p>
<p>如果你想从忽略列表中移除一个或多个条目，右击这些条目，选择TortoiseSVN →从忽略列表删除。</p>
<h1 id="几点注意事项"><a href="#几点注意事项" class="headerlink" title="几点注意事项"></a>几点注意事项</h1><ul>
<li>提交 (checking in) 你对版本库的变更: 右击鼠标，然后选择 “SVN Commit”(SVN提交)添加文件到版本库。</li>
<li>除了参考书籍 [<a href="http://www.shokhirev.com/nikolai/programs/SVN/svn.html#svnbook" target="_blank" rel="noopener">4</a>] 和 [<a href="http://www.shokhirev.com/nikolai/programs/SVN/svn.html#guide" target="_blank" rel="noopener">5</a>], 我也推荐 Charlie Calvert 的文章 [<a href="http://www.shokhirev.com/nikolai/programs/SVN/svn.html#Charlie" target="_blank" rel="noopener">6</a>].</li>
<li>如果你使用 <a href="http://www.lavasoft.com/news/product/google.shtml" target="_blank" rel="noopener">Lavasoft Ad-Aware</a>, 不要删除可以忽略的对象: 这一步会删除注册表中的图标设置 !</li>
<li>祝开开心心 使用Subversion版本控制 !</li>
<li>这是一个两步的过程:<ol>
<li>先右击选中的文件，然后右键依次选择 “TortoiseSVN”-&gt;”Add”</li>
<li>先右击选中的文件，然后右键依次选择 “TortoiseSVN”-&gt;”SVN Commit”</li>
</ol>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/lzuacm/article/details/50347365" target="_blank" rel="noopener">如何用TortoiseSVN将项目代码提交到SVN</a></p>
<hr>
<blockquote>
<p>原作者: Bravo Yeung<br>公众号: dotNET匠人</p>
</blockquote>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>Adobe Photoshop CC  ps 2019中文版Win/Mac破解教程</title>
    <url>/2019/10/07/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/PS%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B2019/</url>
    <content><![CDATA[<h1 id="使用破解补丁（Win-Mac通用）"><a href="#使用破解补丁（Win-Mac通用）" class="headerlink" title="使用破解补丁（Win/Mac通用）"></a>使用破解补丁（Win/Mac通用）</h1><ol>
<li><p>下载原版软件<br>Adobe Creative Cloud平台下载正版渠道的Photoshop CC 2019（即V20版本）</p>
</li>
<li><p>下载破解软件<br>ZII目前可以破解的软件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Adobe Acrobat DC 19.x (universal amtlib)</span><br><span class="line">Adobe After Effects CC 2019 v16.1 – 16.1.3</span><br><span class="line">Adobe Animate CC 2019 v19.2 – 19.2.1</span><br><span class="line">Adobe Audition CC 2019 v12.1 – 12.1.4</span><br><span class="line">Adobe Bridge CC 2019 v9.0.3 – 9.1</span><br><span class="line">Adobe Character Animator CC 2019 v2.1 – 2.1.1</span><br><span class="line">Adobe Dimension CC v2.3</span><br><span class="line">Adobe Dreamweaver CC 2019 v19.1 – 19.2.1</span><br><span class="line">Adobe Illustrator CC 2019 v23.0.3 – 23.1</span><br><span class="line">Adobe InCopy CC 2019 v14.0.2</span><br><span class="line">Adobe Indesign CC 2019 v14.0.2 – 14.0.3.433</span><br><span class="line">Adobe Lightroom Classic v8.2.1 – 8.4.1</span><br><span class="line">Adobe Media Encoder CC 2019 v13.1 – 13.1.5</span><br><span class="line">Adobe Photoshop CC 2019 v20.0.4 – 20.0.6</span><br><span class="line">Adobe Prelude CC 2019 v8.1 – 8.1.1</span><br><span class="line">Adobe Premiere Pro CC 2019 v13.1 – 13.1.5</span><br><span class="line">Adobe Premiere Rush CC v1.1 – 1.2.5</span><br><span class="line">Adobe XD v21.0.12.11 – 22.5.12.1</span><br></pre></td></tr></table></figure>
</li>
</ol><a id="more"></a>
<p><a href="http://www.gfxcamp.com/zii-2019/" target="_blank" rel="noopener">Adobe CC 2019 Win/Mac通用破解补丁 Zii v4.4.4 + GenP v1.5.6.2</a></p>
<h1 id="直接下载破解版软件（仅win可用）"><a href="#直接下载破解版软件（仅win可用）" class="headerlink" title="直接下载破解版软件（仅win可用）"></a>直接下载破解版软件（仅win可用）</h1><p><a href="http://www.gfxcamp.com/ps-cc-2019/" target="_blank" rel="noopener">Adobe Photoshop CC 2019 v20.0.6 Win/Mac 中文/英文/多语言破解版</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>太吾绘卷大型攻略</title>
    <url>/2019/03/09/%E5%A4%AA%E5%90%BE%E7%BB%98%E5%8D%B7%E5%A4%A7%E5%9E%8B%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17bmao6g0j30np09q412.jpg" alt=""></p>
<p><strong>摘要:</strong> 本攻略以太吾绘卷人物创建到人物死亡的顺序介绍了游戏的基本机制与玩法,旨在帮助初次体验太吾绘卷的玩家迅速融入游戏谱写属于自己的江湖绘卷.</p>
<p><strong>关键词:</strong> 太吾绘卷 游戏机制 基本玩法  游戏攻略</p>
<a id="more"></a>
<p>《太吾绘卷》是一款以神话和武侠为题材的独立游戏。玩家将扮演“太吾氏传人”，在以古代中国为背景的架空世界中，通过一代又一代传人的努力和牺牲，最终击败强大的宿敌，决定人世的命运。</p>
<p>游戏采取了类似沙盒游戏的开放世界系统。玩家创建的每一个“太吾世界”，都将是独一无二的随机地图，以及完全随机生成的NPC和敌人，玩家可从15个门派和几乎所有NPC人物中学习武艺和技能。另外，该游戏的NPC之间也有着复杂的关系，玩家可以与他们结成各种各样的关系，甚至直接决定NPC的生死。除传统RPG玩法外《太吾绘卷》还融合了许多不同的玩法，如Roguelike、斗蟋蟀以及建造、经营、管理等。</p>
<p>目前《太吾绘卷》还处于开发阶段,游戏中基本没有对新手的引导以及对玩法机制的解释,导致游戏过于硬核.不便于新手玩家体验游戏,本攻略以太吾绘卷人物创建到人物死亡的顺序介绍了游戏的基本机制与玩法,旨在帮助初次体验太吾绘卷的玩家迅速融入游戏谱写属于自己的江湖绘卷.</p>
<h1 id="一-相枢降世入轮回"><a href="#一-相枢降世入轮回" class="headerlink" title="一.相枢降世入轮回"></a>一.相枢降世入轮回</h1><h2 id="1-人物创建"><a href="#1-人物创建" class="headerlink" title="1 人物创建"></a>1 人物创建</h2><h3 id="1-1处事立场"><a href="#1-1处事立场" class="headerlink" title="1.1处事立场"></a>1.1处事立场</h3><h4 id="1-1-1处事立场概述"><a href="#1-1-1处事立场概述" class="headerlink" title="1.1.1处事立场概述"></a>1.1.1处事立场概述</h4><p><strong>简易总结: 新手建议选择中庸或者仁善,以便获得更好的游戏体验.</strong></p>
<p>处世立场（Attitude）决定角色在世界中待人处事的方式。</p>
<p>每一个角色都拥有一种处世立场。玩家可以在创建自己的角色时选择立场，在人物面板中可以查看其处世立场，立场相差越大的角色越难以相处.</p>
<p>立场并不只有五个孤立的取值，而是连续的数轴，创建角色时可以拖动滑块来自定义更细的倾向；在游戏内选择不符合自身立场的选项时，角色的立场值会随着移动，表现出的立场类型可能改变.</p>
<h4 id="1-1-2处事立场的改变"><a href="#1-1-2处事立场的改变" class="headerlink" title="1.1.2处事立场的改变"></a>1.1.2处事立场的改变</h4><p>与然山派青琅主互动（需好感达到或超过融洽）,可消耗30点地区恩义,改变主角或同道的立场.</p>
<h4 id="1-1-3处事立场的作用"><a href="#1-1-3处事立场的作用" class="headerlink" title="1.1.3处事立场的作用"></a>1.1.3处事立场的作用</h4><p><strong>玩家角色立场作用</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">立场选项</th>
<th style="text-align:center">被索要物品</th>
<th style="text-align:center">清理外道巢穴</th>
<th style="text-align:center">救助入魔人</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">刚正</td>
<td style="text-align:center">大量降低好感；若对方名誉为负，则增加名誉</td>
<td style="text-align:center">地区恩义额外+1、所在地图所有城镇安定+1</td>
<td style="text-align:center">被救助者入魔值清零</td>
</tr>
<tr>
<td style="text-align:center">仁善</td>
<td style="text-align:center">好感无变化，根据对方名誉增减名誉</td>
<td style="text-align:center">所在地图所有城镇文化+1</td>
<td style="text-align:center">加大量好感度</td>
</tr>
<tr>
<td style="text-align:center">中庸</td>
<td style="text-align:center">少量降低好感</td>
<td style="text-align:center">所在地图所有城镇文化+1、安定+1</td>
<td style="text-align:center">被救助者名誉置中（默默无闻）</td>
</tr>
<tr>
<td style="text-align:center">叛逆</td>
<td style="text-align:center">大量降低好感，根据对方名誉反向增减名誉</td>
<td style="text-align:center">获得银钱和威望</td>
<td style="text-align:center">丢下失心人不管，失心人仍在原地</td>
</tr>
<tr>
<td style="text-align:center">唯我</td>
<td style="text-align:center">大量降低好感，根据对方名誉反向增减名誉</td>
<td style="text-align:center">获得新的同道；该同道固定拥有被逼屈从特性，每年好感-60</td>
<td style="text-align:center">杀掉失心人且不会被寻仇</td>
</tr>
</tbody>
</table>
<blockquote>
<p>立场相同对人物与NPC的关系有促进作用，对立立场容易结仇；刚正、仁善立场在对话时不太会与NPC结仇，也容易提升好感度，但是同样也不可以作恶；中庸立场与任何立场的人都不会结仇叛逆、唯我立场，虽然自身利益方面会有收益，但是极为容易与NPC结仇，带来后续关系链的麻烦；</p>
</blockquote>
<p><strong>npc立场影响</strong></p>
<ul>
<li>立场影响闲聊行为的结果：立场相同的角色闲聊时增加大量好感，处世立场不合的角色闲聊时会增加少量好感。 </li>
<li>玩家在门派内寻求支持时，不同立场的角色提出的要求不尽相同 </li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">立场</th>
<th style="text-align:center">对应要求</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">刚正</td>
<td style="text-align:center">接下五招：进行切磋，获胜，或在对方使用第五个攻击功法之后仍然未被击败</td>
</tr>
<tr>
<td style="text-align:center">仁善</td>
<td style="text-align:center">在较艺中获胜</td>
</tr>
<tr>
<td style="text-align:center">中庸</td>
<td style="text-align:center">赠送对银钱(身份越高,所需银钱越多)</td>
</tr>
<tr>
<td style="text-align:center">叛逆</td>
<td style="text-align:center">关系达到喜爱/亲密（视对方身份品级而定）</td>
</tr>
<tr>
<td style="text-align:center">唯我</td>
<td style="text-align:center">在切磋中获胜</td>
</tr>
</tbody>
</table>
<h3 id="1-2-外表相貌"><a href="#1-2-外表相貌" class="headerlink" title="1.2 外表相貌"></a>1.2 外表相貌</h3><h4 id="1-2-1-外表相貌概述"><a href="#1-2-1-外表相貌概述" class="headerlink" title="1.2.1 外表相貌概述"></a>1.2.1 外表相貌概述</h4><p><strong>简易总结: 五官选择后三分之一选项,善用sl,获取龙姿/凤仪以及以上的相貌.</strong></p>
<p>只有第一代太吾可以选择自己的相貌,小孩的五官部件在爸妈的对应器官之间随机。 所以使用修改器的也会按照基本法.</p>
<p>####1.2.2 外表相貌与魅力值的关系</p>
<ol>
<li><p>魅力与长相有关，准确说跟眼睛、鼻子、嘴巴、眉毛、特征5个五官部件有关，跟头发无关。</p>
</li>
<li><p>每种五官的所有选项都被分为三类，丑，中和美。每个器官按照等级有不同评分。按照五官序号的从小到大，前1/3为丑，中间1/3为中等，后1/3为美。如下表:</p>
</li>
</ol>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g0wpfm18j3j315e06bweh.jpg" alt="五官评分表"></p>
<ol start="3">
<li>按照评分所在区间，魅力值会在对应的区间内随机产生。最高档范围是500-900。也即[出众]～[天人]。其中(在无额外特质魅力加成情况下)随机到天人的概率为1/400。如下表：</li>
</ol>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g0wpe4osgtj315604w745.jpg" alt="魅力等级表"></p>
<blockquote>
<p>本攻略并非原创,NGA-UID:157403-<a href="https://bbs.nga.cn/read.php?&amp;tid=15197500&amp;rand=998" target="_blank" rel="noopener"> 魅力捏脸手册 {09/30 更新：补充少量有关生孩子的机制} </a></p>
</blockquote>
<h4 id="1-2-3外表相貌的作用"><a href="#1-2-3外表相貌的作用" class="headerlink" title="1.2.3外表相貌的作用"></a>1.2.3外表相貌的作用</h4><ul>
<li>外表相貌在太吾绘卷中会影响游戏中的人物对你的初始好感度</li>
<li>外表相貌会影响某些功法的特殊效果<br>eg: 璇女派九品绝技正练-魅力越高,敌方攻速越慢</li>
</ul>
<h3 id="1-3-出生特质"><a href="#1-3-出生特质" class="headerlink" title="1.3 出生特质"></a>1.3 出生特质</h3><ul>
<li><p>角色进入游戏后的属性资质均为一个范围内随机。</p>
</li>
<li><p>角色拥有总共最多10点特质点数可分配在经历、财富、技艺三大分支，帮助角色获得某些方面的优势。 </p>
</li>
</ul>
<p><strong>简易总结: 如果追求资质高突破阅读容易可以主技艺；如果追求经营可以主财富；如果追求属性可以主经历；如果你追求后期完美无缺，那么白蛇和盛世的效果是不能依靠反复投胎刷档和后期努力得到的。</strong></p>
<h3 id="1-4-出生地区"><a href="#1-4-出生地区" class="headerlink" title="1.4 出生地区"></a>1.4 出生地区</h3><p>本选项会影响玩家所在太吾村的地点，并根据出生地区门派特定，会略微影响人物属性。</p>
<p>建议在此处选择你想优先拜入的门派，查看好各个门派的功法及其需求，规划好角色学武路线，好让出身特质和之后的资质对话中让角色获得正确的增益。 </p>
<blockquote>
<p>出身地对人物属性加成的具体影响, <a href="https://tieba.baidu.com/p/5897034537?see_lz=1" target="_blank" rel="noopener">有关创建人物[太吾绘卷吧]_百度贴吧</a></p>
</blockquote>
<h3 id="1-5-出生时节"><a href="#1-5-出生时节" class="headerlink" title="1.5 出生时节"></a>1.5 出生时节</h3><p><strong>简要总结:新手建议选择处暑出生,方便读书.</strong></p>
<p>太吾绘卷,中出生在不同的时节会获得不同的属性天赋,具体加成见下表:</p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g0wqxss1xxj30ky0l2gm5.jpg" alt="出生时节表"></p>
<h2 id="2-人物特性"><a href="#2-人物特性" class="headerlink" title="2 人物特性"></a>2 人物特性</h2><p><strong>简要总结:善用sl,获得天元一气/绝世奇才/良材美玉特性</strong></p>
<h3 id="2-1人物特性概述"><a href="#2-1人物特性概述" class="headerlink" title="2.1人物特性概述"></a>2.1人物特性概述</h3><ul>
<li>人物会随机获得各种特性。</li>
<li>人物特性栏显示的为当前人物的特性，蓝色为正面特性，红色为负面特性，白色为中立特性。每个特性在鼠标放置上方之后会显示详细说明。</li>
<li>特性中剑图标在战斗中会为队友提供攻击方面受益，盾图标会在战斗中提供防御方面收益，圆形图标会在战前提供计略。</li>
</ul>
<blockquote>
<p>某些特性可以遗传,此方面内容将在太吾遗传学中详细说明,此处不再赘述.</p>
</blockquote>
<h3 id="2-2特性的改变"><a href="#2-2特性的改变" class="headerlink" title="2.2特性的改变"></a>2.2特性的改变</h3><ul>
<li>已有特性的等级只能通过璇女派的门派互动更改</li>
<li>角色有时会因为各种事件获得额外的特性。eg: 身怀六甲(通过与配偶春宵一刻),经文祝祷(通过僧人衣服的互动,此特性可遗传)</li>
</ul>
<h3 id="2-3特性的作用"><a href="#2-3特性的作用" class="headerlink" title="2.3特性的作用"></a>2.3特性的作用</h3><ul>
<li>人物的特性影响战斗时机略的使用，并且决定他们的进攻、防守倾向。 在战斗和较艺的准备阶段，玩家可以通过消耗一定的机略点数来采用不同的机略，如喝茶/使用药品，决定开局时敌我双方的距离，影响我方或敌方的同伴的出手频率、守御值、专注上升速度、逃跑概率等。</li>
<li>影响角色的人物属性、七元赋性等数值</li>
</ul>
<h3 id="2-4特性的遗传"><a href="#2-4特性的遗传" class="headerlink" title="2.4特性的遗传"></a>2.4特性的遗传</h3><ul>
<li>父母共同拥有的特性必定会遗传</li>
<li>神锋敛彩,璞玉韬光,经文祝祷只要父母单方面拥有即可遗传</li>
</ul>
<h3 id="2-4人物特性预览"><a href="#2-4人物特性预览" class="headerlink" title="2.4人物特性预览"></a>2.4人物特性预览</h3><p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g0wruaj842j31jhcn0nph.jpg" alt="人物特性大全"></p>
<blockquote>
<p>此图来自百度贴吧-摇光为星-<a href="https://tieba.baidu.com/p/5900568013" target="_blank" rel="noopener">全特性效果总会图</a></p>
</blockquote>
<h2 id="3-人物属性"><a href="#3-人物属性" class="headerlink" title="3 人物属性"></a>3 人物属性</h2><h3 id="3-1年龄与健康"><a href="#3-1年龄与健康" class="headerlink" title="3.1年龄与健康"></a>3.1年龄与健康</h3><h4 id="3-1-1-年龄与健康概述"><a href="#3-1-1-年龄与健康概述" class="headerlink" title="3.1.1 年龄与健康概述"></a>3.1.1 年龄与健康概述</h4><p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17c8aaiq5j31880osqer.jpg" alt=""></p>
<p>人物半身像下方为年龄、生时、健康度，上图生时下方的数字“55/55”为人物的健康程度，以本人物举例，健康值上限即为剩余寿命55。</p>
<h4 id="3-1-2-年龄与健康的改变"><a href="#3-1-2-年龄与健康的改变" class="headerlink" title="3.1.2 年龄与健康的改变"></a>3.1.2 年龄与健康的改变</h4><ul>
<li><p>在受内外伤/内息/中毒超过可承受上限情况下，当前健康值会减少。如在当前健康值到0之后时节更替，人物死亡。中毒程度每超过上限一倍,时节更替时健康多减一.</p>
</li>
<li><p>战斗失利也会减少健康。</p>
</li>
<li>健康值上限会在每年你过生日的时节根据你的当前健康值-1重新获得上限。一旦健康值上限为0，人物死亡。所以请做好角色的健康管理，包中常备健康药。</li>
<li>游戏存在续命方法，可以提高健康上限,空桑派互动秘药延寿。</li>
<li>游戏中每年你过生日的时节你的年龄就会+1</li>
</ul>
<h4 id="3-1-3-年龄与健康的作用"><a href="#3-1-3-年龄与健康的作用" class="headerlink" title="3.1.3 年龄与健康的作用"></a>3.1.3 年龄与健康的作用</h4><ul>
<li><p>年龄对行动力与主要属性有一定影响.</p>
</li>
<li><p>时节更替后,健康值上限为0时,人物死亡,触发传剑</p>
</li>
</ul>
<h3 id="3-2-七元赋性"><a href="#3-2-七元赋性" class="headerlink" title="3.2 七元赋性"></a>3.2 七元赋性</h3><ul>
<li>主要在奇遇中生效，角色在奇遇岔路口会选择数值大的方向</li>
<li>福缘对物品掉落有一定影响 </li>
<li>坚毅影响读书的耐心 ,npc坚毅越高越不容易意外中毒/受伤(坚毅大于三十)</li>
</ul>
<h3 id="3-3-主要属性"><a href="#3-3-主要属性" class="headerlink" title="3.3 主要属性"></a>3.3 主要属性</h3><p>主要属性分为：膂力、体质、灵敏、根骨、悟性、定力。所有主要属性都会影响需要该属性的功法发挥效率。</p>
<ul>
<li>膂力会增加需要膂力武器的使用效率。超过50的部分会转化为攻击力道。减少装备重量对移动速度的负面影响。</li>
<li>灵敏会增加需要灵敏武器的使用效率。超过50的部分会转化为攻击迅捷。</li>
<li>定力会增加需要定力武器的使用效率。超过50的部分会转化为攻击精妙。</li>
<li>体质会影响角色的外伤上限。</li>
<li>根骨会影响角色的内伤上限。</li>
<li>悟性可以让读书和突破难度变得更简单。</li>
</ul>
<h3 id="3-4-防御属性"><a href="#3-4-防御属性" class="headerlink" title="3.4 防御属性"></a>3.4 防御属性</h3><p>防御属性分为：护体、御气、内息、卸力、拆招、闪避。</p>
<ul>
<li>护体为外功防御，会被敌人的“破体”属性削弱</li>
<li>御气为内功防御，会被敌人的“破气”属性削弱(破体/破气属性为武器属性，后续讲到装备时会详解)</li>
<li>内息为人物对内力的控制能力，可以压制并恢复内力紊乱</li>
<li>卸力、拆招、闪避为人物的防御命中属性。卸力防御力道、拆招防御精妙、闪避防御迅疾。简而言之，如果敌人释放攻击功法时角色的三项防御命中属性均大于敌人的对应攻击命中属性，那么敌人的技能威力为0。平砍时也同样会进行命中属性比较。</li>
</ul>
<h3 id="3-5其他属性"><a href="#3-5其他属性" class="headerlink" title="3.5其他属性"></a>3.5其他属性</h3><h4 id="3-5-1提气架势"><a href="#3-5-1提气架势" class="headerlink" title="3.5.1提气架势"></a>3.5.1提气架势</h4><ul>
<li>提气、架势速度影响人物战斗时这个圈。只有内外两圈都满了才能施放功法，内圈是提气圈，外圈是架势圈。角色一定会完成提气后才架势。</li>
<li>提气架势消耗，顾名思义，改变消耗的提气架势量。</li>
<li>内功发挥，内功发挥初始值为100%，并不是说内功发挥少了你的内功就变弱了，而是比百分百越少，角色的攻击功法外伤比例就越高；比百分百越高，角色攻击功法内伤比例就越高。内外伤比例直接表现为功法所需的提气架势比例</li>
</ul>
<h4 id="3-5-2攻击命中"><a href="#3-5-2攻击命中" class="headerlink" title="3.5.2攻击命中"></a>3.5.2攻击命中</h4><ul>
<li>力道、精妙、迅疾为人物的攻击命中属性。</li>
<li>卸力防御力道、拆招防御精妙、闪避防御迅疾。如果角色的三项命中属性均高于敌人的防御属性且处于正确的范围内，则攻击功法发挥为十成。</li>
<li>xx发挥、造成内/外伤、破气/体强度，建议直接看攻击功法上的数值，那是经过最终计算的结果(不考虑敌人防御属性情况下)</li>
</ul>
<h3 id="3-5-3治疗守御"><a href="#3-5-3治疗守御" class="headerlink" title="3.5.3治疗守御"></a>3.5.3治疗守御</h3><ul>
<li>守御指的是战斗时人物的白条(护体真气)，敌人在击破守御前是几乎不能对角色造成实质伤害的。提高守御效率能提高守御的硬度和速度。</li>
<li>疗伤/驱毒效率，提高疗伤和驱毒的能力</li>
</ul>
<h4 id="3-5-4行动能力"><a href="#3-5-4行动能力" class="headerlink" title="3.5.4行动能力"></a>3.5.4行动能力</h4><ul>
<li>移动速度,移动一次的速度</li>
<li>移动距离,移动一次的距离</li>
<li>攻击速度,施展武器攻击敌方的速度</li>
<li>武器切换,战斗中切换武器的速度</li>
<li>施展速度,影响功法的施展时间</li>
</ul>
<h3 id="3-6-轮回"><a href="#3-6-轮回" class="headerlink" title="3.6 轮回"></a>3.6 轮回</h3><p>轮回栏显示角色的前世</p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17bnpfphbj30eh0khgpb.jpg" alt="轮回页面"></p>
<ul>
<li>角色会继承前世的10%属性及资质(可建造术数四品建筑轮回台提高这个比例)</li>
</ul>
<h1 id="二-天下风云出我辈"><a href="#二-天下风云出我辈" class="headerlink" title="二 天下风云出我辈"></a>二 天下风云出我辈</h1><h2 id="1-太吾村建设"><a href="#1-太吾村建设" class="headerlink" title="1 太吾村建设"></a>1 太吾村建设</h2><h3 id="1-1建设概述"><a href="#1-1建设概述" class="headerlink" title="1.1建设概述"></a>1.1建设概述</h3><p>当玩家剧情发展到进入太吾村时，就会成为一名光荣的村长，拥有自己的村庄，也就是产业“太吾村”。 玩家可以根据自己的需求在太吾村建造多种建筑，也可对太吾村自然资源进行采集、撤除等等操作。</p>
<p>吾村地区整体规模为13×13的方格，每一个方格均为空地或者已建造的建筑或者自然生成的资源。 当空地有相邻的建筑时，会出现一个小房子图标，表示该空地可以建造建筑。 </p>
<ul>
<li>建筑右上角数字为建筑等级。建筑等级最高为20<br>建筑等级有多种影响：<br>a.当建筑B为建筑A的前置建筑时，建筑A的当前等级为建筑B的建筑等级上限。<br>b.当建筑A为经营建筑时，建筑等级会影响经营质量。如市集，建筑等级越高，收获的金钱越多；如知音阁，建筑等级越高，招募的流民音律资质就越高。<br>c.当建筑B为建筑A的增益建筑时，建筑B的建筑等级影响增益质量。</li>
<li>大多数建筑均有维护费用 ，当玩家拥有银钱无法达到维护建筑的最低要求时，建筑会受损 。当修习类/经营类建筑受损到100%/5%时，该建筑即无法正常使用/增加收获进度；当建筑受损程度达到100%时，该建筑会倒塌，该建筑位置会变为废墟，无法修复；当银钱重新达到建筑的最低要求时，受损建筑会在每个时节自行修复一些，待建筑恢复完好，方可正常使用。</li>
<li>建筑建造或者扩建显示的需要时节为本次建造所需消耗时节数，每当增大投入1人力，消耗时节数减少1，最低消耗1时节。(投入人数有上限) </li>
</ul>
<h3 id="1-2建筑分类"><a href="#1-2建筑分类" class="headerlink" title="1.2建筑分类"></a>1.2建筑分类</h3><h4 id="1-2-1剧情类"><a href="#1-2-1剧情类" class="headerlink" title="1.2.1剧情类"></a>1.2.1剧情类</h4><ul>
<li>太吾村(唯一不可拆除)：太吾村建筑为产业的核心建筑，剧情自带无需自行建造。太吾村的规模等级会影响产业的建筑上限，每提升1级太吾村的规模等级，建筑上限增加2点</li>
<li>仓库：仓库为剧情自带，无需自行建造。可存放装备物品，提升资源储存上限，与全太吾绘卷世界的其他仓库共通。提升仓库等级会提高资源储存上限并增加仓库容量</li>
<li>太吾氏祠堂(唯一不可拆除)：太吾氏祠堂为剧情建筑，建筑图纸剧情自动获得，需玩家自行建造。从主角20岁开始，年龄每增长10年可多一个通过消耗威望来提升同道的资质格子；基于祠堂规模与主角名誉，在每次“立春”时节可以获得一定的威望。</li>
<li>驿站(唯一不可拆除)：驿站为剧情建筑，当完成“墓中仙人”剧情后回到太吾村，会触发信件剧情，对话结束后驿站建筑图纸自动获得，需自行建造。当驿站完成建造后，人物即可通过点击地图界面中查看世界区域按钮 ，进入世界地图，点击目标地区，即可旅行到该地。 如玩家已开通该地区的驿站(即到达过该地域存在驿站的城镇)，可往返与该地区；如若无开通此地区，仍可旅行至此地，但是旅行至该地区后需找到该地区的驿站方可继续旅行至其他地区。(驿站同样是可经营建筑，选择村民经营驿站可以获得银钱和威望)</li>
</ul>
<h4 id="1-2-2基础类建筑"><a href="#1-2-2基础类建筑" class="headerlink" title="1.2.2基础类建筑"></a>1.2.2基础类建筑</h4><p>基础建筑分非修行类与修行类。</p>
<ul>
<li>非修行类包括：居所(每提升两级额外多一点可用人力)、厢房(提供额外好感加成)</li>
<li>修行类包括：人物修炼功法(练功房)或修习十六类技艺(木工房、琴舍等等)处，玩家可在此类建筑中进行修习&amp;突破&amp;研读，某些技艺建筑还可进行制造。</li>
</ul>
<h4 id="1-2-3-扩展类建筑"><a href="#1-2-3-扩展类建筑" class="headerlink" title="1.2.3 扩展类建筑"></a>1.2.3 扩展类建筑</h4><p>扩展类建筑需要紧靠其他建筑建造。扩展类建筑等级不可超过其基础建筑等级。<br>扩展类建筑可分为：</p>
<ol>
<li><p>经营类建筑。经营类建筑一般为修习类建筑的扩展建筑，需建在在对应基础建筑的邻近.</p>
<p>玩家需派遣一村民进入经营类建筑进行长期经营，经营者的技艺能力和心情会影响经营质量收获进度。每个时节会获得收获进度，更换经营者不会清空当前经营进度。经营评价与经营者反馈会影响经营质量。经营进度满了会在收获栏显示收获，需要玩家自己点击收获。招募人才的收获时间是有限制的！记得及时收人！</p>
<p>经营类建筑共分为三类：</p>
<ol>
<li>赚取银钱建筑(镖局、酒楼、市集、赌坊等等)、</li>
<li>获取威望建筑(金铺、知客亭等等)、</li>
<li>招募人才建筑(百家宴、勾栏瓦舍、书院等等)。</li>
</ol>
</li>
<li><p>增益类建筑。增益类建筑一般为修习类建筑的扩展建筑，需建在在对应基础建筑的邻近。</p>
<p>增益类建筑可对对应的基础建筑或直接对人物提供增益效果，增益效果随增益建筑建筑等级提高而提高。</p>
<p>如：绝诣堂(减少修习绝技所需历练)、龟龙山(减少突破诗书所需历练)、龙泉七星井(可制作出高一品的金铁器具)、画影轩(大幅提高初识者的好感度)等等。</p>
</li>
<li><p>采集类建筑。采集类建筑依托自然资源建造，需建在在对应基础资源的邻近。</p>
<p>可收获对应原材料，可提高资源增长概率，建筑等级不能超过资源等级。建筑等级影响采集质量。</p>
<p>如矿井、树农、药农、花农、筒车、泥渠、宝井、火爆堆、冰夷像等等都属于采集类。</p>
</li>
</ol>
<h3 id="1-3-建筑解锁与效果"><a href="#1-3-建筑解锁与效果" class="headerlink" title="1.3 建筑解锁与效果"></a>1.3 建筑解锁与效果</h3><ul>
<li>技艺建筑需要对应技艺书修习到75%以上后可在商人处购买对应建筑图纸。</li>
<li>建筑效果见下表:</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17bpz6qppj31da0907b9.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17bq8gypcj31d90aajxw.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17bqg0ouej31d807agqm.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17bqolhxaj31d507dtdu.jpg" alt=""></p>
<h2 id="2-武学"><a href="#2-武学" class="headerlink" title="2 武学"></a>2 武学</h2><h3 id="2-1-功法的分类"><a href="#2-1-功法的分类" class="headerlink" title="2.1 功法的分类"></a>2.1 功法的分类</h3><h4 id="2-1-1内功"><a href="#2-1-1内功" class="headerlink" title="2.1.1内功"></a>2.1.1内功</h4><ul>
<li>每种内功均有对应的内力属性<br><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17br6f6puj307g07gab9.jpg" alt=""></li>
</ul>
<ol>
<li>金刚(金)：生玄阴(水)；被归元(土)生；克紫霞(木)；被纯阳(火)克</li>
<li>紫霞(木)：生纯阳(火)；被玄阴(水)生；克归元(土)；被金刚(金)克</li>
<li>玄阴(水)：生紫霞(木)；被金刚(金)生；克纯阳(火)；被归元(土)克</li>
<li>纯阳(火)：生归元(土)；被紫霞(木)生；克金刚(金)；被玄阴(水)克</li>
<li>归元(土)：生金刚(金)；被纯阳(火)生；克玄阴(水)；被紫霞(木)克</li>
<li>混元为全属性</li>
</ol>
<h4 id="2-1-2身法"><a href="#2-1-2身法" class="headerlink" title="2.1.2身法"></a>2.1.2身法</h4><h4 id="2-1-3绝技"><a href="#2-1-3绝技" class="headerlink" title="2.1.3绝技"></a>2.1.3绝技</h4><h4 id="2-1-4攻击"><a href="#2-1-4攻击" class="headerlink" title="2.1.4攻击"></a>2.1.4攻击</h4><h3 id="2-2-获取功法"><a href="#2-2-获取功法" class="headerlink" title="2.2 获取功法"></a>2.2 获取功法</h3><ul>
<li>拜入门派后请教门下弟子,根据支持率获取功法</li>
<li>请教非门派人士,可获取随机该人物研习程度大于五十的功法</li>
<li>战斗时掉落</li>
</ul>
<h3 id="2-3-研习功法"><a href="#2-3-研习功法" class="headerlink" title="2.3 研习功法"></a>2.3 研习功法</h3><h4 id="2-3-1-功法的修习与突破"><a href="#2-3-1-功法的修习与突破" class="headerlink" title="2.3.1 功法的修习与突破"></a>2.3.1 功法的修习与突破</h4><p>在任意城市/村落/门派点击进入该地区的产业视图，找到练功房/或相应技艺基础建筑 ，点击图标进入可以进入到练功读书界面.</p>
<ul>
<li>点击“修习”按钮 ,点击齿轮状按钮即可选择你所要修习的功法/技艺书。(显示内容为角色学习过的功法/技艺书，修习度100%的功法不在此显示).点击所需修习功法，然后按圆圈确定；或者按x取消。</li>
<li>每当功法修习至玄关(25%/50%/75%)，需进行突破方可继续修习。</li>
</ul>
<h4 id="2-3-2-研读书籍的资质需求"><a href="#2-3-2-研读书籍的资质需求" class="headerlink" title="2.3.2 研读书籍的资质需求"></a>2.3.2 研读书籍的资质需求</h4><p>太吾绘卷中每种品级的武学秘籍、文化典籍都会要求角色的资质，越高级的书要求的资质也会越高，想要读懂书中的内容就要努力提高自身的资质.</p>
<p>书籍50%阅读难度所需的资质+造诣与裸资质需求见下表</p>
<table>
<thead>
<tr>
<th style="text-align:center">书籍品级</th>
<th style="text-align:center">资质+造诣需求</th>
<th style="text-align:center">裸资质需求</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">九品</td>
<td style="text-align:center">19</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">八品</td>
<td style="text-align:center">48</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">七品</td>
<td style="text-align:center">91</td>
<td style="text-align:center">46</td>
</tr>
<tr>
<td style="text-align:center">六品</td>
<td style="text-align:center">148</td>
<td style="text-align:center">58</td>
</tr>
<tr>
<td style="text-align:center">五品</td>
<td style="text-align:center">219</td>
<td style="text-align:center">89</td>
</tr>
<tr>
<td style="text-align:center">四品</td>
<td style="text-align:center">304</td>
<td style="text-align:center">108</td>
</tr>
<tr>
<td style="text-align:center">三品</td>
<td style="text-align:center">404</td>
<td style="text-align:center">149</td>
</tr>
<tr>
<td style="text-align:center">二品</td>
<td style="text-align:center">518</td>
<td style="text-align:center">193</td>
</tr>
<tr>
<td style="text-align:center">一品</td>
<td style="text-align:center">646</td>
<td style="text-align:center">226</td>
</tr>
</tbody>
</table>
<p>从上面可以看出，资质在读书这方面的影响其实就是三段:58，89，108。对应的你能顺顺当当的读书读到6，5，4品书。</p>
<p>建人物时，点了天人造化后配合早熟特性，内功身法绝技三项是比较容易达到108+的资质的，其他的武功和技艺方法很多时候1项都没有 这时候退而求其次，关注89+这个数值就好。最偏重的一门兵器一门技艺89+，其他两三门辅修兵器技艺58+就可以。</p>
<h4 id="2-3-3-功法的正逆练与冲解特效"><a href="#2-3-3-功法的正逆练与冲解特效" class="headerlink" title="2.3.3 功法的正逆练与冲解特效"></a>2.3.3 功法的正逆练与冲解特效</h4><p>正逆练由读书所决定。</p>
<ul>
<li>读真传秘籍获得正练效果1,读手抄秘籍获得逆练效果1</li>
<li>正练效果会提高功法的发挥上限,逆练功法会降低功法的使用需求</li>
<li>正逆练还会有心法正逆特效的区别，正≥5时为正，逆≥5时为逆，正逆都为5时为冲解。</li>
</ul>
<blockquote>
<p>具体特效安装功法显示mod即可,此处不再赘述.</p>
</blockquote>
<h2 id="3-奇遇"><a href="#3-奇遇" class="headerlink" title="3 奇遇"></a>3 奇遇</h2><h3 id="3-1-奇遇概述"><a href="#3-1-奇遇概述" class="headerlink" title="3.1 奇遇概述"></a>3.1 奇遇概述</h3><ul>
<li>奇遇进入之前需要支付“门票”——资源、食物、道具等，以及消耗对应行动力。</li>
<li>难度: 影响奇遇所需技艺等级</li>
<li>区域: 影响七元赋性格的分布。</li>
<li>队伍七元赋性：队伍中所有人的七元赋性的平均值。</li>
<li>队伍技艺值：太吾的技艺资质+太吾的技艺造诣+队伍其他人的技艺资质总和的一半</li>
<li>进入奇遇后以队伍七元赋性决定前进方向，队伍七元哪个大就去哪个分支向，不会走回头路，有箭头显示以奇遇转盘检定队伍技艺值决定行动效果，队伍技艺值大于转盘数值则成功，否则失败。</li>
</ul>
<h3 id="3-2-促织高鸣"><a href="#3-2-促织高鸣" class="headerlink" title="3.2 促织高鸣"></a>3.2 促织高鸣</h3><p><strong>作用</strong>: 可以通过该奇遇捕获促织</p>
<ul>
<li>拥有三只或以上促织后可与任何关系符合条件的成年npc进行促织决斗来获取资源或者增加好感</li>
<li>作为礼物赠送给npc(呆物送掌门)</li>
<li>作为商品换取银钱</li>
<li>把促织放在祠堂,每年特定时节会根据促织胜场获取威望</li>
<li>放置于装备栏改变人物七元赋性</li>
<li>作为奇遇天才地宝的进入条件</li>
</ul>
<p><strong>出现条件</strong>: 每年8、9、10月份出现</p>
<p><strong>需求</strong>: 捕虫网</p>
<p><strong>奇遇转盘检定</strong>：难度对应的杂学</p>
<p>奇遇最后可抓蛐蛐<br>保证你队伍的杂学高于转盘所需情况下，尽量多走福缘提高获得高品质蛐蛐机会 </p>
<ul>
<li>难度也会影响蛐蛐的品质,</li>
<li>蛐蛐分平叫和急叫,急叫时波纹大且急</li>
<li>在蛐蛐从开始急叫到结束的中间捉是最好的捉太快或太慢都不行,一般声音越大的就越好</li>
</ul>
<p>促织决斗的流程见下表:</p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17bs2q0hhj30us16m0wl.jpg" alt=""></p>
<blockquote>
<p>作者的太吾生涯仅有一只怀胎三年生的天蓝青,它一生从未战斗过,所以本攻略对促织的描述不多,敬请见谅.</p>
</blockquote>
<h3 id="3-3-商贾云集"><a href="#3-3-商贾云集" class="headerlink" title="3.3 商贾云集"></a>3.3 商贾云集</h3><p><strong>作用</strong>: 奇遇内有大量商人</p>
<p><strong>出现条件</strong>: 每年2、3、4月份出现</p>
<p><strong>需求</strong>: 难度对应的威望</p>
<p><strong>奇遇转盘检定</strong>：难度对应的品鉴</p>
<ul>
<li>难度会影响商人售卖的物品</li>
<li>奇遇内福缘判定成功会提升商队好感(暂时)。</li>
<li>和商人进行交易即可提高商号友好度。银钱交易量，友好度越多。</li>
<li>商号好感度会影响购买出售价格、商人出售物品数量、商人出售物品品阶。</li>
</ul>
<h3 id="3-4-外道巢穴"><a href="#3-4-外道巢穴" class="headerlink" title="3.4 外道巢穴"></a>3.4 外道巢穴</h3><p><strong>作用:</strong> </p>
<ul>
<li>每当打通外道巢穴会根据人物立场进行选择，可获得大量地区恩义。根据人物立场的不同会有不同的奖励。</li>
<li>首杀 首次打通某类外道巢穴后，无论哪个地图格上的同类外道巢穴所属外道都会遇到太吾就逃跑。</li>
<li>要在本地区打掉现有最高等级的外道巢穴，才会刷下一级。</li>
</ul>
<p><strong>出现条件</strong>: 未知</p>
<p><strong>需求</strong>: 任意食物</p>
<p><strong>奇遇转盘检定</strong>：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">所需技艺</th>
<th style="text-align:center">技艺等级</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">恶丐窝</td>
<td style="text-align:center">毒术 杂学</td>
<td style="text-align:center">10-50</td>
</tr>
<tr>
<td style="text-align:center">贼人营寨</td>
<td style="text-align:center">巧匠 杂学</td>
<td style="text-align:center">10-50</td>
</tr>
<tr>
<td style="text-align:center">悍匪砦</td>
<td style="text-align:center">杂学 锻造</td>
<td style="text-align:center">20-100</td>
</tr>
<tr>
<td style="text-align:center">叛徒结伙</td>
<td style="text-align:center">制木 杂学</td>
<td style="text-align:center">30-150</td>
</tr>
<tr>
<td style="text-align:center">恶人谷</td>
<td style="text-align:center">术数 杂学</td>
<td style="text-align:center">40-200</td>
</tr>
<tr>
<td style="text-align:center">迷香阵</td>
<td style="text-align:center">织锦 音律</td>
<td style="text-align:center">40-200</td>
</tr>
<tr>
<td style="text-align:center">乱葬岗</td>
<td style="text-align:center">医术 毒术</td>
<td style="text-align:center">50-250</td>
</tr>
<tr>
<td style="text-align:center">异士居</td>
<td style="text-align:center">绘画 品鉴 诗书</td>
<td style="text-align:center">60-300</td>
</tr>
<tr>
<td style="text-align:center">修罗场</td>
<td style="text-align:center">医术 杂学</td>
<td style="text-align:center">70-350</td>
</tr>
<tr>
<td style="text-align:center">邪人死地</td>
<td style="text-align:center">道法</td>
<td style="text-align:center">70-350</td>
</tr>
</tbody>
</table>
<h3 id="3-5-剑冢"><a href="#3-5-剑冢" class="headerlink" title="3.5 剑冢"></a>3.5 剑冢</h3><p><strong>作用:</strong></p>
<ul>
<li>挑战剑冢boss时会根据对剑冢boss百分比给予太吾精纯点数，一个boss最多3点</li>
<li>打通某一剑冢后会解锁下一个10%阶段的门派支持上限/地区恩义上限/地区威胁上限/商人好感上限同时也会解锁下一品阶的npc可以被相枢化魔和成为太吾同道。剩余的剑冢会提高难度</li>
</ul>
<blockquote>
<p>此攻略图片来自百度贴吧-<strong>戳眼神教教主</strong>-<a href="https://tieba.baidu.com/p/6036237065" target="_blank" rel="noopener">各个剑冢boss的强度和应对方法</a></p>
</blockquote>
<h4 id="3-5-1-大玄凝"><a href="#3-5-1-大玄凝" class="headerlink" title="3.5.1 大玄凝"></a>3.5.1 大玄凝</h4><p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17c8r1xx6j312x0o2h3k.jpg" alt="大玄凝"></p>
<h4 id="3-5-2-焚神练"><a href="#3-5-2-焚神练" class="headerlink" title="3.5.2 焚神练"></a>3.5.2 焚神练</h4><p><img src="http://imgsrc.baidu.com/forum/pic/item/7b367d47f21fbe09950f32df66600c338544ada3.jpg" alt="焚神练"></p>
<h4 id="3-5-3-溶尘隐"><a href="#3-5-3-溶尘隐" class="headerlink" title="3.5.3 溶尘隐"></a>3.5.3 溶尘隐</h4><p><img src="http://imgsrc.baidu.com/forum/pic/item/b2ece412b07eca807a9dc92c9c2397dda344835b.jpg" alt="溶尘隐"></p>
<h4 id="3-5-4-鬼神霞"><a href="#3-5-4-鬼神霞" class="headerlink" title="3.5.4 鬼神霞"></a>3.5.4 鬼神霞</h4><p><img src="http://imgsrc.baidu.com/forum/pic/item/53be8cf3b2119313ade30f7b68380cd793238d53.jpg" alt="鬼神霞"></p>
<h4 id="3-5-5-莫女衣"><a href="#3-5-5-莫女衣" class="headerlink" title="3.5.5 莫女衣"></a>3.5.5 莫女衣</h4><p><img src="http://imgsrc.baidu.com/forum/pic/item/5b48beeb15ce36d3c49873fb37f33a87eb50b15f.jpg" alt="莫女衣"></p>
<h4 id="3-5-6-伏铁邪"><a href="#3-5-6-伏铁邪" class="headerlink" title="3.5.6 伏铁邪"></a>3.5.6 伏铁邪</h4><p><img src="http://imgsrc.baidu.com/forum/pic/item/3a7a9e51352ac65c061e94b8f6f2b21191138ae4.jpg" alt="伏铁邪"></p>
<h4 id="3-5-7-囚魔木"><a href="#3-5-7-囚魔木" class="headerlink" title="3.5.7 囚魔木"></a>3.5.7 囚魔木</h4><p><img src="http://imgsrc.baidu.com/forum/pic/item/afac84dfb48f8c54dc8b38e437292df5e2fe7f9b.jpg" alt="囚魔木"></p>
<h4 id="3-5-8-解龙魄"><a href="#3-5-8-解龙魄" class="headerlink" title="3.5.8 解龙魄"></a>3.5.8 解龙魄</h4><p><img src="http://imgsrc.baidu.com/forum/pic/item/b864de004c086e06c9f8c2800f087bf408d1cbac.jpg" alt="解龙魄"></p>
<h4 id="3-5-9-凤凰茧"><a href="#3-5-9-凤凰茧" class="headerlink" title="3.5.9  凤凰茧"></a>3.5.9  凤凰茧</h4><p><img src="http://imgsrc.baidu.com/forum/pic/item/43eb1a234f4a20a4a8e8c00c9d529822700ed002.jpg" alt="凤凰茧"></p>
<h4 id="3-5-10-剑冢挑战顺序"><a href="#3-5-10-剑冢挑战顺序" class="headerlink" title="3.5.10 剑冢挑战顺序"></a>3.5.10 剑冢挑战顺序</h4><p><img src="http://imgsrc.baidu.com/forum/pic/item/46de7ef69052982295a2d808daca7bcb0846d463.jpg" alt="剑冢挑战顺序"></p>
<h3 id="3-6-天书宝典"><a href="#3-6-天书宝典" class="headerlink" title="3.6 天书宝典"></a>3.6 天书宝典</h3><p><strong>宝典作用:</strong></p>
<ul>
<li>每本宝典能加100对应武学资质，可以拯救一位太吾的人生,资质只要到六七十再带上相应的宝典，神一品的功法突破起来也是轻轻松松。</li>
<li>赠与NPC,向其请教功法</li>
</ul>
<p><strong>取得宝典的方法：</strong></p>
<ul>
<li><p>亲自上手绑架走扒下来</p>
</li>
<li><p>天书宝典奇遇</p>
<p> 界青门安排，等到站了进奇遇拿。(不知道是不是设定，宝典奇遇的勇壮和福缘判定特别多)</p>
<p> 刚正立场并且名誉符合要求，追着惩戒打到死，等奇遇抢。</p>
<p> 如果你到奇遇终点的路线完美避开了所有勇壮格子，到达终点时会直接取得宝典。</p>
<p> 如果途中有过战斗则在终点要和某人打一架来决定宝典归属。 </p>
</li>
</ul>
<p><strong>奇遇轮盘互动:</strong></p>
<p>奇遇当中，遇敌时根据敌人的立场会有不同的互动结果：</p>
<ul>
<li>刚正：恶战，败者退出争夺。可以避战。</li>
<li>仁善：切磋，可以避战。</li>
<li>中庸： 暂时停战</li>
<li>叛逆：选择是否助其虚张声势：是：对方看起来会比实际更强，出现在终点处与你争夺的可能性变大 否：打一架。</li>
<li>唯我：遇到唯我的敌人必定在对方的偷袭中受伤(不触发战斗，发生在对话当中的既定事实)，然后可选择避战或刚到底。此时避战必定成功</li>
</ul>
<p><strong>奇遇的轮盘对应资质:</strong></p>
<p>奇遇的轮盘只有对应宝典的武学造诣</p>
<h2 id="4-战斗"><a href="#4-战斗" class="headerlink" title="4 战斗"></a>4 战斗</h2><h3 id="4-1-战斗准备"><a href="#4-1-战斗准备" class="headerlink" title="4.1 战斗准备"></a>4.1 战斗准备</h3><p>在与敌人相遇时会触发战斗，玩家可以点击角色半身像来使用道具、更改装备和功法，也可点击敌人半身像查看敌人的装备物品人物属性。知己知彼，百战不殆。</p>
<h4 id="4-1-1-机略来源"><a href="#4-1-1-机略来源" class="headerlink" title="4.1.1 机略来源"></a>4.1.1 机略来源</h4><ul>
<li>机略等级和类型由整个队伍决定。人物特性的里圆圈的会具体表现为战斗、较艺准备中的机略。</li>
<li>不同颜色(红vs蓝)的机略等级会相互抵消每个角色的白色机略会加在红蓝机略等级高的那一方。如该角色无红蓝色机略或红蓝等级一致，无论白色机略等级高低都视为无。</li>
<li>机略等级公式：主角的机略等级X(6-队伍总人数(包括主角在内))+队友的机略等级</li>
</ul>
<h4 id="4-1-2-机略作用"><a href="#4-1-2-机略作用" class="headerlink" title="4.1.2 机略作用"></a>4.1.2 机略作用</h4><ol>
<li><p><strong>使用战前道具</strong></p>
<p>喝酒/喝茶/用药/使用剑冢碎片改变人物属性，需要消耗机略等级。</p>
</li>
<li><p><strong>决定先后手</strong></p>
<ul>
<li>敌我双方剩余机略等级高者为先，低者为后。如果一致，则随机先后。</li>
<li>先手在战斗时初始拥有90%提气架势圈与3点移动力；后手在战斗时初始拥有60%的提气架势圈与2点移动力。</li>
</ul>
</li>
<li><p><strong>战斗策略</strong></p>
<ul>
<li>策略盘。消耗机略等级使用战斗机略，单选。机略消耗量由敌方机略数值影响。</li>
<li>策略盘根据队伍红蓝机略等级的不同分为两种：</li>
<li>当人物及队伍中的队员合计蓝色机略数&gt;红色机略数时，人物会采取近战策略</li>
<li>当人物及队伍中的队员合计蓝色机略数&lt;红色机略数时，人物会采取远程策略 </li>
</ul>
</li>
</ol>
<h3 id="4-2-伤害"><a href="#4-2-伤害" class="headerlink" title="4.2 伤害"></a>4.2 伤害</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">伤害 = 击中部位基础伤害(比如胸背1级伤口60，3级伤口180)*武功或者武器伤害百分比*对应的(破x-御x)/100*(1+内外功伤害加成)*暴击倍率</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此伤害公式仅供参考</p>
</blockquote>
<h3 id="4-3-伤势"><a href="#4-3-伤势" class="headerlink" title="4.3 伤势"></a>4.3 伤势</h3><p>在《太吾绘卷》中，玩家们对敌人所用的武功、武器不同，对敌人造成伤口破绽也会不同。我们对其伤口多次进行伤害后，后续的伤害会越来越高.</p>
<h4 id="4-3-1-功法造成的伤势"><a href="#4-3-1-功法造成的伤势" class="headerlink" title="4.3.1 功法造成的伤势"></a>4.3.1 功法造成的伤势</h4><p>所有攻击功法出招都是四次。</p>
<p>计算顺序为迅疾、精妙、力道。</p>
<p><img src="http://image.9game.cn/2018/10/15/25207027.jpg" alt="巨阙"></p>
<p>上图是巨阙的。</p>
<p>在功法属性一栏看到，读格子数目，迅疾，精妙，力道的比例分别为1：1：8。</p>
<p>那么前三招的发挥比例分别为10%，10%，80%。</p>
<p>假如你命中三维全压对面，最后一击的发挥比例就是<strong>10%+10%+80%=100%</strong></p>
<p>假如你的迅疾太低，己方迅疾低于敌方闪避,第一招被闪避了，那么最后一击的发挥比例就是<strong>10%+80%=90%</strong></p>
<p>此外，这几个颜色的格子还影响发挥比率。</p>
<p>计算方法为</p>
<p><strong>发挥比例100%【包括】以上，造成的伤势程度为致命伤;倍率为3倍。</strong></p>
<p><strong>发挥比例50%【包括】以上，造成的伤势程度为重伤;倍率为2倍。</strong></p>
<p>还拿巨阙做例子，第一击迅疾属性10%，轻伤，第二击精妙属性10%，轻伤，第三击力道属性80%，重伤。</p>
<p>最后一击100%，致命伤。</p>
<p>如果前两段都被格挡，只有第三段和第四段的话，就是80%+80%，两段都是重伤伤势，倍率为两倍，虽然被削弱但影响不是致命的。</p>
<h4 id="4-3-2-普攻造成的伤势"><a href="#4-3-2-普攻造成的伤势" class="headerlink" title="4.3.2 普攻造成的伤势"></a>4.3.2 普攻造成的伤势</h4><p>己方攻击命中属性略大于敌方防御防御属性,造成轻伤.</p>
<table>
<thead>
<tr>
<th style="text-align:center">使用武器</th>
<th style="text-align:center">招式</th>
<th style="text-align:center">攻击命中属性</th>
<th style="text-align:center">己方力道</th>
<th style="text-align:center">敌方卸力</th>
<th style="text-align:center">造成伤势</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">刀</td>
<td style="text-align:center">劈</td>
<td style="text-align:center">力道</td>
<td style="text-align:center">100</td>
<td style="text-align:center">99</td>
<td style="text-align:center">轻伤</td>
</tr>
</tbody>
</table>
<p>己方攻击命中属性大于敌方防御防御属性的两倍,造成重伤.</p>
<table>
<thead>
<tr>
<th style="text-align:center">使用武器</th>
<th style="text-align:center">招式</th>
<th style="text-align:center">攻击命中属性</th>
<th style="text-align:center">己方力道</th>
<th style="text-align:center">敌方卸力</th>
<th style="text-align:center">造成伤势</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">刀</td>
<td style="text-align:center">劈</td>
<td style="text-align:center">力道</td>
<td style="text-align:center">100</td>
<td style="text-align:center">50</td>
<td style="text-align:center">重伤</td>
</tr>
</tbody>
</table>
<p>技巧: 根据上述结论,可以适当堆砌己方命中属性使用正练空桑绝技剖腹切割法或正练百花谷绝技对敌方进行控制和提高己方伤害.</p>
<h3 id="4-4-破绽与闭穴"><a href="#4-4-破绽与闭穴" class="headerlink" title="4.4 破绽与闭穴"></a>4.4 破绽与闭穴</h3><h4 id="4-4-1-破绽"><a href="#4-4-1-破绽" class="headerlink" title="4.4.1 破绽"></a>4.4.1 破绽</h4><p><strong>破绽产生:</strong>  功法特效</p>
<p><strong>破绽作用:</strong>  对破绽部位造成伤害，会提高伤害，同时无视守御值</p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17btdqh26j30kq08qdkf.jpg" alt=""></p>
<h4 id="4-4-1-闭穴"><a href="#4-4-1-闭穴" class="headerlink" title="4.4.1 闭穴"></a>4.4.1 闭穴</h4><p><strong>闭穴产生:</strong>  功法特效</p>
<p><strong>闭穴作用:</strong>  闭穴会对闭穴的部位造成闭穴效果,不同的部位有不同的效果.</p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17btmteb4j30hu08k0wx.jpg" alt=""></p>
<h2 id="5-地区恩义的作用"><a href="#5-地区恩义的作用" class="headerlink" title="5 地区恩义的作用"></a>5 地区恩义的作用</h2><ul>
<li><strong>五仙教</strong> 五圣秘浴 消耗30%地区恩义 祛除所有毒素</li>
<li><strong>百花谷</strong> 起死回生 消耗30%地区恩义 治愈所有伤势</li>
<li><strong>狮相门</strong> 散播威名 消耗30%地区恩义 获得大量威望（约1000）</li>
<li><strong>铸剑山庄</strong> 欧冶古具 消耗50%地区恩义 自选获得三品锻造、制木、织锦、巧匠工具之一（仅余一次使用机会）</li>
<li><strong>璇女派</strong> 玉镜沉思 消耗50%地区恩义 看仙人弹琴改善某负面特性，看仙人舞剑增强某正面特性</li>
<li><strong>峨眉派</strong> 天府规略 消耗50%地区恩义 使太吾村中各资源点的规模提升</li>
<li><strong>无量金刚宗</strong> 搜集贡品 消耗20%地区恩义 获得大量金钱（一万多）</li>
<li><strong>武当派</strong> 七星调元 消耗30%地区恩义 使人物内息紊乱恢复</li>
<li><strong>界青门</strong> 委托暗杀 消耗30%地区恩义 需记住名字</li>
<li><strong>伏龙坛</strong> 龙岛忠仆 消耗30%地区恩义 获得好感每年加60的同道一名</li>
<li><strong>血犼教</strong> 血池秘法 消耗30%地区恩义 使人物进入（活回到）入邪的状态</li>
<li><strong>然山派</strong> 王禅典籍 消耗30%地区恩义 改变人物立场（约一格）</li>
<li><strong>少林派</strong> 念经忏悔 消耗20%地区恩义 减少人物恶名</li>
<li><strong>元山派</strong> 石牢静坐 消耗30%地区恩义 减少人物入邪程度</li>
<li><strong>空桑派</strong> 秘药延寿 消耗50%地区恩义 续命六年但同时将身中剧毒</li>
<li><strong>各地区大当家等红色人物</strong> 推恩施义 消耗20%地区恩义 增加地区安定、文化、资源</li>
<li><strong>各地区豪富等黄色人物</strong> 商会赞誉 消耗50%地区恩义 增加所选商会好感</li>
<li><strong>各地区二当家权贵等橙色人物</strong> 笼络人心 花一万买地区恩义</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17bu8r7x1j30g40ecqi6.jpg" alt=""></p>
<h1 id="三-一入江湖岁月催"><a href="#三-一入江湖岁月催" class="headerlink" title="三 一入江湖岁月催"></a>三 一入江湖岁月催</h1><h2 id="1-喜结良缘"><a href="#1-喜结良缘" class="headerlink" title="1 喜结良缘"></a>1 喜结良缘</h2><p>结婚条件: </p>
<ol>
<li><p>双方年龄必须满16岁</p>
</li>
<li><p>倾诉爱意成功</p>
</li>
</ol>
<blockquote>
<p>双方不是三代以内的直系血亲(德国骨科警告)</p>
</blockquote>
<h2 id="2-传宗接代"><a href="#2-传宗接代" class="headerlink" title="2 传宗接代"></a>2 传宗接代</h2><h3 id="2-1-触发生育的必要条件"><a href="#2-1-触发生育的必要条件" class="headerlink" title="2.1 触发生育的必要条件"></a>2.1 触发生育的必要条件</h3><p>1.双方为一男一女</p>
<p>2.双方关系为两情相悦/结发夫妻</p>
<p>3.双方在同一个格子</p>
<h3 id="2-2-影响生育几率的因素"><a href="#2-2-影响生育几率的因素" class="headerlink" title="2.2 影响生育几率的因素"></a>2.2 影响生育几率的因素</h3><ul>
<li><strong>年龄:</strong> 30岁之后生育几率大幅下降</li>
<li><strong>特性:</strong> 父母双方某些不良特性会降低生育几率.eg: 石芯玉女,无根之人</li>
<li><strong>立场:</strong>  立场为刚正的NPC在与玩家成为结发夫妻之前基本不会与玩家进行生育互动;立场为叛逆的NPC可在与玩家成为结发夫妻之前和玩家进行生育互动.</li>
</ul>
<blockquote>
<p>此立场因素并不影响NPC之间的生育互动</p>
</blockquote>
<h3 id="2-3-子女的继承项目"><a href="#2-3-子女的继承项目" class="headerlink" title="2.3 子女的继承项目"></a>2.3 子女的继承项目</h3><h4 id="2-3-1-相貌"><a href="#2-3-1-相貌" class="headerlink" title="2.3.1 相貌"></a>2.3.1 相貌</h4><p>子女的五官部件在爸妈的对应器官之间随机</p>
<h4 id="2-3-2-特性"><a href="#2-3-2-特性" class="headerlink" title="2.3.2 特性"></a>2.3.2 特性</h4><ul>
<li>父母共同拥有的特性必定会遗传</li>
<li>神锋敛彩,璞玉韬光,经文祝祷只要父母单方面拥有即可遗传</li>
</ul>
<p>其他的特性遗传个数与等级见下表:</p>
<p><img src="http://ww1.sinaimg.cn/large/006mfK1qly1g17bv4b3zxj309g0l5wfr.jpg" alt=""></p>
<p>如果人物遗传的特性达到三个，随机产生新特性的机会将减半，特性越多产生随机特性的机会越小，遗传特性达到七个后将不再有随机新特性.</p>
<blockquote>
<p>参考资料: 百度贴吧-吉祥的客栈-<a href="https://tieba.baidu.com/p/5917642695" target="_blank" rel="noopener">太吾遗传学</a></p>
</blockquote>
<h4 id="2-3-2-属性和资质"><a href="#2-3-2-属性和资质" class="headerlink" title="2.3.2 属性和资质"></a>2.3.2 属性和资质</h4><p><strong>子女某项属性和资质的数值</strong> = 父母对应属性之和的平均值+随机数</p>
<p><strong>属性和资质的提升:</strong></p>
<ul>
<li>如果玩家为女太吾,可在身怀六甲期间触发胎教事件提升子女的属性和资质.<ol>
<li>轻轻抚慰：加主要属性（人物的根骨等主要属性）</li>
<li>哼唱小曲：加技艺资质（随机技艺天赋或是全体提升）</li>
<li>调匀气息：加武学资质（随机武学天赋或是全部提升）</li>
</ol>
</li>
<li>将子女拉入同道,可在祠堂消耗威望对其传功提升其武学资质或者技艺资质</li>
</ul>
<h2 id="3-传剑"><a href="#3-传剑" class="headerlink" title="3 传剑"></a>3 传剑</h2><p>当玩家的健康值在时节更替后归零时/人物入魔,触发传剑.玩家可选择同道中的一人进行传剑;如果没有同道且没有开启随机继承人选项,游戏结束.</p>
<h3 id="3-1-传剑对被传剑人的影响"><a href="#3-1-传剑对被传剑人的影响" class="headerlink" title="3.1 传剑对被传剑人的影响"></a>3.1 传剑对被传剑人的影响</h3><ul>
<li>被传剑人会丧失自己原本的所有已习得功法,获得上一代太吾所有已习得功法</li>
<li>被传剑人会获得上一代太吾几乎所有资产,不能继承的资产包括:上一代太吾的衣服,上一代太吾获得的奇书宝典(除此之外均可继承)</li>
<li>被传剑人的身份会变为太吾传人</li>
</ul>
<h3 id="3-2-生平遗惠"><a href="#3-2-生平遗惠" class="headerlink" title="3.2 生平遗惠"></a>3.2 生平遗惠</h3><p>在选择传剑人之后,可根据上一代太吾的生平遗惠选择几项对下一代太吾有增益的增益效果.</p>
<h3 id="3-3-游戏选项变更"><a href="#3-3-游戏选项变更" class="headerlink" title="3.3 游戏选项变更"></a>3.3 游戏选项变更</h3><p>在传剑时,玩家可对游戏选项进行变更</p>
<p>eg: 游戏难度,侵袭速度,外道数量等</p>
<h1 id="四-不及人生一场醉"><a href="#四-不及人生一场醉" class="headerlink" title="四 不及人生一场醉"></a>四 不及人生一场醉</h1><p><strong>太吾历一年八月</strong></p>
<p>太吾降世,名为沈万三.沈万三自知天资愚钝,幸好他在梦中曾见过盛世光景,对建设颇有心得.于是他一心一意的建设着太吾村,除了参与每年的新春集会,几乎没有出过太吾村.</p>
<p><strong>太吾历十五年</strong></p>
<p>沈万三惊闻剑冢异动,惶惶不可终日,忙忙带上家乡美酒出门学艺. 听闻铸剑山庄广收门徒,有教无类,遂拜入山庄门下.习得十二路鱼肠刺剑.</p>
<p><strong>太吾历十六年</strong></p>
<p> 宁琴对沈万三倾心爱慕,追随其至逐剑山庄,沈万三感动不已便与宁琴成为结发夫妻,共度余生.</p>
<p><strong>太吾历十七年</strong></p>
<p>宁琴生子,取名沈灵虚.</p>
<p><strong>太吾历十七年</strong></p>
<p>宁琴生女,取名沈逍遥.</p>
<p><strong>太吾历二十年</strong></p>
<p>以十二路鱼肠刺剑平息剑冢异动.</p>
<p><strong>太吾历二十一年</strong></p>
<p>剑冢异动又起,沈万三心生愤慨,决心破除剑冢,以绝后患.</p>
<p><strong>太吾历二十二年</strong></p>
<p>沈万三大破剑冢溶尘隐,而后安心回到太吾村发展建设.</p>
<p><strong>太吾历二十三年</strong></p>
<p> 剑冢异动再起,沈万三心叹:不知这如履薄冰的日子还要持续多久,这便是太吾的宿命吗? 随后便再次踏入学艺之路.</p>
<p><strong>太吾历四十一年</strong></p>
<p>沈万三已将巨阙剑修得大成,锻造之术亦至宗师之境.但是因资质过低,修炼内功走火入魔,大限已至,传剑其女沈逍遥.沈逍遥乃是绝世奇才,战力惊人,刚刚接过剑柄便提刀杀向剑冢,三刀劈碎大玄凝.</p>
<p>沈逍遥觉剑冢之祸非一世之功,必须的给自己留下一个传承之人,便开始游历天下,寻一个资质上佳之人与之成婚诞下希望之火.</p>
<p><strong>太吾历四十二年</strong></p>
<p>寻寻觅觅,花费数年时间,终遇一文人,良材美玉资质上佳,与其共结连理,诞下一女,取名沈君鄂.</p>
<p><strong>太吾历五十九年</strong></p>
<p>沈逍遥以巨阙刀法连破五个剑冢,提刀而立,为之四顾,为之踌躇满志,一头杀入凤凰茧,不料身死道消.匆匆传剑其女沈君鄂.</p>
<p>沈逍遥: 只要让我在劈一刀,你必死无葬身之地! 奈何我伤势过重,已无力出招,我恨啊!我还没有做好准备,还没有给我的儿女传功啊!</p>
<p><strong>太吾历六十年</strong></p>
<p>沈君鄂接过剑柄,心道凤凰茧之败并非母亲功法不够凌厉,而是招架不足还为出招便已身死.我只需寻得一保命绝技便可攻破凤凰茧.</p>
<p>沈君鄂遍历天下,寻得一神功天蛇换骨,匆匆研习了几章得其效果便直奔剑冢而去.</p>
<p>沈君鄂将伏虞剑柄嵌入剑冢墓门,只听轰隆一声,大门应声而开,一个人影随之从剑冢中凑出.</p>
<p>金凰儿嬉笑着说:”我问你啊,方今之世，可有圣人吗?我等不到圣人,唯有出来寻找,且让我试试你可有圣人之才如何?’’不料话音未落,金凰儿便拔刀向沈君鄂劈来.</p>
<p>一番苦战,沈君鄂击败了金凰儿!</p>
<p>金凰儿虽身负重伤,却仍嘻嘻而笑: “不错,便是你啦!”</p>
<p>她说着,盛了一碗金黄的美酒递来给沈君鄂.</p>
<p><img src="http://i1.hdslb.com/bfs/archive/438663aa63d80aa07fb354ed38150e9a42f40ab1.jpg" alt="金凰儿"></p>
<p>沈君鄂不由自主的想要去接:”相枢降世入轮回,天下风云出我辈.一入江湖岁月催,不及人生一场醉.如此美酒,理应大醉一场!”</p>
<p>哪知一眨眼,眼前便什么也没有了.</p>
<h1 id="五-致谢词"><a href="#五-致谢词" class="headerlink" title="五 致谢词"></a>五 致谢词</h1><p>在我初次游玩《太吾绘卷》时,我遇到了许多艰难与困阻,我查询了众多攻略,一点一点拼凑出我的江湖.美好的假期结束了,我也应该去工作来维持生计.但是我希望当有新玩家来体验属于他们的江湖和感动时能少一些阻碍,基于此我编写了本篇攻略.</p>
<p>因为本篇攻略参考众多,没有一一列出,敬请见谅.</p>
<p>感谢《太吾绘卷》带给我的感动,是它让我谱写则属于自己的江湖,感谢《太吾绘卷》全体制作人员.感谢为《太吾绘卷》无私奉献的攻略作者们，在此，我再一次真诚地向帮助过我的攻略作者表示感谢!</p>
<h1 id="六-参考资料"><a href="#六-参考资料" class="headerlink" title="六 参考资料"></a>六 参考资料</h1><ol>
<li>灰机wiki-太吾绘卷-<a href="https://taiwu.huijiwiki.com/wiki/%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">灰机Wiki</a></li>
<li>NGA-UID:5758723-<a href="https://bbs.nga.cn/read.php?tid=15119057&amp;rand=963" target="_blank" rel="noopener">太吾百晓册</a></li>
<li>NGA-UID:157403-<a href="https://bbs.nga.cn/read.php?&amp;tid=15197500&amp;rand=998" target="_blank" rel="noopener"> 魅力捏脸手册 {09/30 更新：补充少量有关生孩子的机制} </a></li>
<li>百度贴吧-摇光为星-<a href="https://tieba.baidu.com/p/5900568013" target="_blank" rel="noopener">全特性效果总会图</a></li>
<li>百度贴吧-戳眼神教教主-<a href="https://tieba.baidu.com/p/6036237065" target="_blank" rel="noopener">各个剑冢boss的强度和应对方法</a></li>
</ol>
]]></content>
      <categories>
        <category>游戏攻略</category>
      </categories>
      <tags>
        <tag>太吾绘卷</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的inline元素、block元素、inline-block元素有哪些？它们之间有什么区别？</title>
    <url>/2018/10/03/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%831/%E5%B8%B8%E8%A7%81%E7%9A%84inline%E5%85%83%E7%B4%A0%E3%80%81block%E5%85%83%E7%B4%A0%E3%80%81inline-block%E5%85%83%E7%B4%A0%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>每个html标签元素都有其默认的元素类型，主要包括两大类:inline内联元素、block块元素。除默认为以上两种，还有部分标签元素叫可变元素，会根据上下文语境决定该元素为inline元素或是block元素。在css里，有一个display的属性，他规定元素应该生成的框的类型。可能的值有很多，inline、block、inline-block,其中inline-block是在css2.1里新增的值。具有这个值的元素，我们可以把它叫做inline-block元素。</p>
</blockquote>
<a id="more"></a>
<h1 id="一-inline元素、block元素、inline-block元素的具体解释"><a href="#一-inline元素、block元素、inline-block元素的具体解释" class="headerlink" title="一.inline元素、block元素、inline-block元素的具体解释"></a>一.inline元素、block元素、inline-block元素的具体解释</h1><h2 id="inline元素"><a href="#inline元素" class="headerlink" title="inline元素"></a>inline元素</h2><p>inline元素全称Inline Elements，英文原意:An inline element does not start on a new line and only takes up as much width as necessary.一个内联元素不会开始新的一行，并且只占有必要的宽度。</p>
<p><strong>特点:</strong></p>
<ul>
<li>和其他元素都在一行上；</li>
<li>元素的高度、宽度、行高及顶部和底部边距不可设置；</li>
<li>元素的宽度就是它包含的文字或图片的宽度，不可改变。</li>
</ul>
<h2 id="block元素"><a href="#block元素" class="headerlink" title="block元素"></a>block元素</h2><p>block元素全称Block-level Elements，英文原意:A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).一个块级元素总是开始新的一行，并且占据可获得的全部宽度(左右都会尽可能的延伸到它能延伸的最远)</p>
<p><strong>特点:</strong></p>
<ul>
<li>每个块级元素都从新的一行开始，并且其后的元素也另起一行。（一个块级元素独占一行）;</li>
<li>元素的高度、宽度、行高以及顶和底边距都可设置;</li>
<li>元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。</li>
</ul>
<h2 id="inline-block元素"><a href="#inline-block元素" class="headerlink" title="inline-block元素"></a>inline-block元素</h2><p>inline-block元素，英文释义:inline-block elements are like inline elements but they can have a width and a height.它像内联元素，但具有宽度和高度。</p>
<p><strong>特点:</strong></p>
<ul>
<li>和其他元素都在一行上；</li>
<li>元素的高度、宽度、行高以及顶和底边距都可设置</li>
</ul>
<h1 id="二-常见的inline元素、block元素、inline-block元素"><a href="#二-常见的inline元素、block元素、inline-block元素" class="headerlink" title="二.常见的inline元素、block元素、inline-block元素"></a>二.常见的inline元素、block元素、inline-block元素</h1><h2 id="常见的inline内联元素："><a href="#常见的inline内联元素：" class="headerlink" title="常见的inline内联元素："></a>常见的inline内联元素：</h2><p>span、img、a、lable、input、abbr（缩写）、em（强调）、big、cite（引用）、i（斜体）、q（短引用）、textarea、select、small、sub、sup，strong、u（下划线）、button（默认display：inline-block））</p>
<h2 id="常见的block块级元素："><a href="#常见的block块级元素：" class="headerlink" title="常见的block块级元素："></a>常见的block块级元素：</h2><p>div、p、h1…h6、ol、ul、dl、table、address、blockquote、form</p>
<h2 id="常见的inline-block内联块元素："><a href="#常见的inline-block内联块元素：" class="headerlink" title="常见的inline-block内联块元素："></a>常见的inline-block内联块元素：</h2><p>img、input</p>
<h1 id="三-的inline元素、block元素、inline-block元素的区别"><a href="#三-的inline元素、block元素、inline-block元素的区别" class="headerlink" title="三.的inline元素、block元素、inline-block元素的区别"></a>三.的inline元素、block元素、inline-block元素的区别</h1><ul>
<li><p>块级元素会独占一行，而内联元素和内联块元素则会在一行内显示。</p>
</li>
<li><p>块级元素和内联块元素可以设置 width、height 属性，而内联元素设置无效。</p>
</li>
<li><p>块级元素的 width 默认为 100%，而内联元素则是根据其自身的内容或子元素来决定其宽度。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>如何理解盒模型及其content、padding、border、margin？</title>
    <url>/2018/10/03/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%831/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6content%E3%80%81padding%E3%80%81border%E3%80%81margin%EF%BC%9F/</url>
    <content><![CDATA[<p>如何理解盒模型及其content、padding、border、margin？</p>
<blockquote>
<p>当对一个文档进行布局(laying out)的时候，浏览器渲染引擎会根据CSS-Box模型（CSS Basic Box model）将所有元素表示为一个矩形盒子（box)。CSS决定这些盒子的大小，位置以及属性（颜色，背景，边框尺寸…).</p>
</blockquote>
<a id="more"></a>
<h1 id="一-CSS标准盒子模型"><a href="#一-CSS标准盒子模型" class="headerlink" title="一.CSS标准盒子模型"></a>一.CSS标准盒子模型</h1><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5ydW5vb2IuY29tL2ltYWdlcy9ib3gtbW9kZWwuZ2lm" alt="标准盒子模型">。</p>
<h2 id="1-内容区域content"><a href="#1-内容区域content" class="headerlink" title="1. 内容区域content"></a>1. 内容区域content</h2><p>内容区域content area 是包含元素真实内容的区域。它通常包含背景、颜色或者图片等，位于内容边界的内部，它的大小为内容宽度 或 content-box宽及内容高度或content-box高。</p>
<p>如果 box-sizing 为默认值， width, min-width, max-width, height, min-height 与 max-height 控制内容大小。</p>
<h2 id="2-内边距区域padding"><a href="#2-内边距区域padding" class="headerlink" title="2. 内边距区域padding"></a>2. 内边距区域padding</h2><p>内边距区域padding area 延伸到包围padding的边框。如果内容区域content area设置了背景、颜色或者图片，这些样式将会延伸到padding上(而不仅仅是作用于内容区域)。它位于内边距边界内部, 它的大小为 padding-box 宽与 padding-box 高。</p>
<p>内边距与内容边界之间的空间可以由 padding-top, padding-right, padding-bottom, padding-left 和简写属性 padding 控制。</p>
<h2 id="3-边框区域border"><a href="#3-边框区域border" class="headerlink" title="3. 边框区域border"></a>3. 边框区域border</h2><p>边框区域border area 是包含边框的区域，扩展了内边距区域。它位于边框边界内部，大小为 border-box 宽和 border-box 高。由 border-width 及简写属性 border控制。</p>
<h2 id="4-外边距区域margin"><a href="#4-外边距区域margin" class="headerlink" title="4.  外边距区域margin"></a>4.  外边距区域margin</h2><p>外边距区域margin area用空白区域扩展边框区域，以分开相邻的元素。它的大小为 margin-box 的高宽。</p>
<p>外边距区域大小由 margin-top, margin-right, margin-bottom, margin-left 及简写属性 margin 控制。</p>
<p><strong>注意</strong>:</p>
<ul>
<li><p>在外边距合并 的情况下，由于盒之间共享外边距，外边距不容易弄清楚。</p>
</li>
<li><p>对于非替换的行内元素来说，尽管内容周围存在内边距与边框，但其占用空间（行高）由 line-height 属性决定。</p>
</li>
</ul>
<h1 id="二-浏览器兼容"><a href="#二-浏览器兼容" class="headerlink" title="二. 浏览器兼容"></a>二. 浏览器兼容</h1><p>一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。</p>
<p>虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素。</p>
<p>IE8 及更早IE版本不支持设置填充的宽度和边框的宽度属性。</p>
<p>解决IE8及更早版本不兼容问题可以在HTML页面声明<code>&lt;!DOCTYPE html&gt;</code>即可。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>webstorm默认配置下的常用快捷键</title>
    <url>/2018/10/03/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/webstorm%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E4%B8%8B%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>mac book 下文的 ctrl 替换成 command 键。</p><h1 id="查找-代替"><a href="#查找-代替" class="headerlink" title="查找/代替"></a>查找/代替</h1><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>ctrl+shift+N</strong></td>
<td>通过文件名快速查找工程内的文件（必记）</td>
</tr>
<tr>
<td><strong>ctrl+shift+alt+N</strong></td>
<td>通过一个字符快速查找位置（必记）</td>
</tr>
<tr>
<td><strong>ctrl+F</strong></td>
<td>在文件内快速查找代码</td>
</tr>
<tr>
<td><strong>F3</strong></td>
<td>查找下一个</td>
</tr>
<tr>
<td><strong>shift+F3</strong></td>
<td>查找上一个</td>
</tr>
<tr>
<td><strong>ctrl+R</strong></td>
<td>文件内代码替换</td>
</tr>
<tr>
<td><strong>ctrl+shift+R</strong></td>
<td>指定目录内代码批量替换</td>
</tr>
<tr>
<td><strong>ctrl+shift+F</strong></td>
<td>指定目录内代码批量查找</td>
</tr>
<tr>
<td><strong>ctrl+R</strong></td>
<td>文件内代码替换</td>
</tr>
</tbody>
</table><a id="more"></a>

<h1 id="界面操作"><a href="#界面操作" class="headerlink" title="界面操作"></a>界面操作</h1><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>ctrl+shift+A</strong></td>
<td>快速查找并使用编辑器所有功能（必记）</td>
</tr>
<tr>
<td><strong>alt+[0-9]</strong></td>
<td>快速拆合功能界面模块</td>
</tr>
<tr>
<td><strong>ctrl+shift+F12</strong></td>
<td>最大区域显示代码（会隐藏其他的功能界面模块）</td>
</tr>
<tr>
<td><strong>alt+shift+F</strong></td>
<td>将当前文件加入收藏夹</td>
</tr>
<tr>
<td><strong>ctrl+alt+s</strong></td>
<td>打开配置窗口</td>
</tr>
<tr>
<td><strong>ctrl+tab</strong></td>
<td>切换代码选项卡（还要进行此选择，效率差些）</td>
</tr>
<tr>
<td><strong>alt+&lt;-或-&gt;</strong></td>
<td>切换代码选项卡</td>
</tr>
</tbody>
</table>
<h1 id="代码编辑-必记"><a href="#代码编辑-必记" class="headerlink" title="代码编辑(必记)"></a>代码编辑(必记)</h1><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>ctrl+D</strong></td>
<td>复制当前行</td>
</tr>
<tr>
<td><strong>ctrl+W</strong></td>
<td>选中单词</td>
</tr>
<tr>
<td><strong>ctrl+&lt;-或-&gt;</strong></td>
<td>以单词作为边界跳光标位置</td>
</tr>
<tr>
<td><strong>alt+Insert</strong></td>
<td>新建一个文件或其他</td>
</tr>
<tr>
<td><strong>ctrl+alt+L</strong></td>
<td>格式化代码</td>
</tr>
<tr>
<td><strong>shift+tab/tab</strong></td>
<td>减少/扩大缩进（可以在代码中减少行缩进）</td>
</tr>
<tr>
<td><strong>ctrl+Y</strong></td>
<td>删除一行</td>
</tr>
<tr>
<td><strong>shift+enter</strong></td>
<td>重新开始一行（无论光标在哪个位置）</td>
</tr>
</tbody>
</table>
<h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>esc</strong></td>
<td>进入代码编辑区域</td>
</tr>
<tr>
<td><strong>alt+F1</strong></td>
<td>查找代码在其他界面模块的位置，颇为有用</td>
</tr>
<tr>
<td><strong>ctrl+G</strong></td>
<td>到指定行的代码</td>
</tr>
<tr>
<td><strong>ctrl+]/[</strong></td>
<td>光标到代码块的前面或后面</td>
</tr>
<tr>
<td><strong>alt+up/down</strong></td>
<td>上一个/下一个方法</td>
</tr>
</tbody>
</table>
<h1 id="建议配置版本控制快捷键"><a href="#建议配置版本控制快捷键" class="headerlink" title="建议配置版本控制快捷键"></a>建议配置版本控制快捷键</h1><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>ctrl+C</strong></td>
<td>提交代码</td>
</tr>
<tr>
<td><strong>ctrl+p</strong></td>
<td>向远程版本库推送更新</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>加和不加meta的viewport有什么区别？</title>
    <url>/2018/10/03/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%831/%E5%8A%A0%E5%92%8C%E4%B8%8D%E5%8A%A0meta%E7%9A%84viewport%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>在使用视窗宽度vw时，需要加入一个<code>&lt;meta&gt;</code>标签，这个标签究竟起什么作用，如果不加对网页有何影响呢？</p>
</blockquote>
<a id="more"></a>
<h1 id="什么是viewport？"><a href="#什么是viewport？" class="headerlink" title="什么是viewport？"></a>什么是viewport？</h1><p><strong>vieport</strong>是用户在网页上的可见区域。 </p>
<h1 id="什么是meta？"><a href="#什么是meta？" class="headerlink" title="什么是meta？"></a>什么是meta？</h1><p>w<br><code>&lt;meta&gt;</code>是HTML5中引入的一种使设计人员标记控制<strong>vieport</strong>的标签。</p>
<h1 id="为什么要加入-lt-meta-gt-，不加会有什么影响？"><a href="#为什么要加入-lt-meta-gt-，不加会有什么影响？" class="headerlink" title="为什么要加入&lt;meta&gt;，不加会有什么影响？"></a>为什么要加入<code>&lt;meta&gt;</code>，不加会有什么影响？</h1><p><strong>vieport</strong>随设备而异，并且在移动电话上会比在计算机屏幕上小。</p>
<p>在平板电脑和手机之前，网页仅设计用于计算机屏幕，并且网页具有静态设计和固定大小是很常见的。</p>
<p>然后，当我们开始使用平板电脑和手机上网时，固定大小的网页太大，无法容纳视口。要解决此问题，这些设备上的浏览器会<strong>按比例缩小整个网页以适合屏幕大小</strong>。这样用户的观看体验会比较差！这不是完美的！</p>
<h2 id="如何使用-lt-meta-gt-？"><a href="#如何使用-lt-meta-gt-？" class="headerlink" title="如何使用 &lt;meta&gt;？"></a>如何使用 <code>&lt;meta&gt;</code>？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;meta&gt;</code>标签是如何控制网页的尺寸和缩放浏览器的说明。</p>
<p><strong>width=device-width</strong>部分将页面的宽度设置为跟随设备的屏幕宽度（视设备而定）。</p>
<p><strong>initial-scale=1.0</strong>部分设置浏览器首次加载页面时的初始缩放级别。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>IDE是什么？它和文本编辑器相比有什么优缺点？</title>
    <url>/2018/10/03/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%831/IDE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%AE%83%E5%92%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9B%B8%E6%AF%94%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>在我们学习it的时候，不可避免的会遇到一个问题，那就是我们使用什么来编写代码呢？</p>
</blockquote>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><p>文本编辑器是计算机软件中的一种。主要用于用来编写和查看文本文件。</p>
<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>IDE是带有软件开发功能的“集成开发环境”。  </p>
<p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。</p>
<h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>节省时间和精力。IDE的目的就是要让开发更加快捷方便，通过提供工具和各种性能来帮助开发者组织资源，减少失误，提供捷径。</li>
<li>建立统一标准。当一组程序员使用同一个开发环境时，就建立了统一的工作标准，当IDE提供预设的模板，或者不同团队分享代码库时，这一效果就更加明显了。</li>
<li>管理开发工作。首先，IDE提供文档工具，可以自动输入开发者评论，或者迫使开发者在不同区域编写评论。其次，IDE可以展示资源，更便于发现应用所处位置，无需在文件系统里面艰难的搜索。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>学习曲线问题。IDE基本上是比较复杂的工具，为了更好的熟练使用，需要一定的时间和耐心。</li>
<li>初学者的困难。对初学者来说，使用IDE来学习开发有相当的难度，不适合学习一种新语言时使用。</li>
<li>无法修复坏代码或设计。开发者不能完全依赖工具的便捷，还是必须保持专业水准和熟练度，开发的成果好坏主要还是看开发员的技术。</li>
</ul>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
  </entry>
  <entry>
    <title>九宫格的布局你还能想到哪些办法实现？它们各自的优势劣势是什么？</title>
    <url>/2018/10/03/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%831/%E4%B9%9D%E5%AE%AB%E6%A0%BC%E7%9A%84%E5%B8%83%E5%B1%80%E4%BD%A0%E8%BF%98%E8%83%BD%E6%83%B3%E5%88%B0%E5%93%AA%E4%BA%9B%E5%8A%9E%E6%B3%95%E5%AE%9E%E7%8E%B0%EF%BC%9F%E5%AE%83%E4%BB%AC%E5%90%84%E8%87%AA%E7%9A%84%E4%BC%98%E5%8A%BF%E5%8A%A3%E5%8A%BF%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>九宫格布局是我们在网页开发中常用的布局之一，那么如何使用代码完成它呢？</p>
</blockquote>
<a id="more"></a>
<h1 id="设置垂直方向的padding撑开容器"><a href="#设置垂直方向的padding撑开容器" class="headerlink" title="设置垂直方向的padding撑开容器"></a>设置垂直方向的padding撑开容器</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div.box &#123;</span><br><span class="line">    width: 30%;</span><br><span class="line">    padding-bottom: 30%;</span><br><span class="line">    margin: 1%;</span><br><span class="line">    background-color: orange;</span><br><span class="line">    float: left;</span><br><span class="line">    border-radius: 5%;</span><br><span class="line">&#125;</span><br><span class="line">div &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">   padding-bottom: 30%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 CSS 盒模型中，一个比较容易被忽略的就是 margin, padding 的百分比数值计算。按照规定，margin, padding 的百分比数值是相对 父元素宽度 的宽度计算的。由此可以发现只需将元素垂直方向的一个 padding 值设定为与 width 相同的百分比就可以制作出自适应正方形了：</p>
<p>优点：简洁明了，且兼容性好</p>
<p>缺点：填充内容后会出现问题</p>
<h1 id="viewport-使用vw单位"><a href="#viewport-使用vw单位" class="headerlink" title="viewport 使用vw单位"></a>viewport 使用vw单位</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div.box &#123;</span><br><span class="line">    width: 30vw;</span><br><span class="line">    height: 30vw;</span><br><span class="line">    margin: 1vw;</span><br><span class="line">    background-color: orange;</span><br><span class="line">    float: left;</span><br><span class="line">    border-radius: 5%;</span><br><span class="line">&#125;</span><br><span class="line">div &#123;</span><br><span class="line">    width: 100vw;</span><br><span class="line">    height: 100vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点：简洁方便</p>
<p>缺点：浏览器兼容不好</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
      <tags>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML文件里开头的!Doctype有什么作用？</title>
    <url>/2018/10/03/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%831/HTML%E6%96%87%E4%BB%B6%E9%87%8C%E5%BC%80%E5%A4%B4%E7%9A%84-Doctype%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>每个 HTML 文件里开头都有个很重要的东西<code>&lt;!DOCTYPE html&gt;</code>,DOCTYPE是document type的简写，它并不是 HTML 标签，也没有结束标签，它是一种标记语言的文档类型声明，即告诉浏览器当前 HTML 是用什么版本编写的。</p>
</blockquote>
<a id="more"></a>
<h1 id="一-背景介绍"><a href="#一-背景介绍" class="headerlink" title="一. 背景介绍"></a>一. 背景介绍</h1><h2 id="什么是DOCTYPE"><a href="#什么是DOCTYPE" class="headerlink" title="什么是DOCTYPE?"></a>什么是DOCTYPE?</h2><p>DOCTYPE是document type的简写，它并不是 HTML 标签，也没有结束标签，它是一种标记语言的文档类型声明，即告诉浏览器当前 HTML 是用什么版本编写的。</p>
<p><strong>注意</strong>: DOCTYPE的声明必须是 HTML 文档的第一行，位于html标签之前。大多数Web文档的顶部都有doctype声明，它是在新建一个文档时，由Web创作软件草率处理的众多细节之一。很少人会去注意 doctype ，但在遵循标准的任何Web文档中，它都是一项必需的元素。doctype会影响代码验证，并决定了浏览器最终如何显示你的 Web文档。</p>
<h1 id="二-知识剖析"><a href="#二-知识剖析" class="headerlink" title="二. 知识剖析"></a>二. 知识剖析</h1><h2 id="DOCTYPE的作用"><a href="#DOCTYPE的作用" class="headerlink" title="DOCTYPE的作用?"></a>DOCTYPE的作用?</h2><p>DOCTYPE是document type(文档类型)的简写，在web设计中用来声明文档类型。<br>在所有 HTML 文档中规定 DOCTYPE 是非常重要的，这样浏览器就能了解预期的文档类型， 告诉浏览器要通过哪一种规范（DTD）解析文档（比如HTML或XHTML规范）。<br>DOCTYPE会影响代码验证，并决定了浏览器最终如何显示你的Web文档。</p>
<h2 id="HTML-4-01-和-HTML5-中-DOCTYPE的区别"><a href="#HTML-4-01-和-HTML5-中-DOCTYPE的区别" class="headerlink" title="HTML 4.01 和 HTML5 中 DOCTYPE的区别"></a>HTML 4.01 和 HTML5 中 DOCTYPE的区别</h2><ul>
<li>HTML 4.01 中的 doctype 需要对 DTD 进行引用，因为 HTML 4.01 基于 SGML。</li>
<li>HTML 5 不基于 SGML，因此不需要对 DTD 进行引用，但是需要 doctype 来规范浏览器的行为（html 5简化了这种声明，意在告诉浏览器使用统一的标准即可）。</li>
</ul>
<h1 id="三-代码实战"><a href="#三-代码实战" class="headerlink" title="三.  代码实战"></a>三.  代码实战</h1><h2 id="如何使用DOCTYPE"><a href="#如何使用DOCTYPE" class="headerlink" title="如何使用DOCTYPE?"></a>如何使用DOCTYPE?</h2><p>HTML 文档的第一行，位于html标签之前  ,引入DOCTYPE声明。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>注意事项:</strong>DOCTYPE的声明必须是 HTML 文档的第一行，位于html标签之前。在DOCTYPE声明前面出现了这些内容：普通文本、HTML 标签、HTML 注释、XML 声明、IE条件注释,会导致HTML 进入怪异模式.</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用浏览器的F12调试页面</title>
    <url>/2018/10/03/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/CSS%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%831/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84F12%E8%B0%83%E8%AF%95%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<blockquote>
<p>一个程序员按照要求编写一个网页，不可能一次编写就完全达到目的，一般要对自己的的代码修改调试几次后才能到达要求，浏览器的F12开发人员工具就可以很方便的帮助程序员调试自己的代码。</p>
</blockquote>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>F12 开发人员工具是一套按需采用的工具，网站开发人员可以随时在任何网页上使用 F12 工具，从而快速调试 JavaScript、HTML 和级联样式表 (CSS)，还可以跟踪并查明网页或网络的性能问题。</p>
<h1 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h1><p>项目： </p>
<p> element（元素）标签页：可以查看代码  </p>
<p>sources（软件源）标签页：可以选取css文件、html文件并进行修改  </p>
<p>快捷键：  </p>
<p>ctrl+shift+c 选取元素进行查看  </p>
<p>ctrl+shift+m 模拟移动端进行查看 </p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
        <category>深度思考</category>
      </categories>
      <tags>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo快速入门</title>
    <url>/2018/09/03/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/hexo%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>详细信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="启用本地预览服务"><a href="#启用本地预览服务" class="headerlink" title="启用本地预览服务"></a>启用本地预览服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>详细信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>详细信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>详细信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>js取出事件对象中对应的值显示未定义</title>
    <url>/2018/08/30/JS/js%E5%8F%96%E5%87%BA%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%AF%B9%E5%BA%94%E7%9A%84%E5%80%BC%E6%98%BE%E7%A4%BA%E6%9C%AA%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<blockquote>
<p>问题描述:微信小程序使用<code>data-*</code>向事件内存储对象,js中取出对应值时显示未定义.</p>
</blockquote>
<a id="more"></a>
<p>wxml<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;text class=&quot;authorName db&quot; catchtap=&quot;toListDetail&quot; data-videoId=&quot;&#123;&#123;item.id&#125;&#125;&quot;&gt;&#123;&#123;item.teacher&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure></p>
<p>js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toListDetail:function (event) &#123;</span><br><span class="line">       let videoId = event.target.dataset.videoId;</span><br><span class="line">       console.log(videoId);//undefined</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>#问题出现原因:<br><code>data-*</code>书写方式： 以data-开头，多个单词由连字符-链接，连字符转成驼峰,不能有大写,大写会自动转成小写;</p>
<ul>
<li>如data-element-type，最终在 event.currentTarget.dataset 中会将连字符转成驼峰elementType。</li>
<li>如data-videoId，最终在 event.currentTarget.dataset 中大写会自动转成小写  videoid。<br>| wxml  |  event.currentTarget.dataset |<br>| ———— | ———— |<br>|  data-element-type |  elementType |<br>| data-videoId  |  videoid |</li>
</ul>
<h1 id="问题解决办法"><a href="#问题解决办法" class="headerlink" title="问题解决办法:"></a>问题解决办法:</h1><ul>
<li>在组件中使用<code>data-*</code>定义数据，注意字母大小写.</li>
<li>需要使用驼峰命名的时候,以连字符拼接.</li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
        <category>遇到的问题</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序setData中键名key中使用变量</title>
    <url>/2018/08/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FsetData%E4%B8%AD%E9%94%AE%E5%90%8Dkey%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<blockquote>
<p>setData 函数用于将数据从逻辑层发送到视图层（异步）,同时改变对应的 this.data 的值（同步）.setData中可以传入的参数Object 以 key: value 的形式表示,将 this.data 中的 key 对应的值改变成 value。其中 key 可以以数据路径的形式给出，支持改变数组中的某一项或对象的某个属性,有时我们需要在使用变量表示key,这时应该如何操作呢.</p>
</blockquote>
<a id="more"></a>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h1><p><strong>例一:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binddata: function (e) &#123;</span><br><span class="line">      var idNum = e.target.id;</span><br><span class="line">      this.setData(&#123; idNum: e.detail.value &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>idNum传过去，直接是data中多了一个’idNum’的数据，不是动态的id数值.</p>
<p><strong>例二:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">changeIntro:function (event) &#123;</span><br><span class="line">     let videoArrayIndex = event.target.dataset.index;</span><br><span class="line">     this.setData(&#123;</span><br><span class="line">         &apos;videoArray[videoArrayIndex].introState&apos; : true</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>无法改变introState的值,因为videoArrayIndex没有被解析为序列号.</p>
<p>#解决办法:</p>
<p>##一. 用一个空对象暂存<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var data = &#123;&#125;</span><br><span class="line">data[key] = value // key 可以是任何字符串</span><br><span class="line">this.setData(data)</span><br></pre></td></tr></table></figure></p>
<p>使用一个中间对象暂存解决上述例二<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">changeIntro:function (event) &#123;</span><br><span class="line">        let videoArrayIndex = event.target.dataset.index;</span><br><span class="line">        let dataIntro = &#123;&#125;;</span><br><span class="line">        let keyIntro = &apos;videoArray[&apos;+videoArrayIndex+&apos;].introState&apos;;</span><br><span class="line">        dataIntro[keyIntro] = true; // key 可以是任何字符串</span><br><span class="line">        this.setData(dataIntro)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="二-使用es6新特性"><a href="#二-使用es6新特性" class="headerlink" title="二. 使用es6新特性"></a>二. 使用es6新特性</h2><p>ES6 允许声明在对象字面量时使用简写语法，来初始化属性变量和函数的定义方法，并且允许在对象属性中进行计算操作：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.setData(&#123;</span><br><span class="line">           [key]: value</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></p>
<p>使用es6新特性解决上述例二<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">changeIntro:function (event) &#123;</span><br><span class="line">      let videoArrayIndex = event.target.dataset.index;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">          [&apos;videoArray[&apos;+videoArrayIndex+&apos;].introState&apos;] : true</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序实现视图向js传递参数</title>
    <url>/2018/08/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E8%A7%86%E5%9B%BE%E5%90%91js%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<p>有时候我们需要从小程序的视图页面向js文件传递参数,通过阅读官方文档发现可以通过向事件触发时绑定的事件对象存储数据达到效果.</p>
</blockquote>
<a id="more"></a>
<p>#实现原理<br>如无特殊说明，当组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象。<br><strong>微信小程序中的事件对象</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:center">String</td>
<td style="text-align:center">事件类型</td>
</tr>
<tr>
<td style="text-align:center">timeStamp</td>
<td style="text-align:center">Integer</td>
<td style="text-align:center">事件生成时的时间戳</td>
</tr>
<tr>
<td style="text-align:center">target</td>
<td style="text-align:center">Object</td>
<td style="text-align:center">触发事件的组件的一些属性值集合</td>
</tr>
<tr>
<td style="text-align:center">currentTarget</td>
<td style="text-align:center">Object</td>
<td style="text-align:center">当前组件的一些属性值集合</td>
</tr>
</tbody>
</table>
<p>视图层上可以通过设置<code>data-*</code>向事件对象中存储数据,js中可以获取该事件对象<code>event</code>并取出其中存储的数据,从而达到视图页面向js文件传递参数的效果.<br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">事件对象详解</a></p>
<h1 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h1><p><strong>wxml</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;view&gt;</span><br><span class="line">   &lt;button bindtap=&quot;showMoreText&quot; data-index=&quot;向js传递索引号&quot;&gt;</span><br><span class="line">    更多</span><br><span class="line">   &lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>js</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    showMoreText:function (event) &#123;</span><br><span class="line">        console.log(event);</span><br><span class="line">        console.log(event.target.dataset.index)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown中使用html标签</title>
    <url>/2018/08/28/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Markdown%E4%B8%AD%E4%BD%BF%E7%94%A8html%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<blockquote>
<p>有时候,我们会在笔记中使用一些HTML标签,但是Markdown中直接使用html标签会被解析为格式.该怎么书写，可以直接显示为html的标签呢.</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;这是一个标题&lt;/h1&gt;</span><br><span class="line">//其中的&lt;h1&gt;这是一个标题&lt;/h1&gt;总是会被解析为成html标签，而不是直接显示为html标签。</span><br></pre></td></tr></table></figure>
<h2 id="问题出现原因："><a href="#问题出现原因：" class="headerlink" title="问题出现原因："></a>问题出现原因：</h2><p>Markdown支持html语法，所以会对相应的标签进行解析。</p>
<h2 id="问题解决办法："><a href="#问题解决办法：" class="headerlink" title="问题解决办法："></a>问题解决办法：</h2><ol>
<li>使用引号把标签包起来<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`&lt;h1&gt;这是一个标题&lt;/h1&gt;`</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><code>&lt;h1&gt;这是一个标题&lt;/h1&gt;</code></p>
<ol start="2">
<li>使用转义字符来表示相应的标签<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;lt;h1&amp;gt;这是一个标题&amp;lt;/h1&amp;gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>&lt;h1&gt;这是一个标题&lt;/h1&gt;</p>
<hr>
<blockquote>
<p>相关工具： <a href="http://www.css88.com/tool/html-escape/" target="_blank" rel="noopener">HTML在线转义工具</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Markdown</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序页面跳转</title>
    <url>/2018/08/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<blockquote>
<p>路由：路由在项目开发中一直是个核心点，在这里其实微信对路由的介绍很少，可见微信在路由方面经过很好的封装，也提供三个跳转方法。</p>
</blockquote>
<a id="more"></a>
<h1 id="三个跳转方法"><a href="#三个跳转方法" class="headerlink" title="三个跳转方法"></a>三个跳转方法</h1><ul>
<li>wx.navigateTo(OBJECT)：保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。</li>
<li>wx.redirectTo(OBJECT)：关闭当前页面，跳转到应用内的某个页面。</li>
<li>wx.navigateBack()：关闭当前页面，回退前一页面。<br>这三个基本上使用足够，在路由方面微信封装的很好，开发者根本不用去配置路由，往往很多框架在路由方面配置很繁琐。</li>
</ul>
<h1 id="问题描述：路由跳转失败"><a href="#问题描述：路由跳转失败" class="headerlink" title="问题描述：路由跳转失败"></a>问题描述：路由跳转失败</h1><p><strong>出现原因</strong>：没有仔细看说明文档，需要在app。json中配置路由跳转的地址<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;:[</span><br><span class="line">    &quot;pages/personChoice/personChoice&quot;,</span><br><span class="line">    &quot;pages/result/result&quot;,</span><br><span class="line">    &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;pages/logs/logs&quot;</span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;:&#123;</span><br><span class="line">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;:&quot;black&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>解决办法：仔细看说明文档<br><strong>注意</strong>:微信小程序的跳转有个坑。只能保留10个页面。历史记录有十个页面之后，跳转会失效。所以要适当的清除历史记录。</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序上拉加载和下拉刷新</title>
    <url>/2018/08/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E5%92%8C%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</url>
    <content><![CDATA[<blockquote>
<p><strong>说明</strong>：要触发下拉刷新上拉加载事件，需要能够监听到事件才行 ,在需要实现下拉刷新上拉加载的页面配置对应页面xxx.json文件或者更改全局的app.json文件.</p>
</blockquote>
<a id="more"></a>
<h1 id="更改页面配置xxx-json文件"><a href="#更改页面配置xxx-json文件" class="headerlink" title="更改页面配置xxx.json文件"></a>更改页面配置xxx.json文件</h1><p>页面配置xxx.json文件中添加以下字段<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;enablePullDownRefresh&quot;:true,//是否开启下拉刷新</span><br><span class="line">    &quot;backgroundTextStyle&quot;:&quot;dark&quot;,//下拉背景字体、loading 图的样式，仅支持 dark/light，默认light不可见</span><br><span class="line">    &quot;onReachBottomDistance&quot;: 50//页面上拉触底事件触发时距页面底部距离，单位为px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="自定义上拉记载触发的函数"><a href="#自定义上拉记载触发的函数" class="headerlink" title="自定义上拉记载触发的函数"></a>自定义上拉记载触发的函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"> onReachBottom: function() &#123;</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">            title: &apos;上拉触底&apos;,</span><br><span class="line">            icon: &apos;success&apos;,</span><br><span class="line">            duration: 2000</span><br><span class="line">        &#125;);</span><br><span class="line">        console.log(&apos;--------上拉触底-------&apos;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序将时间戳转化为几天前</title>
    <url>/2018/08/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B0%86%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%87%A0%E5%A4%A9%E5%89%8D/</url>
    <content><![CDATA[<blockquote>
<p><strong>需求描述: </strong>文件创建时间与当前时间小于24小时,显示小时数,大于24小时,显示天数,时间戳转化为几天前，几小时前，几分钟前</p>
</blockquote>
<a id="more"></a>
<h1 id="代码演示wxs"><a href="#代码演示wxs" class="headerlink" title="代码演示wxs:"></a>代码演示wxs:</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var getDateDiff = function (dateTimeStamp) &#123;</span><br><span class="line">    var minute = 1000 * 60;</span><br><span class="line">    var hour = minute * 60;</span><br><span class="line">    var day = hour * 24;</span><br><span class="line">    var halfamonth = day * 15;</span><br><span class="line">    var month = day * 30;</span><br><span class="line">    var now = getDate();//有些特殊 不能使用 new Date()</span><br><span class="line">    var diffValue = now - dateTimeStamp;</span><br><span class="line">    if(diffValue &lt; 0)&#123;return;&#125;</span><br><span class="line">    var monthC =diffValue/month;</span><br><span class="line">    var weekC =diffValue/(7*day);</span><br><span class="line">    var dayC =diffValue/day;</span><br><span class="line">    var hourC =diffValue/hour;</span><br><span class="line">    var minC =diffValue/minute;</span><br><span class="line">    if(monthC&gt;=1)&#123;</span><br><span class="line">        result=&quot;&quot; + parseInt(monthC) + &quot;月前&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(weekC&gt;=1)&#123;</span><br><span class="line">        result=&quot;&quot; + parseInt(weekC) + &quot;周前&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(dayC&gt;=1)&#123;</span><br><span class="line">        result=&quot;&quot;+ parseInt(dayC) +&quot;天前&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(hourC&gt;=1)&#123;</span><br><span class="line">        result=&quot;&quot;+ parseInt(hourC) +&quot;小时前&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(minC&gt;=1)&#123;</span><br><span class="line">        result=&quot;&quot;+ parseInt(minC) +&quot;分钟前&quot;;</span><br><span class="line">    &#125;else</span><br><span class="line">        result=&quot;刚刚&quot;;</span><br><span class="line">    return result;</span><br><span class="line">&#125;;//时间戳转化为几天前，几小时前，几分钟前</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>wxs</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序视图层处理增强之WXS</title>
    <url>/2018/08/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%A7%86%E5%9B%BE%E5%B1%82%E5%A4%84%E7%90%86%E5%A2%9E%E5%BC%BA%E4%B9%8BWXS/</url>
    <content><![CDATA[<blockquote>
<p>WXS是专供WXML调用的有独立作用域的JS模块（不是全功能的JS，感觉有所限制）,可以在在视图层对数据进行格式化处理,起到过滤器的作用。</p>
</blockquote>
<a id="more"></a>
<p>熟悉微信小程序开发框架的开发者，肯定会对其视图层WXML中缺失的一个功能耿耿于怀，那就是没有办法在视图层对数据进行格式化处理。比如我们从后端获取到一个包含了时间戳数据的数组，然后需要在界面上把这些日期都格式化显示为2017-01-01这种格式的日期形式，在Vue, Angular之类的前端Web框架中，一般在视图层都提供了如filter之类相应比较好用的方案。<br>而在现有的微信小程序代码中？你能怎么做？估计我们的做法要么是在Page代码中遍历一次数组，做一下格式化；要么，只能让后端返回已经格式化好的数据了。</p>
<p>举个例子，在这之前，我们是没有办法在WXML的数据绑定括号<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>中调用JS函数的，所以在WXML层面就缺少了进一步做数据处理的能力。<br>下列代码是不工作的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- wxml文件 --&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;testFunc(name)&#125;&#125;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// some-page.js</span><br><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: &quot;一斤代码&quot;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    testFunc: function (name) &#123;</span><br><span class="line">          return &quot;Hello,&quot; + name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>而有了WXS之后，我们就可以实现我们预期的功能了：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- wxml文件 --&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;myModule.testFunc(name)&#125;&#125;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;wxs module=&quot;myModule&quot;&gt;</span><br><span class="line">    function testFunc(name) &#123;</span><br><span class="line">        return &quot;Hello,&quot; + name</span><br><span class="line">    &#125;</span><br><span class="line">    module.exports.testFunc = testFunc</span><br><span class="line">&lt;/wxs&gt;</span><br><span class="line"></span><br><span class="line">// some-page.js</span><br><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: &quot;一斤代码&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>WXS可以直接定义在wxml文件的<wxs>标签体中，也可以写在独立的.wxs后缀名的文件中，然后在wxml文件中通过<wxs src="...">的形式引入。<br>如要要在WXS代码中去引用其他独立.wxs文件，可以通过 require()函数来引入，基本上都是我们熟悉的方式：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var formatUtil = require(&quot;./format-util.wxs&quot;);</span><br><span class="line">var now = getDate()</span><br><span class="line"></span><br><span class="line">formatUtil.formatDate(now)</span><br></pre></td></tr></table></figure></wxs></wxs></p>
<p>所以，WXS在功能方面，并没有什么复杂的东西，唯一需要特别注意一些的，就是它的作用域了：</p>
<ul>
<li><wxs> 模块只能在定义模块的 WXML 文件中被访问到。使用 <include> 或 <import> 时，<wxs> 模块不会被引入到对应的 WXML 文件中。</wxs></import></include></wxs></li>
<li><template> 标签中，只能使用定义该 <template> 的 WXML 文件中定义的 <wxs> 模块。</wxs></template></template></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>wxs</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序设置过滤器将时间戳转化为日期字符串</title>
    <url>/2018/08/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E5%B0%86%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%97%A5%E6%9C%9F%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<blockquote>
<p>在微信开发小程序时，后台传入的日期数据可能是<strong>时间戳 </strong>而不是日期, 或者需要把日期转换成时间戳来做出相应的处理时,我们将用到时间戳和日期的相互转换.</p>
</blockquote>
<a id="more"></a>
<p>WXS是专供WXML调用的有独立作用域的JS模块（不是全功能的JS，感觉有所限制）,可以在在视图层对数据进行格式化处理,起到过滤器的作用。</p>
<h1 id="js文件"><a href="#js文件" class="headerlink" title="js文件"></a>js文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    timestamp: 1522117395730</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="wxml文件"><a href="#wxml文件" class="headerlink" title="wxml文件"></a>wxml文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;wxs module=&quot;m1&quot;&gt;</span><br><span class="line">  function format(ts) &#123;</span><br><span class="line">    var d = getDate(ts)</span><br><span class="line">    return [d.getFullYear(), d.getMonth()+1, d.getDate()].join(&apos;-&apos;)</span><br><span class="line">      + &apos; &apos;</span><br><span class="line">      + [d.getHours(), d.getMinutes(), d.getSeconds()].join(&apos;:&apos;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  module.exports.format = format</span><br><span class="line">&lt;/wxs&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt;&#123;&#123; timestamp &#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123; m1.format(timestamp) &#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong>wxs 获取当前日期不可以使用 new Date()，而需要使用 getDate() 代替。</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>wxs</tag>
      </tags>
  </entry>
  <entry>
    <title>简述JavaScript中this的指向</title>
    <url>/2018/08/27/JS/%E7%AE%80%E8%BF%B0JavaScript%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<blockquote>
<p><strong>this的指向</strong>：本文重点介绍this作为对象方法调用，作为函数调用，作为构造函数调用，和使用apply 或 call 调用这几种，其他的情况了解即可，<br>请牢记一点，<strong>this永远指向的是最后调用它的对象</strong>，也就是看它执行的时候是谁调用的。</p>
</blockquote>
<a id="more"></a>
<h1 id="一-背景介绍"><a href="#一-背景介绍" class="headerlink" title="一.背景介绍"></a>一.背景介绍</h1><p>   在面向对象的语言中（例如Java,C#等)，this含义是明确且具体的，即指向当前对象。一般在编译期绑定。而在javascript中，this是动态绑定的，它可以是全局对象、当前对象或者任意对象，这完全取决于函数的调用方式，并且在严格模式下也有不同，这就导致了this具备了多重含义，可以使得javascript更灵活的使用。但是，带来了灵活性的同时也会给我们初学者带来不少困惑。即使是细微的语法变化，都有可能意外改变this的值。</p>
<h1 id="二-知识剖析"><a href="#二-知识剖析" class="headerlink" title="二.知识剖析"></a>二.知识剖析</h1><p>JavaScript中函数的调用常用的有以下几种方式：</p>
<ul>
<li>作为对象方法调用</li>
<li>作为函数调用</li>
<li>作为构造函数调用</li>
<li>使用apply 或 call 调用</li>
</ul>
<p>下面我们将按照调用方式的不同，分别讨论this 的含义</p>
<p>1.纯粹的作为函数调用：全局函数中，this指向window</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>
<p>2.作为对象方法的调用：当函数被作为某个对象的方法调用时，this就是那个对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var name = &apos;火影&apos;;</span><br><span class="line">var person2 = &#123;</span><br><span class="line">    name: &apos;水影&apos;,</span><br><span class="line">    sayName: function() &#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var sayNameWin = person2.sayName;</span><br><span class="line">person2.sayName(); //水影</span><br><span class="line">sayNameWin(); //火影 作为 window 的方法被调用的</span><br></pre></td></tr></table></figure>
<p>3.作为构造函数调用：this指向新对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person3(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line">var person3 = new Person3(&apos;张飒&apos;);</span><br><span class="line">console.log(person3.name); //张飒</span><br></pre></td></tr></table></figure>
<p>4.apply、call调用：this指向改变后的调用这个函数的对象<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person4 = &#123;</span><br><span class="line">    name: &apos;人才&apos;</span><br><span class="line">&#125;;</span><br><span class="line">function fn() &#123;</span><br><span class="line">    console.log(this); //Object &#123;name: &quot;人才&quot;&#125;</span><br><span class="line">    console.log(this.name); //人才</span><br><span class="line">&#125;</span><br><span class="line">fn.apply(person4);</span><br></pre></td></tr></table></figure></p>
<h1 id="三-拓展思考"><a href="#三-拓展思考" class="headerlink" title="三.拓展思考"></a>三.拓展思考</h1><p>如何能加深记忆？<br>this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的。</p>
<h1 id="四-参考文献"><a href="#四-参考文献" class="headerlink" title="四.参考文献"></a>四.参考文献</h1><p><a href="https://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/" target="_blank" rel="noopener">深入浅出 JavaScript 中的 this</a><br><a href="http://caibaojian.com/toutiao/6859" target="_blank" rel="noopener">JavaScript中的this用法与指向</a><br><a href="https://www.zhihu.com/question/19636194" target="_blank" rel="noopener">如何理解 JavaScript 中的 this 关键字？</a></p>
<h1 id="五-更多讨论"><a href="#五-更多讨论" class="headerlink" title="五.更多讨论"></a>五.更多讨论</h1><h2 id="1-如果想让一个this指向函数内部，但是它指向了全局，有什么办法让它指向函数内部？"><a href="#1-如果想让一个this指向函数内部，但是它指向了全局，有什么办法让它指向函数内部？" class="headerlink" title="1. 如果想让一个this指向函数内部，但是它指向了全局，有什么办法让它指向函数内部？"></a>1. 如果想让一个this指向函数内部，但是它指向了全局，有什么办法让它指向函数内部？</h2><p>使用call方法或者apply方法给它指定this，或者把他作为对象的方法调用</p>
<h2 id="2-setTimeout、setInterval中的this是指向哪里？"><a href="#2-setTimeout、setInterval中的this是指向哪里？" class="headerlink" title="2. setTimeout、setInterval中的this是指向哪里？"></a>2. setTimeout、setInterval中的this是指向哪里？</h2><p>《 javascript 高级程序设计》中写到：“超时调用的代码都是在全局执行域中执行的”。setTimeout/setInterval 执行的时候，this 默认指向 window 对象，除非手动改变 this 的指向。</p>
<h2 id="3-简单说一下this-到底有几种指向？"><a href="#3-简单说一下this-到底有几种指向？" class="headerlink" title="3. 简单说一下this 到底有几种指向？"></a>3. 简单说一下this 到底有几种指向？</h2><p>我们重点掌握作为对象方法调用，作为函数调用，作为构造函数调用，和使用apply 或 call 调用这几种，其他的情况了解即可，</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title> 异步请求之设置请求头Content-Type</title>
    <url>/2018/08/25/JS/%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E4%B9%8B%E8%AE%BE%E7%BD%AEContent-Type/</url>
    <content><![CDATA[<blockquote>
<p><strong>什么是AJAX</strong>: 先给出结论——我们每日用到的AJAX，是通过javascript的XMLHttpRequest对象，使用HTTP请求，来直接与服务器通信。而angular的$http服务，其内部代码也是使用XMLHttpRequest对象来连接服务器。</p>
</blockquote>
<a id="more"></a>
<p>#问题：<br>为什么这个post请求不能成功，服务器返回码虽然是200，但它值总是不对？？？</p>
<p>#答案：<br>除开请求参数，请求地址等基本错误外，还有可能有一个非常重要的原因就是请求头中的Content-Type不对。</p>
<p>#基础知识：<br>HTTP，是一套网络通信规则，让我们可以通过浏览器等客户端请求和发送数据到服务器。</p>
<p>#每次HTTP通信需要完成7个步骤：<br>1.建立TCP连接<br>2.浏览器向服务器发送请求命令<br>3.浏览器发送请求头信息<br>4.服务器应答<br>5.服务器发送应答头信息<br>6.服务器向浏览器发送数据<br>7.关闭TCP连接</p>
<p>进一步诠释HTTP（可以不看的部分）：</p>
<h2 id="请求头声明有关浏览器和正文的一些相关信息"><a href="#请求头声明有关浏览器和正文的一些相关信息" class="headerlink" title="请求头声明有关浏览器和正文的一些相关信息"></a>请求头声明有关浏览器和正文的一些相关信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Encoding:gzip</span><br><span class="line">Content-Language:zh-CN</span><br><span class="line">Content-Type:text/html; charset=utf-8</span><br><span class="line">Date:Wed, 11 Jan 2017 01:48:38 GMT</span><br><span class="line">Pragma:no-cache</span><br><span class="line">Server:nginx/1.4.6 (Ubuntu)</span><br><span class="line">Transfer-Encoding:chunked</span><br></pre></td></tr></table></figure>
<h2 id="应答码"><a href="#应答码" class="headerlink" title="应答码"></a>应答码</h2><p>  1XX 收到请求，正在处理</p>
<p>  2XX 成功类</p>
<p>  3XX 重定向类</p>
<p>  4XX 客户端错误类（著名的404，表示请求的页面不存在）</p>
<p>  5XX 服务器错误类</p>
<h2 id="响应头也包含很多服务信息"><a href="#响应头也包含很多服务信息" class="headerlink" title="响应头也包含很多服务信息"></a>响应头也包含很多服务信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Accept:application/json, text/plain, */*</span><br><span class="line"> </span><br><span class="line"> Accept-Encoding:gzip, deflate, sdch</span><br><span class="line"> </span><br><span class="line"> Accept-Language:zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4</span><br><span class="line"> </span><br><span class="line"> Connection:keep-alive</span><br><span class="line"> </span><br><span class="line"> Cookie:JSESSIONID=aaa6A1XXqQ-QbbwfPOZGv</span><br><span class="line"> </span><br><span class="line"> Host:59.110.159.108</span><br><span class="line"> </span><br><span class="line"> Referer:http://59.110.159.108/luoboduo/html/index.html</span><br><span class="line"> </span><br><span class="line"> User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36</span><br></pre></td></tr></table></figure>
<h2 id="6-服务器返回的数据（JSON-XML-…-）"><a href="#6-服务器返回的数据（JSON-XML-…-）" class="headerlink" title="6.服务器返回的数据（JSON/XML/….）"></a>6.服务器返回的数据（JSON/XML/….）</h2><p><code>{&quot;code&quot;:0,&quot;message&quot;:&quot;success&quot;,&quot;onlineUserCount&quot;:&quot;&quot;,&quot;classCount&quot;:308,&quot;userCount&quot;:8507}</code></p>
<h1 id="详细讲讲Content-Type"><a href="#详细讲讲Content-Type" class="headerlink" title="详细讲讲Content-Type"></a>详细讲讲Content-Type</h1><p>因为POST请求的协议并没有规定数据必须使用什么编码方式，而数据发送出去，还要服务器解析成功才行。服务器则通常根据请求头里的Content-Type字段来获知消息是以什么方式编码，再以对应方式解析。而有的接口服务器则不能解析某些编码方式的数据。因此需要对Content-Type进行设置。</p>
<p>最常见的Content-Type列出如下：</p>
<p>##1. application/x-www-form-urlencoded</p>
<ul>
<li><p>最常见的POST提交格式，使用这个编码格式post的数据会以这种方式提交：key1=value1&amp;key2=value2。而我们的任务中所用到的大多数接口都只支持这种编码格式。</p>
</li>
<li><p>注意：jquery的POST默认就是application/x-www-form-urlencoded；而angular默认是application/json，而且若是提交的数据格式为json则需要序列化$.param(json)</p>
</li>
</ul>
<p>##2. multipart/form-data</p>
<ul>
<li><p>通常上传图片等文件会使用这种编码格式提交。</p>
</li>
<li><p>使用方法：</p>
<p> <code>var fd = new FormData(); fd.append(key, value);</code></p>
</li>
<li><p>注意：若使用jquery，Content-Type设置为false；若使用angular，Content-Type设置为undefind</p>
</li>
</ul>
<h2 id="3-application-json"><a href="#3-application-json" class="headerlink" title="3. application/json"></a>3. application/json</h2><ul>
<li><p>提交JSON格式的数据</p>
</li>
<li><p>注意：若使用jquery，json数据需要字符串化JSON.stringify()；若使用angular，直接使用json即可</p>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>xhr</tag>
      </tags>
  </entry>
  <entry>
    <title>如何验证程序是否完成，测试以及deBug?</title>
    <url>/2018/08/24/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E7%A8%8B%E5%BA%8F%E6%98%AF%E5%90%A6%E5%AE%8C%E6%88%90%EF%BC%8C%E6%B5%8B%E8%AF%95%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%AD%A3Bug/</url>
    <content><![CDATA[<blockquote>
<p>在日常中，我们码代码都是按照需求来的，为了验证我们的工作成果是否符合项目的需求，那么验证程序是否完成、测试以及修复bug就成了我们工作中非常重要的流程。</p>
</blockquote>
<a id="more"></a>
<h1 id="一-背景介绍"><a href="#一-背景介绍" class="headerlink" title="一.背景介绍"></a>一.背景介绍</h1><p>在日常中，我们码代码都是按照需求来的，为了验证我们的工作成果是否符合项目的需求，那么验证程序是否完成、测试以及修复bug就成了我们工作中非常重要的流程。</p>
<h1 id="二-知识剖析"><a href="#二-知识剖析" class="headerlink" title="二.知识剖析"></a>二.知识剖析</h1><ol>
<li>什么样的程序是完成的程序</li>
</ol>
<ul>
<li>从需求的角度看：满足用户的全部需求</li>
<li>从程序的角度看：代码不存在明显bug，结构明晰，逻辑通顺，有一定的优化</li>
<li>从UI图的角度看：较为完美的还原了UI图的设计</li>
<li>从后期版本维护迭代的角度看：注释完备，稳定性好，不加班的代码就是好代码</li>
</ul>
<ol start="2">
<li>测试：测试是使用人工操作或者软件自动运行的方式来检验它是否满足规定的需求或弄清预期结果与实际结果之间的差别的过程。<br>软件测试的方法</li>
</ol>
<ul>
<li>按照测试范围，可以分为模块测试和整体联调</li>
<li>按照测试条件，可以分为正常操作情况测试和异常情况测试</li>
<li>按照测试的输入范围，可以分为全覆盖测试和抽样测试</li>
<li>按照测试方式<br>模块测试：针对设计中的一个一个模块来进行测试的，目的是保证每个模块作为一个单元能正确运行，所以模块测试通常又被称为单元测试。在这个测试步骤中所发现的往往是编码和详细设计的错误。<br>整体联调：测试模块间接口的正确性、各模块间的数据流和控制流是否按照设计实现其功能、以及集成后整体功能的正确性。<br>正常操作情况测试：根据正确的操作流程对单独的模块或整体进行测试，确定被测对象可以良好运行<br>异常情况测试：异常情况，可能会包括数据库异常，系统异常，用户异常操作等情况<br>3.一些测试的概念<br>成熟性：软件产品要避免由软件中错误而导致失效的能力<br>容错性：在软件失效或者违反规定的接口的情况下，软件产品维持规定的性能级别的能力<br>易恢复性：在发生故障的情况下，软件重建规定的性能级别并恢复受直接影响的数据的能力<br>可靠性依从性：软件产品依附于同可靠性相关的标准、约定或规定的能力<br>全覆盖测试：对于被测对象全面，整体，多维度的测试，受限于时间和人力成本，除非被测对象级别很高，不然不会采用这种测试方式<br>抽样测试：针对功能及模块随机抽取被测对象</li>
</ul>
<h1 id="三-常见问题"><a href="#三-常见问题" class="headerlink" title="三.常见问题"></a>三.常见问题</h1><p>如何debug？</p>
<h1 id="四-解决方案"><a href="#四-解决方案" class="headerlink" title="四.解决方案"></a>四.解决方案</h1><p>老大在知乎上的回答：</p>
<ol>
<li>确认Bug是否在本地可以重现。</li>
<li>确认Bug在哪一段代码中。</li>
<li>去除掉所有无关代码，只去调试和Bug相关的代码。</li>
<li>和之前正常运行的版本对比，尝试恢复到之前可以正常运行的代码。</li>
<li>重新写一个小Demo，确认是否可以正常运行，可以的话，移动代码到原有的代码中。</li>
<li>如果本地无法重现，打日志，观察线上行为。</li>
<li>重启服务，重启IDE，重启笔记本，重启服务器。</li>
<li>跟产品经理说这个Bug解决不了，花费的代价很大，不值得。</li>
</ol>
<p>张明云在知乎上的回答：<br>解决问题的流程：了解问题→定位问题→分析问题→解决问题→验证问题<br>解决问题的方法(排名分先后)</p>
<ol>
<li>借助搜索引擎：遇到有明显的异常信息，且自己并不熟悉为什么异常时，最高效的解决方法是借助搜索引擎，这里的搜索引擎一定是谷歌，不是百度；借助搜索引擎能解决工作中的大部分bug，你要相信，全世界这么多开发人员，你遇到过的大多数问题其他人也遇到过；</li>
<li>打印调试法：这是最笨但最有效的办法，人会说谎、断点调试可能会说谎，但日志一定不会说谎；</li>
<li>二分排除法：当你遇到随机问题、帮助他人解bug或者遇到自己不熟悉的代码时，通过屏蔽一部分代码，运行观察问题仍然存在，如果存在则进一步分析屏蔽一部分代码，直到定位到有问题的具体位置为止，这种方法能解决工作中的很大一部分疑难杂症；</li>
<li>小黄鸭调试法：当你向某个对象陈述你的思路时，往往会有意想不到的结果，哪怕对方并不是一个生物；</li>
<li>断点调试法：受限于效率不高以及在多线程环境下断点调试并不灵，有必要时才考虑用这种方法；通常可以使用打印调试法来代替；</li>
<li>线上求助：包括论坛提问、RTX和微信群提问等；不到万不得已不要用这种办法，在有限的圈子里面，你遇到的一个具体技术问题很有可能其他人并没有遇到过，多数时候问了也是白问，但有时候也可能是一种有效的方法。</li>
</ol>
<h1 id="五-编码实战"><a href="#五-编码实战" class="headerlink" title="五.编码实战"></a>五.编码实战</h1><p>#六.拓展思考</p>
<ol>
<li>什么是小黄鸭调试法?</li>
</ol>
<p>小黄鸭调试法，又称橡皮鸭调试法、黄鸭除虫法（Rubber Duck Debugging）是可在软件工程中使用的一种调试代码的方法。方法就是在程序的调试、除错或测试过程中，操作人耐心地向小黄鸭解释每一行程序的作用，以此来激发灵感与发现矛盾。</p>
<p>此概念是参照于一个故事。故事中程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码。许多程序员都有向别人提问及解释编程问题的经历，而目标甚至可能是完全不懂编程的人。而就在解释的过程中，程序员可能就发觉了问题的解决方案。一边阐述代码的意图，一边观察它实际上的意图并做调试，两者间的任何不协调都会变得更明显，使人更容易发现错误所在。如果没有玩具小鸭，操作人也可以向其他任何东西倾诉，比如桌上的盆栽、键盘/鼠标等。</p>
<h1 id="七-参考资料"><a href="#七-参考资料" class="headerlink" title="七.参考资料"></a>七.参考资料</h1><p>软件开发流程<br>如何提高测试覆盖率<br>测试分析中对异常情况考虑<br>软件异常测试<br>断点调试<br>老程序员解bug有那些通用套路？</p>
<h1 id="八-更多讨论"><a href="#八-更多讨论" class="headerlink" title="八.更多讨论"></a>八.更多讨论</h1><p>Q: bug的优先级有哪几种？</p>
<ul>
<li>critical(危险的)：是说项目中某一块功能因为这个bug而导致测试无法进行下去，此critical级别，该等级问题出现在不影响其他功能测试的情况下可以继续该版本试block是说项目中有闪退情况，崩溃情况。此为block级别，出现这种级别的问题此本停止测试</li>
<li>major(重要的)：是说一些功能没有实现，但是不影响使用，功能菜单缺失，但不会影响系统稳定。此为major，这种问题应该合理安排时间进行修改</li>
<li>normal(普通的)：是说界面等UI问题显示错误，比如字体大小，颜色，间距等问题。此类问题在测试初期较多，优先程度较低；在测试后期出现较少，应及时处理）</li>
<li>minor(次要的)：是说界面、性能缺陷，建议类问题，不影响操作功能的执行，可以优化性能的方案等。</li>
</ul>
<p>Q: 日志和断点的优劣？<br>对于少量数据的检测，断点操作比较麻烦，日志很直接。但是对于比较复杂的代码，打断点能更好的理清逻辑和检查数据。</p>
<p>Q: 如何避免写出bug？<br>改动代码时要考虑到对其他模块的影响；思考问题要全面，考虑到可能发生的各种情况；从其他地方找到的代码要弄清楚原理，了解这个知识点，再用到自己的项目中。</p>
<hr>
<blockquote>
<p>相关链接<br><a href="https://it-xzy.github.io/WEB-NEW/2018-8-24-D-js5-tds.html" target="_blank" rel="noopener">ppt地址</a><br><a href="https://v.qq.com/x/page/y0768t3zsmq.html?pcsharecode=dAfjf5Vz&amp;sf=uri" target="_blank" rel="noopener">腾讯视频地址</a><br><a href="https://blog.csdn.net/tianxintiandisheng/article/details/82019395" target="_blank" rel="noopener">csdn博客地址</a></p>
</blockquote>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
  </entry>
  <entry>
    <title>ES6 新特性简要总结</title>
    <url>/2018/08/15/JS/ES6-%E6%96%B0%E7%89%B9%E6%80%A7%E7%AE%80%E8%A6%81%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、-let、const-和-块级作用域"><a href="#一、-let、const-和-块级作用域" class="headerlink" title="一、 let、const 和 块级作用域"></a>一、 let、const 和 块级作用域</h1><p>let 允许创建块级作用域，ES6 推荐在函数中使用 let 定义变量，而非 var：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a = 2;</span><br><span class="line">&#123;</span><br><span class="line">  let a = 3;</span><br><span class="line">  console.log(a); // 3</span><br><span class="line">&#125;</span><br><span class="line">console.log(a); // 2</span><br></pre></td></tr></table></figure></p>
<p>同样在块级作用域有效的另一个变量声明方式是 const，它可以声明一个常量。ES6 中，const 声明的常量类似于指针，它指向某个引用，也就是说这个「常量」并非一成不变的，如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  const ARR = [5,6];</span><br><span class="line">  ARR.push(7);</span><br><span class="line">  console.log(ARR); // [5,6,7]</span><br><span class="line">  ARR = 10; // TypeError</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>有几个点需要注意：</strong></p>
<ul>
<li>let 关键词声明的变量不具备变量提升（hoisting）特性</li>
<li>let 和 const 声明只在最靠近的一个块中（花括号内）有效</li>
<li>当使用常量 const 声明时，请使用大写变量，如：CAPITAL_CASING</li>
<li>const 在声明时必须被赋值</li>
</ul>
<h1 id="二、箭头函数"><a href="#二、箭头函数" class="headerlink" title="二、箭头函数"></a>二、箭头函数</h1><p>ES6 中，箭头函数就是函数的一种简写形式，使用括号包裹参数，跟随一个 =&gt;，紧接着是函数体：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var getPrice = function() &#123;</span><br><span class="line">  return 4.55;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// Implementation with Arrow Function</span><br><span class="line">var getPrice = () =&gt; 4.55;</span><br></pre></td></tr></table></figure></p>
<h1 id="三、-函数参数默认值"><a href="#三、-函数参数默认值" class="headerlink" title="三、 函数参数默认值"></a>三、 函数参数默认值</h1><p>ES6 中允许你对函数参数设置默认值：(当没有传递该参数的具体值的时候，使用默认值)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let getFinalPrice = (price, tax=0.7) =&gt; price + price * tax;</span><br><span class="line">getFinalPrice(500); // 850</span><br></pre></td></tr></table></figure></p>
<h1 id="四、Spread-Rest-操作符"><a href="#四、Spread-Rest-操作符" class="headerlink" title="四、Spread / Rest 操作符"></a>四、Spread / Rest 操作符</h1><p>Spread / Rest 操作符指的是 …，具体是 Spread 还是 Rest 需要看上下文语境。</p>
<p>当被用于迭代器中时，它是一个 Spread 操作符：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo(x,y,z) &#123;</span><br><span class="line">  console.log(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">let arr = [1,2,3];</span><br><span class="line">foo(...arr); // 1 2 3</span><br></pre></td></tr></table></figure></p>
<p>当被用于函数传参时，是一个 Rest 操作符：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo(...args) &#123;</span><br><span class="line">  console.log(args);</span><br><span class="line">&#125;</span><br><span class="line">foo( 1, 2, 3, 4, 5); // [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></p>
<h1 id="五、对象词法扩展"><a href="#五、对象词法扩展" class="headerlink" title="五、对象词法扩展"></a>五、对象词法扩展</h1><p>ES6 允许声明在对象字面量时使用简写语法，来初始化属性变量和函数的定义方法，并且允许在对象属性中进行计算操作：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getCar(make, model, value) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    // 简写变量</span><br><span class="line">    make, // 等同于 make: make</span><br><span class="line">    model, // 等同于 model: model</span><br><span class="line">    value, // 等同于 value: value</span><br><span class="line"> </span><br><span class="line">    // 属性可以使用表达式计算值</span><br><span class="line">    [&apos;make&apos; + make]: true,</span><br><span class="line"> </span><br><span class="line">    // 忽略 `function` 关键词简写对象函数</span><br><span class="line">    depreciate() &#123;</span><br><span class="line">      this.value -= 2500;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let car = getCar(&apos;Barret&apos;, &apos;Lee&apos;, 40000);</span><br><span class="line"> //car: &#123;</span><br><span class="line">// make: &apos;Barret&apos;,</span><br><span class="line">// model:&apos;Lee&apos;,</span><br><span class="line">// value: 40000,</span><br><span class="line">// makeBarret: true,</span><br><span class="line">// depreciate: function()</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="六、二进制和八进制字面量"><a href="#六、二进制和八进制字面量" class="headerlink" title="六、二进制和八进制字面量"></a>六、二进制和八进制字面量</h1><p>ES6 支持二进制和八进制的字面量，通过在数字前面添加 0o 或者0O 即可将其转换为八进制值：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let oValue = 0o10;</span><br><span class="line">console.log(oValue); // 8</span><br><span class="line"> </span><br><span class="line">let bValue = 0b10; // 二进制使用 `0b` 或者 `0B`</span><br><span class="line">console.log(bValue); // 2</span><br></pre></td></tr></table></figure></p>
<h1 id="七、对象和数组解构"><a href="#七、对象和数组解构" class="headerlink" title="七、对象和数组解构"></a>七、对象和数组解构</h1><p>解构可以避免在对象赋值时产生中间变量：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  return [1,2,3];</span><br><span class="line">&#125;</span><br><span class="line">let arr = foo(); // [1,2,3]</span><br><span class="line"> </span><br><span class="line">let [a, b, c] = foo();</span><br><span class="line">console.log(a, b, c); // 1 2 3</span><br><span class="line"> </span><br><span class="line">function bar() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    x: 4,</span><br><span class="line">    y: 5,</span><br><span class="line">    z: 6</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">let &#123;x: x, y: y, z: z&#125; = bar();</span><br><span class="line">console.log(x, y, z); // 4 5 6</span><br></pre></td></tr></table></figure></p>
<h1 id="八、对象超类"><a href="#八、对象超类" class="headerlink" title="八、对象超类"></a>八、对象超类</h1><p>ES6 允许在对象中使用 super 方法（用于继承父级的方法）：</p>
<ul>
<li>使用super后，必须使用Object.setPrototypeOf方法指定父级<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var parent = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">    console.log(&quot;Hello from the Parent&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var child = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">    super.foo();</span><br><span class="line">    console.log(&quot;Hello from the Child&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Object.setPrototypeOf(child, parent);</span><br><span class="line">child.foo(); // Hello from the Parent</span><br><span class="line">             // Hello from the Child</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="九、模板语法和分隔符"><a href="#九、模板语法和分隔符" class="headerlink" title="九、模板语法和分隔符"></a>九、模板语法和分隔符</h1><p>ES6 中有一种十分简洁的方法组装一堆字符串和变量。</p>
<ul>
<li>${ … } 用来渲染一个变量</li>
<li>` 作为分隔符<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let user = &apos;Barret&apos;;</span><br><span class="line">console.log(`Hi $&#123;user&#125;!`); // Hi Barret!</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="十、-for…of-VS-for…in"><a href="#十、-for…of-VS-for…in" class="headerlink" title="十、 for…of VS for…in"></a>十、 for…of VS for…in</h1><p>for…of 用于遍历一个迭代器，如数组：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let nicknames = [&apos;di&apos;, &apos;boo&apos;, &apos;punkeye&apos;];</span><br><span class="line">nicknames.size = 3;</span><br><span class="line">for (let nickname of nicknames) &#123;</span><br><span class="line">  console.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line">// 结果: di, boo, punkeye</span><br></pre></td></tr></table></figure></p>
<p>for…in 用来遍历对象中的属性：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let nicknames = [&apos;di&apos;, &apos;boo&apos;, &apos;punkeye&apos;];</span><br><span class="line">nicknames.size = 3;</span><br><span class="line">for (let nickname in nicknames) &#123;</span><br><span class="line">  console.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line">Result: 0, 1, 2, size</span><br></pre></td></tr></table></figure></p>
<h1 id="十一、Map-和-WeakMap"><a href="#十一、Map-和-WeakMap" class="headerlink" title="十一、Map 和 WeakMap"></a>十一、Map 和 WeakMap</h1><p>ES6 中两种新的数据结构集：Map 和 WeakMap。事实上每个对象都可以看作是一个 Map。</p>
<p><strong>Map</strong>: 键值对的键名、键值都可以为任意数据结构的对象；</p>
<p>一个对象由多个 key-val 对构成，在 Map 中，任何类型都可以作为对象的 key，如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var myMap = new Map();</span><br><span class="line"> </span><br><span class="line">var keyString = &quot;a string&quot;,</span><br><span class="line">    keyObj = &#123;&#125;,</span><br><span class="line">    keyFunc = function () &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">// 设置值</span><br><span class="line">myMap.set(keyString, &quot;value 与 &apos;a string&apos; 关联&quot;);</span><br><span class="line">myMap.set(keyObj, &quot;value 与 keyObj 关联&quot;);</span><br><span class="line">myMap.set(keyFunc, &quot;value 与 keyFunc 关联&quot;);</span><br><span class="line"> </span><br><span class="line">myMap.size; // 3</span><br><span class="line"> </span><br><span class="line">// 获取值</span><br><span class="line">myMap.get(keyString); // &quot;value 与 &apos;a string&apos; 关联&quot;</span><br><span class="line">myMap.get(keyObj); // &quot;value 与 keyObj 关联&quot;</span><br><span class="line">myMap.get(keyFunc); // &quot;value 与 keyFunc 关联&quot;</span><br></pre></td></tr></table></figure></p>
<p>属性：Map.size返回Map实例成员的总数；<br>方法：操作方法(5种)+遍历方法(4种)  </p>
<p>操作方法</p>
<ol>
<li>Map.set(key,value)：设置key值对应的值，如果key存在，则覆盖原有值；</li>
<li>Map.get(key)：获取键名为key的键值；</li>
<li>Map.has(key)：检查键名key是否存在Map实例中，返回boolean值，若存在返回true,不存在返回false;</li>
<li>Map.delete(key)：删除键名为key的属性，返回boolean值，若删除成功返回true,失败返回false;</li>
<li>Map.clear()：清除Map实例的所有成员，无返回值  </li>
</ol>
<p>遍历方法  </p>
<ol>
<li>Map.keys()：返回键名的遍历器</li>
<li>Map.values()：返回键值的遍历器</li>
<li>Map.entries()：返回所有成员的遍历器</li>
<li>Map.forEach((value,key,map)=&gt;{},thisObj)：遍历Map的所有成员</li>
</ol>
<p><strong>WeakMap</strong> : 键名只能为对象的Map，弱引用</p>
<p>WeakMap 就是一个 Map，只不过它的所有 key 都是弱引用，意思就是 WeakMap 中的东西垃圾回收时不考虑，使用它不用担心内存泄漏问题。</p>
<p>另一个需要注意的点是，WeakMap 的所有 key 必须是对象。它只有四个方法 delete(key),has(key),get(key) 和set(key, val)：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let w = new WeakMap();</span><br><span class="line">w.set(&apos;a&apos;, &apos;b&apos;); </span><br><span class="line">// Uncaught TypeError: Invalid value used as weak map key</span><br><span class="line"> </span><br><span class="line">var o1 = &#123;&#125;,</span><br><span class="line">    o2 = function()&#123;&#125;,</span><br><span class="line">    o3 = window;</span><br><span class="line"> </span><br><span class="line">w.set(o1, 37);</span><br><span class="line">w.set(o2, &quot;azerty&quot;);</span><br><span class="line">w.set(o3, undefined);</span><br><span class="line"> </span><br><span class="line">w.get(o3); // undefined, because that is the set value</span><br><span class="line"> </span><br><span class="line">w.has(o1); // true</span><br><span class="line">w.delete(o1);</span><br><span class="line">w.has(o1); // false</span><br></pre></td></tr></table></figure></p>
<h1 id="十二、Set-和-WeakSet"><a href="#十二、Set-和-WeakSet" class="headerlink" title="十二、Set 和 WeakSet"></a>十二、Set 和 WeakSet</h1><p>Set 对象是一组不重复的值，重复的值将被忽略，值类型可以是原始类型和引用类型：<br><strong>Set —没有重复成员元素的数组</strong></p>
<ul>
<li>本质：Set本身是一个构造函数；接收一个具有iterable接口数据结构的参数，用来生成一个没有重复元素的数组；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let nums=new Set([1,2,3,4,3,2]);//[1,2,3,4]</span><br><span class="line">nums.add(2);//[1,2,3,4]</span><br><span class="line">nums.add(&apos;2&apos;);//[1,2,3,4,&apos;2&apos;]</span><br><span class="line">nums.add(&#123;&#125;);//[1,2,3,4,&apos;2&apos;,&#123;&#125;] Set添加元素时不会发生类型转换，</span><br><span class="line">nums.add(&#123;&#125;);//[1,2,3,4,&apos;2&apos;,&#123;&#125;,&#123;&#125;] Set添加的对象总不相等</span><br></pre></td></tr></table></figure>
<ul>
<li>两类8个方法：操作方法(4种）+遍历方法(4种)<br>操作方法</li>
</ul>
<ol>
<li>Set.add(value)：向Set实例添加值value，返回Set结构本身 ;</li>
<li>Set.delete(value)：向Set实例删除值value，返回boolean, 成功为true，失败返回false;</li>
<li>Set.has(value)：检查Set实例是否含有值value，返回boolean，包含返回true，不包含返回false</li>
<li>Set.clear()：清楚Set实例的所有成员，无返回值；</li>
</ol>
<p>遍历方法</p>
<ol>
<li>Set.keys()：返回键名的遍历器；</li>
<li>Set.values()：返回键值的遍历器；</li>
<li>Set.entries()：返回键值对的遍历器；</li>
<li>Set.forEach((value,key)=&gt;{},thisObj)：使用回调函数遍历每个成员</li>
</ol>
<ul>
<li>使用场景 使用场景：数组去重、求数组的交集、并集、差集<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// ①数组去重</span><br><span class="line">let arr=[1,2,3,4,3,2,1];</span><br><span class="line">let b=[...arr];//[1, 2, 3, 4, 3, 2, 1]</span><br><span class="line">let a=Array.from(new Set(arr));//[1,2,3,4]</span><br><span class="line">let c = [...new Set(arr)];//[1,2,3,4]</span><br><span class="line">// ②数组运算</span><br><span class="line"></span><br><span class="line">let arr1=new Set([1,2,3,4]);</span><br><span class="line">let arr2=new Set([3,4,5,6]);</span><br><span class="line">let union=new Set([...arr1,...arr2]);//[1,2,3,4,5,6]</span><br><span class="line">let intersect=new Set([...arr1].filter(value=&gt;b.has(value)));//[3,4]</span><br><span class="line">let diffrence=new Set([...arr1].filter(value=&gt;!b.has(value)));//[1,2]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>WeakSet—成员只能是对象的Set</strong><br>+　WeakSet的成员只能是对象不能是其他类型值；<br>+　WeakSet中的对象都是弱引用，即垃圾回收机制不考虑WeakSet对该对象的引用；</p>
<p>弱引用，即当一个WeakSet实例的成员引用对象A时，当其他对象不在引用对象A，JS的垃圾回收机制便会自动回收该对象占用的内存，不考虑WeakSet实例是否还在引用；弱引用的对象随时可能消失，无法保证成员的存在，因此WeakSet相比较Set数据结构，没有clear(）方法、没有size属性、也没有遍历方法;</p>
<h1 id="十三、类"><a href="#十三、类" class="headerlink" title="十三、类"></a>十三、类</h1><p>ES6 中有 class 语法。值得注意是，这里的 class 不是新的对象继承模型，它只是原型链的语法糖表现形式。</p>
<p>函数中使用 <strong>static</strong> 关键词定义构造函数的的方法和属性：<br>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Task &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    console.log(&quot;task instantiated!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  showId() &#123;</span><br><span class="line">    console.log(23);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  static loadAll() &#123;</span><br><span class="line">    console.log(&quot;Loading all tasks..&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">console.log(typeof Task); // function</span><br><span class="line">let task = new Task(); // &quot;task instantiated!&quot;</span><br><span class="line">task.showId(); // 23</span><br><span class="line">task.loadAll(); //loadAll不是一个函数</span><br><span class="line">Task.loadAll(); // &quot;Loading all tasks..&quot;</span><br></pre></td></tr></table></figure>
<p><strong>类中的继承和超集：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Car &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    console.log(&quot;Creating a new car&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Porsche extends Car &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    console.log(&quot;Creating Porsche&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">let c = new Porsche();</span><br><span class="line">// Creating a new car</span><br><span class="line">// Creating Porsche</span><br></pre></td></tr></table></figure>
<p>extends 允许一个子类继承父类，需要注意的是，子类的constructor 函数中需要执行 super() 函数。</p>
<p>当然，你也可以在子类方法中调用父类的方法，如super.parentMethodName()。</p>
<p>有几点值得<strong>注意</strong>的是：</p>
<ul>
<li>类的声明不会提升（hoisting)，如果你要使用某个 Class，那你必须在使用之前定义它，否则会抛出一个 ReferenceError 的错误</li>
<li>在类中定义函数不需要使用 function 关键词</li>
</ul>
<h1 id="十四、Symbol"><a href="#十四、Symbol" class="headerlink" title="十四、Symbol"></a>十四、Symbol</h1><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var sym = Symbol( &quot;some optional description&quot; );</span><br><span class="line">console.log(typeof sym); // symbol</span><br></pre></td></tr></table></figure>
<p>注意，这里 Symbol 前面不能使用 new 操作符。<br>如果它被用作一个对象的属性，那么这个属性会是不可枚举的.</p>
<h1 id="十五、-Promises"><a href="#十五、-Promises" class="headerlink" title="十五、 Promises"></a>十五、 Promises</h1><p>ES6 对 Promise 有了原生的支持，一个 Promise 是一个等待被异步执行的对象，当它执行完成后，其状态会变成 resolved 或者rejected。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var p = new Promise(function(resolve, reject) &#123;  </span><br><span class="line">  if (/* condition */) &#123;</span><br><span class="line">    // fulfilled successfully</span><br><span class="line">    resolve(/* value */);  </span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // error, rejected</span><br><span class="line">    reject(/* reason */);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>每一个 Promise 都有一个 .then 方法，这个方法接受两个参数，第一个是处理 resolved 状态的回调，一个是处理 rejected 状态的回调：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.then((val) =&gt; console.log(&quot;Promise Resolved&quot;, val),</span><br><span class="line">       (err) =&gt; console.log(&quot;Promise Rejected&quot;, err));</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>取消浏览器对页面滚动条位置的记录</title>
    <url>/2018/08/11/JS/%E5%8F%96%E6%B6%88%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8%E6%9D%A1%E4%BD%8D%E7%BD%AE%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>浏览器在导航跳转和通过 History API 创建历史记录时，都会记录当前的垂直滚动距离，在重新访问时恢复这个距离。如何取消记录当前的垂直滚动距离,使其刷新时可以回到顶部呢?</p>
</blockquote>
<a id="more"></a>
<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>项目提出bug，当正在浏览页面的时候点击返回首页此时页面停留在页面顶部，然后立即刷新，页面会回到刚才浏览的部分。<br><strong>期望</strong>：当浏览时刷新可以保存滑动条的位置但是当点击首页的时候不需要保存</p>
<h2 id="问题出现原因："><a href="#问题出现原因：" class="headerlink" title="问题出现原因："></a>问题出现原因：</h2><p>浏览器在导航跳转和通过 History API 创建历史记录时，都会记录当前的垂直滚动距离，在重新访问时恢复这个距离。</p>
<h2 id="问题解决办法："><a href="#问题解决办法：" class="headerlink" title="问题解决办法："></a>问题解决办法：</h2><p>1、初级版<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;.toIndex&quot;).click(function()&#123;</span><br><span class="line">    if (&apos;scrollRestoration&apos; in history) &#123;</span><br><span class="line">        history.scrollRestoration = &apos;manual&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);//去除默认的滚动恢复行为</span><br><span class="line">var recoverAuto = function () &#123;</span><br><span class="line">    if (&apos;scrollRestoration&apos; in history) &#123;</span><br><span class="line">        history.scrollRestoration = &apos;auto&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">setTimeout(recoverAuto,1800);//回复默认的滚动恢复行为</span><br></pre></td></tr></table></figure></p>
<p>给返回首页添加点击事件，关闭记录当前的垂直滚动距离浏览器行为。但是这样会导致之后也无法保存滚动条的位置，所以后面加了一个定时器，在1.8s之后恢复浏览器的记录行为。<br><strong>缺点</strong>：如果用户在1.8s之内浏览页面并刷新，不会回到浏览位置。</p>
<p>2、 终极方案（从根本上解决问题，无bug）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;.toIndex&quot;).click(function()&#123;</span><br><span class="line">    $(&apos;body,html&apos;).scrollTop(0);</span><br><span class="line">&#125;);//返回首页的同时将滑动条置顶</span><br></pre></td></tr></table></figure></p>
<p>给返回首页添加点击事件，返回首页的同时将滑动条置顶，让浏览器记录一个在顶部的历史记录。</p>
<hr>
<blockquote>
<p>相关知识</p>
</blockquote>
<p>平常使用浏览器的后退功能时，常常会发现返回的页面滚动到了之前的位置，而不是简单的回到顶部。这是由于浏览器在导航跳转和通过 History API 创建历史记录时，都会记录当前的垂直滚动距离，在重新访问时恢复这个距离。值得一提的是，在 HTML History Spec中并没有强制要求浏览器记录与恢复滚动距离。</p>
<p>引入新的 API<br>为了让开发者能够通过编程方式关闭这一浏览器行为，《浏览器恢复滚动提案》引入了新的 API：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (&apos;scrollRestoration&apos; in history) &#123;</span><br><span class="line">    // 默认值为&apos;auto&apos;</span><br><span class="line">    history.scrollRestoration = &apos;manual&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown 配置七牛云作为图床</title>
    <url>/2018/07/31/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Markdown-%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E4%BA%91%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<blockquote>
<p>Hexo在使用Markdown编辑发布博客时，经常要上传本地图片，渲染加载图片的效果很不理想。推荐使用云平台作为图床，提高编辑效率和图片效果。</p>
</blockquote>
<a id="more"></a>
<h1 id="一-注册七牛云账号"><a href="#一-注册七牛云账号" class="headerlink" title="一. 注册七牛云账号"></a>一. 注册七牛云账号</h1><ol>
<li><a href="https://portal.qiniu.com/signup?code=3lefotin55poy" target="_blank" rel="noopener">七牛云注册地址</a></li>
<li>新增存储空间。注册完成之后，在<strong>资源主页</strong>中的<strong>对象存储</strong>里添加对象，如添加<strong>image</strong><br><img src="http://oqiflua2i.bkt.clouddn.com/%E8%B5%84%E6%BA%90%E4%B8%BB%E9%A1%B5.png" alt="新增增存储空间"><br><img src="http://oqiflua2i.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E5%AF%B9%E8%B1%A1.png" alt="新增增存储空间"></li>
<li>简单的上传图片，复制外链<br><img src="http://oqiflua2i.bkt.clouddn.com/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.gif" alt="上传图片"></li>
</ol>
<h1 id="二-使用插件（Mpic）"><a href="#二-使用插件（Mpic）" class="headerlink" title="二. 使用插件（Mpic）"></a>二. 使用插件（Mpic）</h1><p><a href="http://mpic.lzhaofu.cn/" target="_blank" rel="noopener">Mpic下载</a></p>
<p>之前我在没有发现Mpic这款软件的时候，将图片上传到七牛云存储总共分四步：</p>
<ol>
<li>登录打开七牛云网页个人存储空间</li>
<li>上传图片</li>
<li>复制外链</li>
<li>粘贴到 Markdown</li>
</ol>
<p>一张图片的上传整整用了四步，特别麻烦。直到LZ最近发现了Mpic之后，才发现，上传图片原来也能这么简单。<br>使用Mpic，只需要将七牛云存储的账号信息配置一次(参考：如何设置七牛云存储账号？)，就可以将以上这四个步骤合为一个。<br>同时，MPic提供了点击上传、拖曳上传、截图上传、复制上传四种上传图片的方法，更是让人感叹好的软件极大的提高了效率啊。</p>
<p>配置Mpic插件，获取密匙<br>进入七牛云个人中心的密钥管理，获取AccessKey和SecretKey<br><img src="http://oqiflua2i.bkt.clouddn.com/%E5%AF%86%E9%92%A5%E7%AE%A1%E7%90%86.png" alt="获取密匙"></p>
<h1 id="三-使用极简图床"><a href="#三-使用极简图床" class="headerlink" title="三. 使用极简图床"></a>三. 使用极简图床</h1><p>使用极简图床,关联七牛云账号</p>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>使用js或css实现瀑布流（Pinterest）布局教程</title>
    <url>/2018/07/30/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/%E4%BD%BF%E7%94%A8js%E6%88%96css%E5%AE%9E%E7%8E%B0%E7%80%91%E5%B8%83%E6%B5%81%EF%BC%88Pinterest%EF%BC%89%E5%B8%83%E5%B1%80%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>瀑布流，又称瀑布流式布局。这种布局适合于小数据块，每个数据块内容相近且没有侧重。通常，随着页面滚动条向下滚动，这种布局还会不断加载数据块并附加至当前尾部。</p>
</blockquote>
<a id="more"></a>
<h1 id="瀑布流布局实例"><a href="#瀑布流布局实例" class="headerlink" title="瀑布流布局实例"></a><a href="https://www.zhangxinxu.com/study/201203/waterfall-layout.html" target="_blank" rel="noopener">瀑布流布局实例</a></h1><h2 id="一、JS实现"><a href="#一、JS实现" class="headerlink" title="一、JS实现"></a>一、JS实现</h2><ul>
<li>代码：<a href="https://github.com/jirengu-inc/jrg-renwu10/blob/master/homework/%E5%AD%99%E7%BA%A2%E7%85%A7/mission30/demo.html" target="_blank" rel="noopener">js实现瀑布流布局代码</a></li>
<li>demo：<a href="http://book.jirengu.com/jirengu-inc/jrg-renwu10/homework/%E5%AD%99%E7%BA%A2%E7%85%A7/mission30/demo.html" target="_blank" rel="noopener">js实现瀑布流布局demo</a></li>
</ul>
<h2 id="二、CSS实现"><a href="#二、CSS实现" class="headerlink" title="二、CSS实现"></a>二、CSS实现</h2><ol>
<li><a href="https://www.w3cplus.com/css/pure-css-create-masonry-layout.html" target="_blank" rel="noopener">Multi-columns</a></li>
<li><a href="https://www.w3cplus.com/css/pure-css-create-masonry-layout.html" target="_blank" rel="noopener">Flexbox</a></li>
<li><a href="https://www.w3cplus.com/css/pure-css-create-masonry-layout.html" target="_blank" rel="noopener">Grid</a></li>
</ol>
<p>总结：这篇文章主要介绍了如何实现瀑布流的布局。文章简单介绍了css三种实现方案：Multi-columns、Flexbox和Grid。从上面的示例或者实现手段而言，较为友好的是Flexbox的方案。当然，随着CSS Grid特性的完善，使用Grid实现瀑布流布局将会变得更为简单和友好。以及一种相对简单的js实现方案。</p>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
      </categories>
      <tags>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>敏捷开发流程</title>
    <url>/2018/07/30/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>敏捷软件开发，又称敏捷开发，是一种从1990年代开始逐渐引起广泛关注的一些新型软件开发方法，是一种应对快速变化的需求的一种软件开发能力。它们的具体名称、理念、过程、术语都不尽相同，相对于“非敏捷”，更强调程序员团队与业务专家之间的紧密协作、面对面的沟通（认为比书面的文档更有效）、频繁交付新的软件版本、紧凑而自我组织型的团队、能够很好地适应需求变化的代码编写和团队组织方法，也更注重软件开发过程中人的作用。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、story讲解"><a href="#一、story讲解" class="headerlink" title="一、story讲解"></a>一、story讲解</h1><ol>
<li>制作竞品分析PPT，UE全组参与。（用时：根据产品复杂度，0.5-2小时之内）</li>
<li>制作产品原型，交由客户看，客户没有异议之后禅道录入story</li>
<li>产品在禅道拆分好story，并且定义出优先级，关联需求，后续开发根据优先级进行开发</li>
<li>由产品讲解story，前端和后端都参与。（用时：根据产品的复杂度，1-3小时之内）</li>
</ol>
<h1 id="二、人员划分"><a href="#二、人员划分" class="headerlink" title="二、人员划分"></a>二、人员划分</h1><ol>
<li>新建wiki项目主页，把PPT和产品原型（HTML文件）上传到wiki</li>
<li>根据产品原型，按照模块划分相关负责人，前端和后端都是，并放到wiki。（由项目负责人新建）</li>
</ol>
<h1 id="三、定义接口文档（2-3天）"><a href="#三、定义接口文档（2-3天）" class="headerlink" title="三、定义接口文档（2-3天）"></a>三、定义接口文档（2-3天）</h1><ol>
<li>前端后端相关人员一起，对照原型，根据模块及页面大概定义出接口<ul>
<li>一个页面中有几个接口，每个接口入参与出参是什么</li>
</ul>
</li>
<li>后端每个模块的负责人，根据开会讨论的结果，在wiki上生成标准的接口文档</li>
<li>将后端做好的接口文档发给前端模块负责人过目，有问题继续修改；没问题开始后续的步骤 。</li>
</ol>
<h1 id="四、方案设计（1小时-1天左右，根据模块大小定义时间）"><a href="#四、方案设计（1小时-1天左右，根据模块大小定义时间）" class="headerlink" title="四、方案设计（1小时-1天左右，根据模块大小定义时间）"></a>四、方案设计（1小时-1天左右，根据模块大小定义时间）</h1><ol>
<li>后端开发人员，根据原型以及定义的接口，做好方案设计</li>
<li>对有难度或者有疑点的接口，做出方案，尽量给出多个合理方案</li>
<li>每个方案写清楚优点缺点</li>
</ol>
<h1 id="五、方案评审（2-3小时）"><a href="#五、方案评审（2-3小时）" class="headerlink" title="五、方案评审（2-3小时）"></a>五、方案评审（2-3小时）</h1><ol>
<li>对做出的方案设计，做方案评审，建议全体人员参与（无论做不做该项目）</li>
</ol>
<h1 id="六、禅道拆分（1-2小时）"><a href="#六、禅道拆分（1-2小时）" class="headerlink" title="六、禅道拆分（1-2小时）"></a>六、禅道拆分（1-2小时）</h1><ol>
<li><p>相关负责人按照优先级顺序，在禅道拆分自己的任务，单个任务最多不要超过4小时，即拆分要详细</p>
<ul>
<li>拆分一个task时，以具体写的代码为一个task，并在任务名称中写出该类/方法的名称在任务描述中写出该task的代码块具体有的功能</li>
<li>当拆完task后，这几个task所完成功能的代码已经过了一遍</li>
<li>如果有不了解的功能，在方案评审前先写出一个demo，以方便拆分task的估时</li>
<li>一个task用时应在0.5-2之间，最大最大4个小时</li>
</ul>
</li>
<li><p>以文件上传功能为例，分成3个task</p>
<ul>
<li>task1.任务名称：公共模块-文件上传-上传文件controller的方法fileUpload<br>任务描述：通过网页获取文件，文件判空，判断文件的归属类型（用户/教材/课时/步骤/咨询）<br>工时：1              </li>
<li>task2.任务名称：公共模块-文件上传-添加文件FileUtil 和FileUtilOssImpl<br>任务描述：util处理上传的文件，判断文件类型，大小，设置文件上传的路径，返回的url<br>工时：1.5</li>
<li>task3.任务名称：公共模块-文件上传-文件接口spring-fileOss.xml 配置文件<br>任务描述：oss的文件上传， 调用的spring.xml配置文件（密匙，ID,bucket等）<br>工时：1.5</li>
</ul>
</li>
</ol>
<h1 id="七、开发"><a href="#七、开发" class="headerlink" title="七、开发"></a>七、开发</h1><ol>
<li>搭建开发服务器</li>
<li>开发人员根据禅道上的任务，按时完成自己的开发工作，具体体现到日报上</li>
<li>每天上午开10分钟左右进度会议，如果有延迟现象出现，拿出解决方案，保证项目按照禅道上的时间点完成</li>
<li>数据库索引(两种索引):<ol>
<li>经常查询的，数据散列度比较高的，做一般索引，不需要建联合索引。</li>
<li>数据必须保持唯一的，建唯一索引。(要有文档，文档表明哪些字段要建索引。发邮件。)</li>
</ol>
</li>
</ol>
<h1 id="八、阶段测试"><a href="#八、阶段测试" class="headerlink" title="八、阶段测试"></a>八、阶段测试</h1><ol>
<li>每天至少发布一次代码到开发环境，并且保证发布完之后程序没问题(与开发并行)</li>
</ol>
<h1 id="九、性能测试和coderevivew（1天）"><a href="#九、性能测试和coderevivew（1天）" class="headerlink" title="九、性能测试和coderevivew（1天）"></a>九、性能测试和coderevivew（1天）</h1><ol>
<li>对每个接口做好性能测试<ul>
<li>每个接口的响应时间不超过200ms，如果有超过的，做优化，尽量缩小到200ms内</li>
</ul>
</li>
<li>完成codereview，根据codereview结论完成修改</li>
</ol>
<h1 id="十、压力测试"><a href="#十、压力测试" class="headerlink" title="十、压力测试"></a>十、压力测试</h1><ol>
<li>做好压测报告</li>
</ol>
<h1 id="十一、-Demo"><a href="#十一、-Demo" class="headerlink" title="十一、 Demo"></a>十一、 Demo</h1><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><ol>
<li>发demo申请邮件，收件人包括产品、测试同学、前后端相关开发人员<ol>
<li>主题：XX项目demo通知</li>
<li>内容：时间 地点  参会人员</li>
</ol>
</li>
<li>开demo会议：主讲人：某个开发人员<ul>
<li>会议途中产品和测试提出问题</li>
</ul>
</li>
<li>发demo结果通知邮件(由产品同学发)<ol>
<li>demo结果</li>
<li>如果不通过，有哪些问题</li>
</ol>
</li>
<li><p>如果不通过，召集第二次Demo会议，知道通过为止。第二次会议只需演示之前不通过的部分</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2></li>
<li>demo通过之后<ol>
<li>开发人员对代码打tag（参考文档：<a href="http://new.wiki.jnshu.com/pages/viewpage.action?pageId=1183585" target="_blank" rel="noopener"> 如何打tag </a>。）</li>
<li>开发人员部署测试环境，部署完成之后发邮件，写明域名；</li>
<li>交给测试人员进行测试，测试人员发送全体测试周期邮件</li>
</ol>
</li>
<li>测试期间，如果有测试发现bug，会在禅道上面提出bug，禅道会发送邮件到各自开发人员的邮箱，开发人员要关注BUG邮件 ，及时确认BUG，及时修改  </li>
<li>修改BUG之后，开发环境前端代码由前端同学自己部署，后端代码由后端同学自己部署  </li>
<li>测试完成之后，测试或产品发送上线通知<br>具体参看：<a href="http://my.wiki.ptteng.com/pages/createpage.action?spaceKey=art&amp;title=%E6%B5%8B%E8%AF%95Bug%E5%88%92%E5%88%86%E5%8F%8A%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B&amp;linkCreation=true&amp;fromPageId=8257825" target="_blank" rel="noopener"> 测试Bug划分及处理流程 </a>。<br>测试和线上环境发布流程：<a href="http://new.wiki.jnshu.com/pages/viewpage.action?pageId=1182458" target="_blank" rel="noopener"> 测试及线上环境发布流程 </a>。 </li>
</ol>
<h1 id="十二、-发布测试环境、集成测试（2-3天）"><a href="#十二、-发布测试环境、集成测试（2-3天）" class="headerlink" title="十二、 发布测试环境、集成测试（2-3天）"></a>十二、 发布测试环境、集成测试（2-3天）</h1><ol>
<li>禅道上建立bug，测试出bug，指派给相关人员修改</li>
</ol>
<h1 id="十三、发布线上环境，同时停止开发环境和测试环境"><a href="#十三、发布线上环境，同时停止开发环境和测试环境" class="headerlink" title="十三、发布线上环境，同时停止开发环境和测试环境"></a>十三、发布线上环境，同时停止开发环境和测试环境</h1><h1 id="十四、线上监控"><a href="#十四、线上监控" class="headerlink" title="十四、线上监控"></a>十四、线上监控</h1><ol>
<li>错误报告</li>
</ol>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
  </entry>
  <entry>
    <title>css常用命名规范</title>
    <url>/2018/07/29/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/css%E5%B8%B8%E7%94%A8%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<blockquote>
<p>作为一个对代码负责的人，每次看见别人代码里混乱的命名，总是不禁心里一顿暗骂。问及写代码的人，他们的回答总是：我英文不好，不知道如何取名，都想破了脑袋。而一些QQ群里提问题的朋友截图代码，命名也是非常混乱。网上有很多人发表CSS常用命名的文章，也都挺好的，我只是一个收集者，和把自己的常用命名加上去，分享给有需要的人，希望大家以后写的代码自己看着舒服，别人维护着也舒服。<br><a id="more"></a></p>
</blockquote>
<h1 id="class的命名"><a href="#class的命名" class="headerlink" title="class的命名"></a>class的命名</h1><ul>
<li>头：header</li>
<li>内容：content/container</li>
<li>尾：footer</li>
<li>导航：nav   navigation n.航行；航海</li>
<li>侧栏：sidebar</li>
<li>栏目：column</li>
<li>页面外围控制整体佈局宽度：wrapper</li>
<li>左右中：left right center</li>
<li>登录条：loginbar</li>
<li>标志：logo</li>
<li>广告：banner</li>
<li>页面主体：main</li>
<li>热点：hot</li>
<li>新闻：news</li>
<li>下载：download</li>
<li>子导航：subnav</li>
<li>菜单：menu</li>
<li>子菜单：submenu</li>
<li>搜索：search</li>
<li>友情链接：friendlink</li>
<li>页脚：footer</li>
<li>版权：copyright</li>
<li>滚动：scroll</li>
<li>内容：content</li>
<li>标签：tags</li>
<li>文章列表：list</li>
<li>提示信息：msg–message</li>
<li>小技巧：tips</li>
<li>栏目标题：title</li>
<li>加入：joinus</li>
<li>指南：guide</li>
<li>服务：service</li>
<li>注册：regsiter</li>
<li>状态：status</li>
<li>投票：vote</li>
<li>合作伙伴：partner</li>
</ul>
<h1 id="id的命名"><a href="#id的命名" class="headerlink" title="id的命名"></a>id的命名</h1><h2 id="页面结构"><a href="#页面结构" class="headerlink" title="页面结构"></a>页面结构</h2><ul>
<li>容器: container</li>
<li>页头：header</li>
<li>内容：content/container</li>
<li>页面主体：main</li>
<li>页尾：footer</li>
<li>导航：nav</li>
<li>侧栏：sidebar</li>
<li>栏目：column</li>
<li>页面外围控制整体佈局宽度：wrapper</li>
<li>左右中：left right center</li>
</ul>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><ul>
<li>导航：nav</li>
<li>主导航：mainnav</li>
<li>子导航：subnav</li>
<li>顶导航：topnav</li>
<li>边导航：sidebar</li>
<li>左导航：leftsidebar</li>
<li>右导航：rightsidebar</li>
<li>菜单：menu</li>
<li>子菜单：submenu</li>
<li>标题: title</li>
<li>摘要: summary</li>
</ul>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>标志：logo</li>
<li>广告：banner</li>
<li>登陆：login</li>
<li>登录条：loginbar</li>
<li>注册：register</li>
<li>搜索：search</li>
<li>功能区：shop</li>
<li>标题：title</li>
<li>加入：joinus</li>
<li>状态：status</li>
<li>按钮：btn</li>
<li>滚动：scroll</li>
<li>标籤页：tab</li>
<li>文章列表：list</li>
<li>提示信息：msg</li>
<li>当前的: current</li>
<li>小技巧：tips</li>
<li>图标: icon</li>
<li>注释：note</li>
<li>指南：guild</li>
<li>服务：service</li>
<li>热点：hot</li>
<li>新闻：news</li>
<li>下载：download</li>
<li>投票：vote</li>
<li>合作伙伴：partner</li>
<li>友情链接：link</li>
<li>版权：copyright</li>
</ul>
]]></content>
      <categories>
        <category>层叠样式表CSS</category>
      </categories>
      <tags>
        <tag>命名规范</tag>
      </tags>
  </entry>
</search>
