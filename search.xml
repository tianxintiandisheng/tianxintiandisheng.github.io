<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[简述JavaScript中this的指向]]></title>
    <url>%2F2018%2F08%2F27%2F%E7%AE%80%E8%BF%B0JavaScript%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91%2F</url>
    <content type="text"><![CDATA[简介：我们重点掌握this作为对象方法调用，作为函数调用，作为构造函数调用，和使用apply 或 call 调用这几种，其他的情况了解即可，请牢记一点，this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的。 一.背景介绍 在面向对象的语言中（例如Java,C#等)，this含义是明确且具体的，即指向当前对象。一般在编译期绑定。而在javascript中，this是动态绑定的，它可以是全局对象、当前对象或者任意对象，这完全取决于函数的调用方式，并且在严格模式下也有不同，这就导致了this具备了多重含义，可以使得javascript更灵活的使用。但是，带来了灵活性的同时也会给我们初学者带来不少困惑。即使是细微的语法变化，都有可能意外改变this的值。 二.知识剖析JavaScript中函数的调用常用的有以下几种方式： 作为对象方法调用 作为函数调用 作为构造函数调用 使用apply 或 call 调用 下面我们将按照调用方式的不同，分别讨论this 的含义 1.纯粹的作为函数调用：全局函数中，this指向window 1234function a()&#123; console.log(this);&#125;a(); 2.作为对象方法的调用：当函数被作为某个对象的方法调用时，this就是那个对象 1234567891011var name = &apos;火影&apos;;var person2 = &#123; name: &apos;水影&apos;, sayName: function() &#123; console.log(this.name); &#125;&#125;;var sayNameWin = person2.sayName;person2.sayName(); //水影sayNameWin(); //火影 作为 window 的方法被调用的 3.作为构造函数调用：this指向新对象 123456function Person3(name) &#123; this.name = name; console.log(this);&#125;var person3 = new Person3(&apos;张飒&apos;);console.log(person3.name); //张飒 4.apply、call调用：this指向改变后的调用这个函数的对象12345678var person4 = &#123; name: &apos;人才&apos;&#125;;function fn() &#123; console.log(this); //Object &#123;name: &quot;人才&quot;&#125; console.log(this.name); //人才&#125;fn.apply(person4); 三.拓展思考如何能加深记忆？this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的。 四.参考文献深入浅出 JavaScript 中的 thisJavaScript中的this用法与指向如何理解 JavaScript 中的 this 关键字？ 五.更多讨论1. 如果想让一个this指向函数内部，但是它指向了全局，有什么办法让它指向函数内部？使用call方法或者apply方法给它指定this，或者把他作为对象的方法调用 2. setTimeout、setInterval中的this是指向哪里？《 javascript 高级程序设计》中写到：“超时调用的代码都是在全局执行域中执行的”。setTimeout/setInterval 执行的时候，this 默认指向 window 对象，除非手动改变 this 的指向。 3. 简单说一下this 到底有几种指向？我们重点掌握作为对象方法调用，作为函数调用，作为构造函数调用，和使用apply 或 call 调用这几种，其他的情况了解即可，]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[异步请求之设置请求头Content-Type]]></title>
    <url>%2F2018%2F08%2F25%2F%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E4%B9%8B%E8%AE%BE%E7%BD%AEContent-Type%2F</url>
    <content type="text"><![CDATA[什么是AJAX: 先给出结论——我们每日用到的AJAX，是通过javascript的XMLHttpRequest对象，使用HTTP请求，来直接与服务器通信。而angular的$http服务，其内部代码也是使用XMLHttpRequest对象来连接服务器。 #问题：为什么这个post请求不能成功，服务器返回码虽然是200，但它值总是不对？？？ #答案：除开请求参数，请求地址等基本错误外，还有可能有一个非常重要的原因就是请求头中的Content-Type不对。 #基础知识：HTTP，是一套网络通信规则，让我们可以通过浏览器等客户端请求和发送数据到服务器。 #每次HTTP通信需要完成7个步骤：1.建立TCP连接2.浏览器向服务器发送请求命令3.浏览器发送请求头信息4.服务器应答5.服务器发送应答头信息6.服务器向浏览器发送数据7.关闭TCP连接 进一步诠释HTTP（可以不看的部分）： 请求头声明有关浏览器和正文的一些相关信息1234567Content-Encoding:gzipContent-Language:zh-CNContent-Type:text/html; charset=utf-8Date:Wed, 11 Jan 2017 01:48:38 GMTPragma:no-cacheServer:nginx/1.4.6 (Ubuntu)Transfer-Encoding:chunked 应答码 1XX 收到请求，正在处理 2XX 成功类 3XX 重定向类 4XX 客户端错误类（著名的404，表示请求的页面不存在） 5XX 服务器错误类 响应头也包含很多服务信息12345678910111213141516Accept:application/json, text/plain, */* Accept-Encoding:gzip, deflate, sdch Accept-Language:zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4 Connection:keep-alive Cookie:JSESSIONID=aaa6A1XXqQ-QbbwfPOZGv Host:59.110.159.108 Referer:http://59.110.159.108/luoboduo/html/index.html User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36 6.服务器返回的数据（JSON/XML/….）{&quot;code&quot;:0,&quot;message&quot;:&quot;success&quot;,&quot;onlineUserCount&quot;:&quot;&quot;,&quot;classCount&quot;:308,&quot;userCount&quot;:8507} 详细讲讲Content-Type因为POST请求的协议并没有规定数据必须使用什么编码方式，而数据发送出去，还要服务器解析成功才行。服务器则通常根据请求头里的Content-Type字段来获知消息是以什么方式编码，再以对应方式解析。而有的接口服务器则不能解析某些编码方式的数据。因此需要对Content-Type进行设置。 最常见的Content-Type列出如下： ##1. application/x-www-form-urlencoded 最常见的POST提交格式，使用这个编码格式post的数据会以这种方式提交：key1=value1&amp;key2=value2。而我们的任务中所用到的大多数接口都只支持这种编码格式。 注意：jquery的POST默认就是application/x-www-form-urlencoded；而angular默认是application/json，而且若是提交的数据格式为json则需要序列化$.param(json) ##2. multipart/form-data 通常上传图片等文件会使用这种编码格式提交。 使用方法： var fd = new FormData(); fd.append(key, value); 注意：若使用jquery，Content-Type设置为false；若使用angular，Content-Type设置为undefind 3. application/json 提交JSON格式的数据 注意：若使用jquery，json数据需要字符串化JSON.stringify()；若使用angular，直接使用json即可]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>xhr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何验证程序是否完成，测试以及deBug?]]></title>
    <url>%2F2018%2F08%2F24%2F%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E7%A8%8B%E5%BA%8F%E6%98%AF%E5%90%A6%E5%AE%8C%E6%88%90%EF%BC%8C%E6%B5%8B%E8%AF%95%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%AD%A3Bug%2F</url>
    <content type="text"><![CDATA[一.背景介绍在日常中，我们码代码都是按照需求来的，为了验证我们的工作成果是否符合项目的需求，那么验证程序是否完成、测试以及修复bug就成了我们工作中非常重要的流程。 二.知识剖析 什么样的程序是完成的程序 从需求的角度看：满足用户的全部需求 从程序的角度看：代码不存在明显bug，结构明晰，逻辑通顺，有一定的优化 从UI图的角度看：较为完美的还原了UI图的设计 从后期版本维护迭代的角度看：注释完备，稳定性好，不加班的代码就是好代码 测试：测试是使用人工操作或者软件自动运行的方式来检验它是否满足规定的需求或弄清预期结果与实际结果之间的差别的过程。软件测试的方法 按照测试范围，可以分为模块测试和整体联调 按照测试条件，可以分为正常操作情况测试和异常情况测试 按照测试的输入范围，可以分为全覆盖测试和抽样测试 按照测试方式模块测试：针对设计中的一个一个模块来进行测试的，目的是保证每个模块作为一个单元能正确运行，所以模块测试通常又被称为单元测试。在这个测试步骤中所发现的往往是编码和详细设计的错误。整体联调：测试模块间接口的正确性、各模块间的数据流和控制流是否按照设计实现其功能、以及集成后整体功能的正确性。正常操作情况测试：根据正确的操作流程对单独的模块或整体进行测试，确定被测对象可以良好运行异常情况测试：异常情况，可能会包括数据库异常，系统异常，用户异常操作等情况3.一些测试的概念成熟性：软件产品要避免由软件中错误而导致失效的能力容错性：在软件失效或者违反规定的接口的情况下，软件产品维持规定的性能级别的能力易恢复性：在发生故障的情况下，软件重建规定的性能级别并恢复受直接影响的数据的能力可靠性依从性：软件产品依附于同可靠性相关的标准、约定或规定的能力全覆盖测试：对于被测对象全面，整体，多维度的测试，受限于时间和人力成本，除非被测对象级别很高，不然不会采用这种测试方式抽样测试：针对功能及模块随机抽取被测对象 三.常见问题如何debug？ 四.解决方案老大在知乎上的回答： 确认Bug是否在本地可以重现。 确认Bug在哪一段代码中。 去除掉所有无关代码，只去调试和Bug相关的代码。 和之前正常运行的版本对比，尝试恢复到之前可以正常运行的代码。 重新写一个小Demo，确认是否可以正常运行，可以的话，移动代码到原有的代码中。 如果本地无法重现，打日志，观察线上行为。 重启服务，重启IDE，重启笔记本，重启服务器。 跟产品经理说这个Bug解决不了，花费的代价很大，不值得。 张明云在知乎上的回答：解决问题的流程：了解问题→定位问题→分析问题→解决问题→验证问题解决问题的方法(排名分先后) 借助搜索引擎：遇到有明显的异常信息，且自己并不熟悉为什么异常时，最高效的解决方法是借助搜索引擎，这里的搜索引擎一定是谷歌，不是百度；借助搜索引擎能解决工作中的大部分bug，你要相信，全世界这么多开发人员，你遇到过的大多数问题其他人也遇到过； 打印调试法：这是最笨但最有效的办法，人会说谎、断点调试可能会说谎，但日志一定不会说谎； 二分排除法：当你遇到随机问题、帮助他人解bug或者遇到自己不熟悉的代码时，通过屏蔽一部分代码，运行观察问题仍然存在，如果存在则进一步分析屏蔽一部分代码，直到定位到有问题的具体位置为止，这种方法能解决工作中的很大一部分疑难杂症； 小黄鸭调试法：当你向某个对象陈述你的思路时，往往会有意想不到的结果，哪怕对方并不是一个生物； 断点调试法：受限于效率不高以及在多线程环境下断点调试并不灵，有必要时才考虑用这种方法；通常可以使用打印调试法来代替； 线上求助：包括论坛提问、RTX和微信群提问等；不到万不得已不要用这种办法，在有限的圈子里面，你遇到的一个具体技术问题很有可能其他人并没有遇到过，多数时候问了也是白问，但有时候也可能是一种有效的方法。 五.编码实战#六.拓展思考 什么是小黄鸭调试法? 小黄鸭调试法，又称橡皮鸭调试法、黄鸭除虫法（Rubber Duck Debugging）是可在软件工程中使用的一种调试代码的方法。方法就是在程序的调试、除错或测试过程中，操作人耐心地向小黄鸭解释每一行程序的作用，以此来激发灵感与发现矛盾。 此概念是参照于一个故事。故事中程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码。许多程序员都有向别人提问及解释编程问题的经历，而目标甚至可能是完全不懂编程的人。而就在解释的过程中，程序员可能就发觉了问题的解决方案。一边阐述代码的意图，一边观察它实际上的意图并做调试，两者间的任何不协调都会变得更明显，使人更容易发现错误所在。如果没有玩具小鸭，操作人也可以向其他任何东西倾诉，比如桌上的盆栽、键盘/鼠标等。 七.参考资料软件开发流程如何提高测试覆盖率测试分析中对异常情况考虑软件异常测试断点调试老程序员解bug有那些通用套路？ 八.更多讨论Q: bug的优先级有哪几种？ critical(危险的)：是说项目中某一块功能因为这个bug而导致测试无法进行下去，此critical级别，该等级问题出现在不影响其他功能测试的情况下可以继续该版本试block是说项目中有闪退情况，崩溃情况。此为block级别，出现这种级别的问题此本停止测试 major(重要的)：是说一些功能没有实现，但是不影响使用，功能菜单缺失，但不会影响系统稳定。此为major，这种问题应该合理安排时间进行修改 normal(普通的)：是说界面等UI问题显示错误，比如字体大小，颜色，间距等问题。此类问题在测试初期较多，优先程度较低；在测试后期出现较少，应及时处理） minor(次要的)：是说界面、性能缺陷，建议类问题，不影响操作功能的执行，可以优化性能的方案等。 Q: 日志和断点的优劣？对于少量数据的检测，断点操作比较麻烦，日志很直接。但是对于比较复杂的代码，打断点能更好的理清逻辑和检查数据。 Q: 如何避免写出bug？改动代码时要考虑到对其他模块的影响；思考问题要全面，考虑到可能发生的各种情况；从其他地方找到的代码要弄清楚原理，了解这个知识点，再用到自己的项目中。 相关链接ppt地址腾讯视频地址csdn博客地址]]></content>
  </entry>
  <entry>
    <title><![CDATA[取消浏览器对页面滚动条位置的记录]]></title>
    <url>%2F2018%2F08%2F11%2F%E5%8F%96%E6%B6%88%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8%E6%9D%A1%E4%BD%8D%E7%BD%AE%E7%9A%84%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[浏览器在导航跳转和通过 History API 创建历史记录时，都会记录当前的垂直滚动距离，在重新访问时恢复这个距离。如何取消记录当前的垂直滚动距离,使其刷新时可以回到顶部呢? 问题描述：项目提出bug，当正在浏览页面的时候点击返回首页此时页面停留在页面顶部，然后立即刷新，页面会回到刚才浏览的部分。期望：当浏览时刷新可以保存滑动条的位置但是当点击首页的时候不需要保存 问题出现原因：浏览器在导航跳转和通过 History API 创建历史记录时，都会记录当前的垂直滚动距离，在重新访问时恢复这个距离。 问题解决办法：1、初级版1234567891011$(&quot;.toIndex&quot;).click(function()&#123; if (&apos;scrollRestoration&apos; in history) &#123; history.scrollRestoration = &apos;manual&apos;; &#125;&#125;);//去除默认的滚动恢复行为var recoverAuto = function () &#123; if (&apos;scrollRestoration&apos; in history) &#123; history.scrollRestoration = &apos;auto&apos;; &#125;&#125;;setTimeout(recoverAuto,1800);//回复默认的滚动恢复行为 给返回首页添加点击事件，关闭记录当前的垂直滚动距离浏览器行为。但是这样会导致之后也无法保存滚动条的位置，所以后面加了一个定时器，在1.8s之后恢复浏览器的记录行为。缺点：如果用户在1.8s之内浏览页面并刷新，不会回到浏览位置。 2、 终极方案（从根本上解决问题，无bug）123$(&quot;.toIndex&quot;).click(function()&#123; $(&apos;body,html&apos;).scrollTop(0);&#125;);//返回首页的同时将滑动条置顶 给返回首页添加点击事件，返回首页的同时将滑动条置顶，让浏览器记录一个在顶部的历史记录。 相关知识 平常使用浏览器的后退功能时，常常会发现返回的页面滚动到了之前的位置，而不是简单的回到顶部。这是由于浏览器在导航跳转和通过 History API 创建历史记录时，都会记录当前的垂直滚动距离，在重新访问时恢复这个距离。值得一提的是，在 HTML History Spec中并没有强制要求浏览器记录与恢复滚动距离。 引入新的 API为了让开发者能够通过编程方式关闭这一浏览器行为，《浏览器恢复滚动提案》引入了新的 API：1234if (&apos;scrollRestoration&apos; in history) &#123; // 默认值为&apos;auto&apos; history.scrollRestoration = &apos;manual&apos;;&#125;]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Markdown 配置七牛云作为图床]]></title>
    <url>%2F2018%2F07%2F31%2FMarkdown-%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E4%BA%91%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A%2F</url>
    <content type="text"><![CDATA[Hexo在使用Markdown编辑发布博客时，经常要上传本地图片，渲染加载图片的效果很不理想。推荐使用云平台作为图床，提高编辑效率和图片效果。 一、注册七牛云账号 七牛云注册地址 新增存储空间。注册完成之后，在资源主页中的对象存储里添加对象，如添加image 简单的上传图片，复制外链 二. 使用插件（Mpic）Mpic下载 之前我在没有发现Mpic这款软件的时候，将图片上传到七牛云存储总共分四步： 登录打开七牛云网页个人存储空间 上传图片 复制外链 粘贴到 Markdown 一张图片的上传整整用了四步，特别麻烦。直到LZ最近发现了Mpic之后，才发现，上传图片原来也能这么简单。使用Mpic，只需要将七牛云存储的账号信息配置一次(参考：如何设置七牛云存储账号？)，就可以将以上这四个步骤合为一个。同时，MPic提供了点击上传、拖曳上传、截图上传、复制上传四种上传图片的方法，更是让人感叹好的软件极大的提高了效率啊。 配置Mpic插件，获取密匙进入七牛云个人中心的密钥管理，获取AccessKey和SecretKey 三. 使用极简图床使用极简图床,关联七牛云账号]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用js或css实现瀑布流（Pinterest）布局教程]]></title>
    <url>%2F2018%2F07%2F30%2F%E4%BD%BF%E7%94%A8js%E6%88%96css%E5%AE%9E%E7%8E%B0%E7%80%91%E5%B8%83%E6%B5%81%EF%BC%88Pinterest%EF%BC%89%E5%B8%83%E5%B1%80%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[瀑布流，又称瀑布流式布局。这种布局适合于小数据块，每个数据块内容相近且没有侧重。通常，随着页面滚动条向下滚动，这种布局还会不断加载数据块并附加至当前尾部。 瀑布流布局实例一、js实现 代码：js实现瀑布流布局代码 demo：js实现瀑布流布局demo 二、css实现 Multi-columns Flexbox Grid 总结：这篇文章主要介绍了如何实现瀑布流的布局。文章简单介绍了css三种实现方案：Multi-columns、Flexbox和Grid。从上面的示例或者实现手段而言，较为友好的是Flexbox的方案。当然，随着CSS Grid特性的完善，使用Grid实现瀑布流布局将会变得更为简单和友好。以及一种相对简单的js实现方案。]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[敏捷开发流程]]></title>
    <url>%2F2018%2F07%2F30%2F%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[敏捷软件开发，又称敏捷开发，是一种从1990年代开始逐渐引起广泛关注的一些新型软件开发方法，是一种应对快速变化的需求的一种软件开发能力。它们的具体名称、理念、过程、术语都不尽相同，相对于“非敏捷”，更强调程序员团队与业务专家之间的紧密协作、面对面的沟通（认为比书面的文档更有效）、频繁交付新的软件版本、紧凑而自我组织型的团队、能够很好地适应需求变化的代码编写和团队组织方法，也更注重软件开发过程中人的作用。 一、story讲解 制作竞品分析PPT，UE全组参与。（用时：根据产品复杂度，0.5-2小时之内） 制作产品原型，交由客户看，客户没有异议之后禅道录入story 产品在禅道拆分好story，并且定义出优先级，关联需求，后续开发根据优先级进行开发 由产品讲解story，前端和后端都参与。（用时：根据产品的复杂度，1-3小时之内） 二、人员划分 新建wiki项目主页，把PPT和产品原型（HTML文件）上传到wiki 根据产品原型，按照模块划分相关负责人，前端和后端都是，并放到wiki。（由项目负责人新建） 三、定义接口文档（2-3天） 前端后端相关人员一起，对照原型，根据模块及页面大概定义出接口 一个页面中有几个接口，每个接口入参与出参是什么 后端每个模块的负责人，根据开会讨论的结果，在wiki上生成标准的接口文档 将后端做好的接口文档发给前端模块负责人过目，有问题继续修改；没问题开始后续的步骤 。 四、方案设计（1小时-1天左右，根据模块大小定义时间） 后端开发人员，根据原型以及定义的接口，做好方案设计 对有难度或者有疑点的接口，做出方案，尽量给出多个合理方案 每个方案写清楚优点缺点 五、方案评审（2-3小时） 对做出的方案设计，做方案评审，建议全体人员参与（无论做不做该项目） 六、禅道拆分（1-2小时） 相关负责人按照优先级顺序，在禅道拆分自己的任务，单个任务最多不要超过4小时，即拆分要详细 拆分一个task时，以具体写的代码为一个task，并在任务名称中写出该类/方法的名称在任务描述中写出该task的代码块具体有的功能 当拆完task后，这几个task所完成功能的代码已经过了一遍 如果有不了解的功能，在方案评审前先写出一个demo，以方便拆分task的估时 一个task用时应在0.5-2之间，最大最大4个小时 以文件上传功能为例，分成3个task task1.任务名称：公共模块-文件上传-上传文件controller的方法fileUpload任务描述：通过网页获取文件，文件判空，判断文件的归属类型（用户/教材/课时/步骤/咨询）工时：1 task2.任务名称：公共模块-文件上传-添加文件FileUtil 和FileUtilOssImpl任务描述：util处理上传的文件，判断文件类型，大小，设置文件上传的路径，返回的url工时：1.5 task3.任务名称：公共模块-文件上传-文件接口spring-fileOss.xml 配置文件任务描述：oss的文件上传， 调用的spring.xml配置文件（密匙，ID,bucket等）工时：1.5 七、开发 搭建开发服务器 开发人员根据禅道上的任务，按时完成自己的开发工作，具体体现到日报上 每天上午开10分钟左右进度会议，如果有延迟现象出现，拿出解决方案，保证项目按照禅道上的时间点完成 数据库索引(两种索引): 经常查询的，数据散列度比较高的，做一般索引，不需要建联合索引。 数据必须保持唯一的，建唯一索引。(要有文档，文档表明哪些字段要建索引。发邮件。) 八、阶段测试 每天至少发布一次代码到开发环境，并且保证发布完之后程序没问题(与开发并行) 九、性能测试和coderevivew（1天） 对每个接口做好性能测试 每个接口的响应时间不超过200ms，如果有超过的，做优化，尽量缩小到200ms内 完成codereview，根据codereview结论完成修改 十、压力测试 做好压测报告 十一、 Demodemo 发demo申请邮件，收件人包括产品、测试同学、前后端相关开发人员 主题：XX项目demo通知 内容：时间 地点 参会人员 开demo会议：主讲人：某个开发人员 会议途中产品和测试提出问题 发demo结果通知邮件(由产品同学发) demo结果 如果不通过，有哪些问题 如果不通过，召集第二次Demo会议，知道通过为止。第二次会议只需演示之前不通过的部分 测试 demo通过之后 开发人员对代码打tag（参考文档： 如何打tag 。） 开发人员部署测试环境，部署完成之后发邮件，写明域名； 交给测试人员进行测试，测试人员发送全体测试周期邮件 测试期间，如果有测试发现bug，会在禅道上面提出bug，禅道会发送邮件到各自开发人员的邮箱，开发人员要关注BUG邮件 ，及时确认BUG，及时修改 修改BUG之后，开发环境前端代码由前端同学自己部署，后端代码由后端同学自己部署 测试完成之后，测试或产品发送上线通知具体参看： 测试Bug划分及处理流程 。测试和线上环境发布流程： 测试及线上环境发布流程 。 十二、 发布测试环境、集成测试（2-3天） 禅道上建立bug，测试出bug，指派给相关人员修改 十三、发布线上环境，同时停止开发环境和测试环境十四、线上监控 错误报告]]></content>
      <tags>
        <tag>敏捷开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css常用命名规范]]></title>
    <url>%2F2018%2F07%2F29%2Fcss%E5%B8%B8%E7%94%A8%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[作为一个对代码负责的人，每次看见别人代码里混乱的命名，总是不禁心里一顿暗骂。问及写代码的人，他们的回答总是：我英文不好，不知道如何取名，都想破了脑袋。而一些QQ群里提问题的朋友截图代码，命名也是非常混乱。网上有很多人发表CSS常用命名的文章，也都挺好的，我只是一个收集者，和把自己的常用命名加上去，分享给有需要的人，希望大家以后写的代码自己看着舒服，别人维护着也舒服。 class的命名 头：header 内容：content/container 尾：footer 导航：nav navigation n.航行；航海 侧栏：sidebar 栏目：column 页面外围控制整体佈局宽度：wrapper 左右中：left right center 登录条：loginbar 标志：logo 广告：banner 页面主体：main 热点：hot 新闻：news 下载：download 子导航：subnav 菜单：menu 子菜单：submenu 搜索：search 友情链接：friendlink 页脚：footer 版权：copyright 滚动：scroll 内容：content 标签：tags 文章列表：list 提示信息：msg–message 小技巧：tips 栏目标题：title 加入：joinus 指南：guide 服务：service 注册：regsiter 状态：status 投票：vote 合作伙伴：partner id的命名页面结构 容器: container 页头：header 内容：content/container 页面主体：main 页尾：footer 导航：nav 侧栏：sidebar 栏目：column 页面外围控制整体佈局宽度：wrapper 左右中：left right center 导航 导航：nav 主导航：mainnav 子导航：subnav 顶导航：topnav 边导航：sidebar 左导航：leftsidebar 右导航：rightsidebar 菜单：menu 子菜单：submenu 标题: title 摘要: summary 功能 标志：logo 广告：banner 登陆：login 登录条：loginbar 注册：register 搜索：search 功能区：shop 标题：title 加入：joinus 状态：status 按钮：btn 滚动：scroll 标籤页：tab 文章列表：list 提示信息：msg 当前的: current 小技巧：tips 图标: icon 注释：note 指南：guild 服务：service 热点：hot 新闻：news 下载：download 投票：vote 合作伙伴：partner 友情链接：link 版权：copyright]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>命名规范</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo快速入门]]></title>
    <url>%2F2018%2F07%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 快速开始创建一篇新文章1$ hexo new "My New Post" 详细信息: Writing 启用本地预览服务1$ hexo server 详细信息: Server 生成静态文件1$ hexo generate 详细信息: Generating 部署到远程站点1$ hexo deploy 详细信息: Deployment]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
